
LED_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800cc78  0800cc78  0001cc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0a4  0800d0a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0a4  0800d0a4  0001d0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0ac  0800d0ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0ac  0800d0ac  0001d0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0b0  0800d0b0  0001d0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001200  200001e0  0800d294  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e0  0800d294  000213e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026002  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c26  00000000  00000000  00046255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020a8  00000000  00000000  0004ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001959  00000000  00000000  0004cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e640  00000000  00000000  0004e881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026d95  00000000  00000000  0007cec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013d3d9  00000000  00000000  000a3c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009d8c  00000000  00000000  001e1030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001eadbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc5c 	.word	0x0800cc5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800cc5c 	.word	0x0800cc5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	463b      	mov	r3, r7
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f009 fd5a 	bl	800a9ba <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f06:	4b4b      	ldr	r3, [pc, #300]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <MX_ADC2_Init+0x144>)
 8000f0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0c:	4b49      	ldr	r3, [pc, #292]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f0e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f14:	4b47      	ldr	r3, [pc, #284]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b46      	ldr	r3, [pc, #280]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f20:	4b44      	ldr	r3, [pc, #272]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f2e:	2208      	movs	r2, #8
 8000f30:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f32:	4b40      	ldr	r3, [pc, #256]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f38:	4b3e      	ldr	r3, [pc, #248]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f40:	2204      	movs	r2, #4
 8000f42:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f44:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f4e:	f44f 62d4 	mov.w	r2, #1696	; 0x6a0
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f5c:	4b35      	ldr	r3, [pc, #212]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_128;
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f76:	2218      	movs	r2, #24
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_7;
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f7c:	22e0      	movs	r2, #224	; 0xe0
 8000f7e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f8c:	4829      	ldr	r0, [pc, #164]	; (8001034 <MX_ADC2_Init+0x140>)
 8000f8e:	f001 fc2d 	bl	80027ec <HAL_ADC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8000f98:	f000 fe94 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f9c:	4b27      	ldr	r3, [pc, #156]	; (800103c <MX_ADC2_Init+0x148>)
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fa8:	237f      	movs	r3, #127	; 0x7f
 8000faa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fac:	2304      	movs	r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8000fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481d      	ldr	r0, [pc, #116]	; (8001034 <MX_ADC2_Init+0x140>)
 8000fc0:	f002 f984 	bl	80032cc <HAL_ADC_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8000fca:	f000 fe7b 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC2_Init+0x14c>)
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4816      	ldr	r0, [pc, #88]	; (8001034 <MX_ADC2_Init+0x140>)
 8000fdc:	f002 f976 	bl	80032cc <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 8000fe6:	f000 fe6d 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_ADC2_Init+0x150>)
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fee:	2312      	movs	r3, #18
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 300;
 8000ff2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000ff6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_ADC2_Init+0x140>)
 8000ffe:	f002 f965 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 8001008:	f000 fe5c 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_ADC2_Init+0x154>)
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001010:	2318      	movs	r3, #24
 8001012:	607b      	str	r3, [r7, #4]
  sConfig.Offset = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_ADC2_Init+0x140>)
 800101e:	f002 f955 	bl	80032cc <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8001028:	f000 fe4c 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001fc 	.word	0x200001fc
 8001038:	50000100 	.word	0x50000100
 800103c:	04300002 	.word	0x04300002
 8001040:	25b00200 	.word	0x25b00200
 8001044:	08600004 	.word	0x08600004
 8001048:	21800100 	.word	0x21800100

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0a0      	sub	sp, #128	; 0x80
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	2254      	movs	r2, #84	; 0x54
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fca4 	bl	800a9ba <memset>
  if(adcHandle->Instance==ADC2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <HAL_ADC_MspInit+0x13c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	f040 8081 	bne.w	8001180 <HAL_ADC_MspInit+0x134>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800107e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001082:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001084:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001088:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108a:	f107 0318 	add.w	r3, r7, #24
 800108e:	4618      	mov	r0, r3
 8001090:	f005 ff76 	bl	8006f80 <HAL_RCCEx_PeriphCLKConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800109a:	f000 fe13 	bl	8001cc4 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a3a      	ldr	r2, [pc, #232]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b2f      	ldr	r3, [pc, #188]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a2e      	ldr	r2, [pc, #184]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <HAL_ADC_MspInit+0x140>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC2_IN8
    PC3     ------> ADC2_IN9
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010e6:	230c      	movs	r3, #12
 80010e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f6:	4619      	mov	r1, r3
 80010f8:	4825      	ldr	r0, [pc, #148]	; (8001190 <HAL_ADC_MspInit+0x144>)
 80010fa:	f003 fbd9 	bl	80048b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010fe:	2303      	movs	r3, #3
 8001100:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f003 fbcc 	bl	80048b0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_ADC_MspInit+0x148>)
 800111a:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <HAL_ADC_MspInit+0x14c>)
 800111c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001120:	2224      	movs	r2, #36	; 0x24
 8001122:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_ADC_MspInit+0x148>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001144:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_ADC_MspInit+0x148>)
 800114e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001152:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001154:	480f      	ldr	r0, [pc, #60]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001156:	f003 f8df 	bl	8004318 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0x118>
    {
      Error_Handler();
 8001160:	f000 fdb0 	bl	8001cc4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_ADC_MspInit+0x148>)
 8001168:	655a      	str	r2, [r3, #84]	; 0x54
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_ADC_MspInit+0x148>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2105      	movs	r1, #5
 8001174:	2012      	movs	r0, #18
 8001176:	f003 f8a7 	bl	80042c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800117a:	2012      	movs	r0, #18
 800117c:	f003 f8be 	bl	80042fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001180:	bf00      	nop
 8001182:	3780      	adds	r7, #128	; 0x80
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	50000100 	.word	0x50000100
 800118c:	40021000 	.word	0x40021000
 8001190:	48000800 	.word	0x48000800
 8001194:	20000268 	.word	0x20000268
 8001198:	40020008 	.word	0x40020008

0800119c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b090      	sub	sp, #64	; 0x40
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	/* Calibrating ADCs for better accuracy */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80011a2:	217f      	movs	r1, #127	; 0x7f
 80011a4:	483e      	ldr	r0, [pc, #248]	; (80012a0 <MX_FREERTOS_Init+0x104>)
 80011a6:	f002 ff43 	bl	8004030 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start_DMA(&hadc2, adcValue, 4);
 80011aa:	2204      	movs	r2, #4
 80011ac:	493d      	ldr	r1, [pc, #244]	; (80012a4 <MX_FREERTOS_Init+0x108>)
 80011ae:	483c      	ldr	r0, [pc, #240]	; (80012a0 <MX_FREERTOS_Init+0x104>)
 80011b0:	f001 fcd8 	bl	8002b64 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start(&hadc2);

	//HAL_ADC_StartSampling(&hadc2);

	/* Turn on PWM output */
	HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
 80011b4:	2103      	movs	r1, #3
 80011b6:	483c      	ldr	r0, [pc, #240]	; (80012a8 <MX_FREERTOS_Init+0x10c>)
 80011b8:	f004 fc2d 	bl	8005a16 <HAL_HRTIM_WaveformOutputStart>

	/* Start counter */
	HAL_HRTIM_WaveformCountStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 80011bc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <MX_FREERTOS_Init+0x10c>)
 80011c2:	f004 fc55 	bl	8005a70 <HAL_HRTIM_WaveformCountStart>

	  //HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2);
	PowerPWMSet(100000,(1-0.05));//Function created to ease duty cycle modification
 80011c6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80012ac <MX_FREERTOS_Init+0x110>
 80011ca:	4839      	ldr	r0, [pc, #228]	; (80012b0 <MX_FREERTOS_Init+0x114>)
 80011cc:	f000 fc4a 	bl	8001a64 <PowerPWMSet>

	ConfigPIController(&PI_voltage,0.0017f,(0.0017f/0.5f),0.8f,0.1f,1000.0);
 80011d0:	ed9f 2a38 	vldr	s4, [pc, #224]	; 80012b4 <MX_FREERTOS_Init+0x118>
 80011d4:	eddf 1a38 	vldr	s3, [pc, #224]	; 80012b8 <MX_FREERTOS_Init+0x11c>
 80011d8:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80012bc <MX_FREERTOS_Init+0x120>
 80011dc:	eddf 0a38 	vldr	s1, [pc, #224]	; 80012c0 <MX_FREERTOS_Init+0x124>
 80011e0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80012c4 <MX_FREERTOS_Init+0x128>
 80011e4:	4838      	ldr	r0, [pc, #224]	; (80012c8 <MX_FREERTOS_Init+0x12c>)
 80011e6:	f000 f9ad 	bl	8001544 <ConfigPIController>

	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2120      	movs	r1, #32
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 fcdf 	bl	8004bb4 <HAL_GPIO_WritePin>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of VinQueue */
  osMessageQDef(VinQueue, 16, float);
 80011f6:	4a35      	ldr	r2, [pc, #212]	; (80012cc <MX_FREERTOS_Init+0x130>)
 80011f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001200:	e883 0003 	stmia.w	r3, {r0, r1}
  VinQueueHandle = osMessageCreate(osMessageQ(VinQueue), NULL);
 8001204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fba8 	bl	8008960 <osMessageCreate>
 8001210:	4603      	mov	r3, r0
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <MX_FREERTOS_Init+0x134>)
 8001214:	6013      	str	r3, [r2, #0]

  /* definition and creation of VoutQueue */
  osMessageQDef(VoutQueue, 16, float);
 8001216:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <MX_FREERTOS_Init+0x130>)
 8001218:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800121c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001220:	e883 0003 	stmia.w	r3, {r0, r1}
  VoutQueueHandle = osMessageCreate(osMessageQ(VoutQueue), NULL);
 8001224:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f007 fb98 	bl	8008960 <osMessageCreate>
 8001230:	4603      	mov	r3, r0
 8001232:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <MX_FREERTOS_Init+0x138>)
 8001234:	6013      	str	r3, [r2, #0]

  /* definition and creation of dutyCycle */
  osMessageQDef(dutyCycle, 16, float);
 8001236:	4a25      	ldr	r2, [pc, #148]	; (80012cc <MX_FREERTOS_Init+0x130>)
 8001238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001240:	e883 0003 	stmia.w	r3, {r0, r1}
  dutyCycleHandle = osMessageCreate(osMessageQ(dutyCycle), NULL);
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f007 fb88 	bl	8008960 <osMessageCreate>
 8001250:	4603      	mov	r3, r0
 8001252:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <MX_FREERTOS_Init+0x13c>)
 8001254:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_FREERTOS_Init+0x140>)
 8001258:	f107 0414 	add.w	r4, r7, #20
 800125c:	461d      	mov	r5, r3
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f007 fb3c 	bl	80088ea <osThreadCreate>
 8001272:	4603      	mov	r3, r0
 8001274:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <MX_FREERTOS_Init+0x144>)
 8001276:	6013      	str	r3, [r2, #0]

  /* definition and creation of SerialTask */
  osThreadDef(SerialTask, serial_task, osPriorityNormal, 0, 256);
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_FREERTOS_Init+0x148>)
 800127a:	463c      	mov	r4, r7
 800127c:	461d      	mov	r5, r3
 800127e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	6023      	str	r3, [r4, #0]
  SerialTaskHandle = osThreadCreate(osThread(SerialTask), NULL);
 8001286:	463b      	mov	r3, r7
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fb2d 	bl	80088ea <osThreadCreate>
 8001290:	4603      	mov	r3, r0
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <MX_FREERTOS_Init+0x14c>)
 8001294:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001296:	bf00      	nop
 8001298:	3740      	adds	r7, #64	; 0x40
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	200001fc 	.word	0x200001fc
 80012a4:	2000030c 	.word	0x2000030c
 80012a8:	2000035c 	.word	0x2000035c
 80012ac:	3f733333 	.word	0x3f733333
 80012b0:	000186a0 	.word	0x000186a0
 80012b4:	447a0000 	.word	0x447a0000
 80012b8:	3dcccccd 	.word	0x3dcccccd
 80012bc:	3f4ccccd 	.word	0x3f4ccccd
 80012c0:	3b5ed289 	.word	0x3b5ed289
 80012c4:	3aded289 	.word	0x3aded289
 80012c8:	20000328 	.word	0x20000328
 80012cc:	0800cc78 	.word	0x0800cc78
 80012d0:	20000350 	.word	0x20000350
 80012d4:	20000354 	.word	0x20000354
 80012d8:	20000358 	.word	0x20000358
 80012dc:	0800cc8c 	.word	0x0800cc8c
 80012e0:	20000348 	.word	0x20000348
 80012e4:	0800ccac 	.word	0x0800ccac
 80012e8:	2000034c 	.word	0x2000034c

080012ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	//HAL_ADC_StopSampling(&hadc2);

	//taskENTER_CRITICAL();


	  if(adcFlag)
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <StartDefaultTask+0xf0>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d008      	beq.n	800130e <StartDefaultTask+0x22>
	  {
		  adcFlag = 0;
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <StartDefaultTask+0xf0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2120      	movs	r1, #32
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f003 fc53 	bl	8004bb4 <HAL_GPIO_WritePin>
	  }
	Vin = realVoltageIN((float)adcValue[0]);
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <StartDefaultTask+0xf4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800131a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131e:	ee17 0a90 	vmov	r0, s15
 8001322:	f000 f8af 	bl	8001484 <realVoltageIN>
 8001326:	eef0 7a40 	vmov.f32	s15, s0
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <StartDefaultTask+0xf8>)
 800132c:	edc3 7a00 	vstr	s15, [r3]
	Vout =realVoltageOUT((float)adcValue[1]);
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <StartDefaultTask+0xf4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001340:	ee17 0a90 	vmov	r0, s15
 8001344:	f000 f8ce 	bl	80014e4 <realVoltageOUT>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <StartDefaultTask+0xfc>)
 800134e:	edc3 7a00 	vstr	s15, [r3]

	//taskEXIT_CRITICAL();

	if(Vout<50.0)
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <StartDefaultTask+0xfc>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80013ec <StartDefaultTask+0x100>
 800135c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d526      	bpl.n	80013b4 <StartDefaultTask+0xc8>
	  {
		  //Close loop :
			//1 -  Set output voltage

			//2 - Measure output voltage
			   ovMeasure = fabs(Vout);
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <StartDefaultTask+0xfc>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	eef0 7ae7 	vabs.f32	s15, s15
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <StartDefaultTask+0x104>)
 8001372:	edc3 7a00 	vstr	s15, [r3]
			// 3 - Calculte Error = Set - Meas & new dc
			   DutyCycle = RunPIController(&PI_voltage, (ovRef-ovMeasure));
 8001376:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <StartDefaultTask+0x108>)
 8001378:	ed93 7a00 	vldr	s14, [r3]
 800137c:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <StartDefaultTask+0x104>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	481b      	ldr	r0, [pc, #108]	; (80013f8 <StartDefaultTask+0x10c>)
 800138c:	f000 f912 	bl	80015b4 <RunPIController>
 8001390:	eef0 7a40 	vmov.f32	s15, s0
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <StartDefaultTask+0x110>)
 8001396:	edc3 7a00 	vstr	s15, [r3]
			//4 -update pwm
			 //HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
			 PowerPWMSet(100000,(1-DutyCycle));
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <StartDefaultTask+0x110>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <StartDefaultTask+0x114>)
 80013ae:	f000 fb59 	bl	8001a64 <PowerPWMSet>
 80013b2:	e00e      	b.n	80013d2 <StartDefaultTask+0xe6>

	  }
	  else
	  {
		  //HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1 + HRTIM_OUTPUT_TA2);
	    DutyCycle = 0.05;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <StartDefaultTask+0x110>)
 80013b6:	4a13      	ldr	r2, [pc, #76]	; (8001404 <StartDefaultTask+0x118>)
 80013b8:	601a      	str	r2, [r3, #0]
		PowerPWMSet(100000, 1-DutyCycle);
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <StartDefaultTask+0x110>)
 80013bc:	edd3 7a00 	vldr	s15, [r3]
 80013c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <StartDefaultTask+0x114>)
 80013ce:	f000 fb49 	bl	8001a64 <PowerPWMSet>
	//snprintf(buffer, 64, "CH1:%d, CH2:%d, CH3:%d, CH4:%d \r\n", adcValue[0], adcValue[1], adcValue[2], adcValue[3]);


	//taskEXIT_CRITICAL();

    osDelay(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f007 fab0 	bl	8008938 <osDelay>
	  if(adcFlag)
 80013d8:	e78c      	b.n	80012f4 <StartDefaultTask+0x8>
 80013da:	bf00      	nop
 80013dc:	20000308 	.word	0x20000308
 80013e0:	2000030c 	.word	0x2000030c
 80013e4:	2000031c 	.word	0x2000031c
 80013e8:	20000320 	.word	0x20000320
 80013ec:	42480000 	.word	0x42480000
 80013f0:	20000324 	.word	0x20000324
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000328 	.word	0x20000328
 80013fc:	20000004 	.word	0x20000004
 8001400:	000186a0 	.word	0x000186a0
 8001404:	3d4ccccd 	.word	0x3d4ccccd

08001408 <serial_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_serial_task */
void serial_task(void const * argument)
{
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af06      	add	r7, sp, #24
 8001410:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN serial_task */
  /* Infinite loop */
  for(;;)
  {

	 snprintf(buffer, 64, "Vin:%.2f, Vout:%.2f, Duty Cycle:%.2f\r\n", Vin, Vout, DutyCycle);
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <serial_task+0x64>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f8be 	bl	8000598 <__aeabi_f2d>
 800141c:	4604      	mov	r4, r0
 800141e:	460d      	mov	r5, r1
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <serial_task+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8b7 	bl	8000598 <__aeabi_f2d>
 800142a:	4680      	mov	r8, r0
 800142c:	4689      	mov	r9, r1
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <serial_task+0x6c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f8b0 	bl	8000598 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001440:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001444:	e9cd 4500 	strd	r4, r5, [sp]
 8001448:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <serial_task+0x70>)
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <serial_task+0x74>)
 800144e:	f009 fa3d 	bl	800a8cc <sniprintf>

	 HAL_UART_Transmit(&huart2,buffer, 64, 500);
 8001452:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001456:	2240      	movs	r2, #64	; 0x40
 8001458:	4908      	ldr	r1, [pc, #32]	; (800147c <serial_task+0x74>)
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <serial_task+0x78>)
 800145c:	f006 fb7a 	bl	8007b54 <HAL_UART_Transmit>


    osDelay(1000);
 8001460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001464:	f007 fa68 	bl	8008938 <osDelay>
	 snprintf(buffer, 64, "Vin:%.2f, Vout:%.2f, Duty Cycle:%.2f\r\n", Vin, Vout, DutyCycle);
 8001468:	e7d3      	b.n	8001412 <serial_task+0xa>
 800146a:	bf00      	nop
 800146c:	2000031c 	.word	0x2000031c
 8001470:	20000320 	.word	0x20000320
 8001474:	20000004 	.word	0x20000004
 8001478:	0800ccc0 	.word	0x0800ccc0
 800147c:	200002c8 	.word	0x200002c8
 8001480:	200004a8 	.word	0x200004a8

08001484 <realVoltageIN>:
	return (T - 273.15f);
}

//This function convert digital value by adc in voltage
float realVoltageIN(uint32_t dig)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    float raw = ((float)dig / 4095.0f) * 2.5f;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001496:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80014d4 <realVoltageIN+0x50>
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	edc7 7a03 	vstr	s15, [r7, #12]
    return ((raw - 1.020f) * 89.7606f) + 10.3f;
 80014aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80014d8 <realVoltageIN+0x54>
 80014b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80014dc <realVoltageIN+0x58>
 80014ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014be:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80014e0 <realVoltageIN+0x5c>
 80014c2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	457ff000 	.word	0x457ff000
 80014d8:	3f828f5c 	.word	0x3f828f5c
 80014dc:	42b3856d 	.word	0x42b3856d
 80014e0:	4124cccd 	.word	0x4124cccd

080014e4 <realVoltageOUT>:

float realVoltageOUT(uint32_t dig)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
    float raw = ((float)dig / 4095.0f) * 2.5f;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001534 <realVoltageOUT+0x50>
 80014fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fe:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8001502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001506:	edc7 7a03 	vstr	s15, [r7, #12]
    return ((raw - 1.017f) * 89.7606f) + 7.8f;
 800150a:	edd7 7a03 	vldr	s15, [r7, #12]
 800150e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001538 <realVoltageOUT+0x54>
 8001512:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001516:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800153c <realVoltageOUT+0x58>
 800151a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001540 <realVoltageOUT+0x5c>
 8001522:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	457ff000 	.word	0x457ff000
 8001538:	3f822d0e 	.word	0x3f822d0e
 800153c:	42b3856d 	.word	0x42b3856d
 8001540:	40f9999a 	.word	0x40f9999a

08001544 <ConfigPIController>:
/*
 * Routine to configure the PI controller and pre-compute the necessary constants.
 */

void ConfigPIController(PIController* me, float kp, float ti, float limup, float limlow, float Fsamp)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6178      	str	r0, [r7, #20]
 800154c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001550:	edc7 0a03 	vstr	s1, [r7, #12]
 8001554:	ed87 1a02 	vstr	s2, [r7, #8]
 8001558:	edc7 1a01 	vstr	s3, [r7, #4]
 800155c:	ed87 2a00 	vstr	s4, [r7]
	// Set the controller parameters:
	me->kp = kp;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	601a      	str	r2, [r3, #0]
	me->ti = ti;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
	me->limup = limup;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	609a      	str	r2, [r3, #8]
	me->limlow = limlow;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]
	me->Fsamp = Fsamp;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	619a      	str	r2, [r3, #24]

    me->A1 = kp / (ti*Fsamp);
 800157e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001582:	edd7 7a00 	vldr	s15, [r7]
 8001586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800158a:	edd7 6a04 	vldr	s13, [r7, #16]
 800158e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	edc3 7a07 	vstr	s15, [r3, #28]

	// Initialize the state quantities:

	me->e_prev = 0.0;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
	me->ui_prev = 0.0;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
}
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <RunPIController>:
/*
 * Routine to run the PI controller 'me' .
 */

float RunPIController(PIController* me, float error)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	ed87 0a00 	vstr	s0, [r7]
	float up;
	float ui;							                                    // Integral part of the output
	float u;


	up= me->kp * error;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ed97 7a00 	vldr	s14, [r7]
 80015ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ce:	edc7 7a03 	vstr	s15, [r7, #12]
	ui = ( me->A1 * error) + (me->ui_prev) ;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	ed93 7a07 	vldr	s14, [r3, #28]
 80015d8:	edd7 7a00 	vldr	s15, [r7]
 80015dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	edc7 7a05 	vstr	s15, [r7, #20]

	u = up + ui ;
 80015ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80015f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	edc7 7a04 	vstr	s15, [r7, #16]

	//if ( (u>= me->limup) || (u <= me->limlow) )

	if ( (u>= me->limup) )
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	edd3 7a02 	vldr	s15, [r3, #8]
 8001604:	ed97 7a04 	vldr	s14, [r7, #16]
 8001608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	db03      	blt.n	800161a <RunPIController+0x66>
	{
		ui =  me->ui_prev;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e00d      	b.n	8001636 <RunPIController+0x82>
	}
	else
	{
		ui = ( me->A1 * error) + (me->ui_prev) ;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001620:	edd7 7a00 	vldr	s15, [r7]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 7a04 	vldr	s15, [r3, #16]
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	edc7 7a05 	vstr	s15, [r7, #20]
	}



//Stores sample [K] in variables [K-1] in order to be used in the next sampling instant
	me->e_prev = error;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	615a      	str	r2, [r3, #20]
	me->ui_prev = ui;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	611a      	str	r2, [r3, #16]

//Limiter at the output of the compensator
	if (u>= me->limup) {
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a02 	vldr	s15, [r3, #8]
 8001648:	ed97 7a04 	vldr	s14, [r7, #16]
 800164c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	db02      	blt.n	800165c <RunPIController+0xa8>
		u = me->limup;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	613b      	str	r3, [r7, #16]
	}

	if (u <= me->limlow) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001662:	ed97 7a04 	vldr	s14, [r7, #16]
 8001666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d802      	bhi.n	8001676 <RunPIController+0xc2>
		u = me->limlow;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	613b      	str	r3, [r7, #16]

	// Reset the integral when the outputs are inhibited (when the converter is blocked):
	//if(GetCoreState() != OPERATING)
	//	me->ui_prev = 0.0;					                                    // Avoid integrating when core has been disabled

	return u;
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	ee07 3a90 	vmov	s15, r3
}
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <MX_DMA_Init+0x60>)
 8001694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <MX_DMA_Init+0x60>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6493      	str	r3, [r2, #72]	; 0x48
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_DMA_Init+0x60>)
 80016a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_DMA_Init+0x60>)
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <MX_DMA_Init+0x60>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6493      	str	r3, [r2, #72]	; 0x48
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_DMA_Init+0x60>)
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2105      	movs	r1, #5
 80016c6:	200b      	movs	r0, #11
 80016c8:	f002 fdfe 	bl	80042c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016cc:	200b      	movs	r0, #11
 80016ce:	f002 fe15 	bl	80042fc <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	205e      	movs	r0, #94	; 0x5e
 80016d8:	f002 fdf6 	bl	80042c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 80016dc:	205e      	movs	r0, #94	; 0x5e
 80016de:	f002 fe0d 	bl	80042fc <HAL_NVIC_EnableIRQ>

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_GPIO_Init+0x90>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <MX_GPIO_Init+0x90>)
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_GPIO_Init+0x90>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_GPIO_Init+0x90>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_GPIO_Init+0x90>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_GPIO_Init+0x90>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_GPIO_Init+0x90>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <MX_GPIO_Init+0x90>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_GPIO_Init+0x90>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2120      	movs	r1, #32
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f003 fa2d 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800175a:	2320      	movs	r3, #32
 800175c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f003 f89c 	bl	80048b0 <HAL_GPIO_Init>

}
 8001778:	bf00      	nop
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b0b0      	sub	sp, #192	; 0xc0
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800178a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001794:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 80017a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
 80017b2:	615a      	str	r2, [r3, #20]
 80017b4:	619a      	str	r2, [r3, #24]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80017b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ba:	2260      	movs	r2, #96	; 0x60
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f009 f8fb 	bl	800a9ba <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	2220      	movs	r2, #32
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f009 f8ef 	bl	800a9ba <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <MX_HRTIM1_Init+0x228>)
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <MX_HRTIM1_Init+0x22c>)
 80017e0:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <MX_HRTIM1_Init+0x228>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <MX_HRTIM1_Init+0x228>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80017ee:	486f      	ldr	r0, [pc, #444]	; (80019ac <MX_HRTIM1_Init+0x228>)
 80017f0:	f003 f9f8 	bl	8004be4 <HAL_HRTIM_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_HRTIM1_Init+0x7a>
  {
    Error_Handler();
 80017fa:	f000 fa63 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 80017fe:	210c      	movs	r1, #12
 8001800:	486a      	ldr	r0, [pc, #424]	; (80019ac <MX_HRTIM1_Init+0x228>)
 8001802:	f003 fabf 	bl	8004d84 <HAL_HRTIM_DLLCalibrationStart>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_HRTIM1_Init+0x8c>
  {
    Error_Handler();
 800180c:	f000 fa5a 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8001810:	210a      	movs	r1, #10
 8001812:	4866      	ldr	r0, [pc, #408]	; (80019ac <MX_HRTIM1_Init+0x228>)
 8001814:	f003 fb0e 	bl	8004e34 <HAL_HRTIM_PollForDLLCalibration>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_HRTIM1_Init+0x9e>
  {
    Error_Handler();
 800181e:	f000 fa51 	bl	8001cc4 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 8001822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERA_PERIOD;
 800182a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8001832:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001836:	461a      	mov	r2, r3
 8001838:	2101      	movs	r1, #1
 800183a:	485c      	ldr	r0, [pc, #368]	; (80019ac <MX_HRTIM1_Init+0x228>)
 800183c:	f003 fb56 	bl	8004eec <HAL_HRTIM_ADCTriggerConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_HRTIM1_Init+0xc6>
  {
    Error_Handler();
 8001846:	f000 fa3d 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 100) != HAL_OK)
 800184a:	2264      	movs	r2, #100	; 0x64
 800184c:	2101      	movs	r1, #1
 800184e:	4857      	ldr	r0, [pc, #348]	; (80019ac <MX_HRTIM1_Init+0x228>)
 8001850:	f003 fd38 	bl	80052c4 <HAL_HRTIM_ADCPostScalerConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_HRTIM1_Init+0xda>
  {
    Error_Handler();
 800185a:	f000 fa33 	bl	8001cc4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 54400;
 800185e:	f24d 4380 	movw	r3, #54400	; 0xd480
 8001862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001872:	2308      	movs	r3, #8
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001878:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800187c:	461a      	mov	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	484a      	ldr	r0, [pc, #296]	; (80019ac <MX_HRTIM1_Init+0x228>)
 8001882:	f003 fb0b 	bl	8004e9c <HAL_HRTIM_TimeBaseConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_HRTIM1_Init+0x10c>
  {
    Error_Handler();
 800188c:	f000 fa1a 	bl	8001cc4 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 80018a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80018a6:	461a      	mov	r2, r3
 80018a8:	2100      	movs	r1, #0
 80018aa:	4840      	ldr	r0, [pc, #256]	; (80019ac <MX_HRTIM1_Init+0x228>)
 80018ac:	f003 fee1 	bl	8005672 <HAL_HRTIM_WaveformTimerControl>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_HRTIM1_Init+0x136>
  {
    Error_Handler();
 80018b6:	f000 fa05 	bl	8001cc4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80018ca:	2301      	movs	r3, #1
 80018cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80018ce:	2300      	movs	r3, #0
 80018d0:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80018d2:	2300      	movs	r3, #0
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80018d6:	2300      	movs	r3, #0
 80018d8:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80018da:	2300      	movs	r3, #0
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80018de:	2300      	movs	r3, #0
 80018e0:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80018e2:	2300      	movs	r3, #0
 80018e4:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80018e6:	2300      	movs	r3, #0
 80018e8:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80018ee:	2300      	movs	r3, #0
 80018f0:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 80018f2:	2300      	movs	r3, #0
 80018f4:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 80018fe:	2300      	movs	r3, #0
 8001900:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001902:	2300      	movs	r3, #0
 8001904:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001906:	2300      	movs	r3, #0
 8001908:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 800191c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001920:	461a      	mov	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	4821      	ldr	r0, [pc, #132]	; (80019ac <MX_HRTIM1_Init+0x228>)
 8001926:	f003 fe17 	bl	8005558 <HAL_HRTIM_WaveformTimerConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_HRTIM1_Init+0x1b0>
  {
    Error_Handler();
 8001930:	f000 f9c8 	bl	8001cc4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 27200;
 8001934:	f646 2340 	movw	r3, #27200	; 0x6a40
 8001938:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	2201      	movs	r2, #1
 8001940:	2100      	movs	r1, #0
 8001942:	481a      	ldr	r0, [pc, #104]	; (80019ac <MX_HRTIM1_Init+0x228>)
 8001944:	f003 fec8 	bl	80056d8 <HAL_HRTIM_WaveformCompareConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_HRTIM1_Init+0x1ce>
  {
    Error_Handler();
 800194e:	f000 f9b9 	bl	8001cc4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8001972:	463b      	mov	r3, r7
 8001974:	2201      	movs	r2, #1
 8001976:	2100      	movs	r1, #0
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <MX_HRTIM1_Init+0x228>)
 800197a:	f004 f81b 	bl	80059b4 <HAL_HRTIM_WaveformOutputConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_HRTIM1_Init+0x204>
  {
    Error_Handler();
 8001984:	f000 f99e 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001988:	463b      	mov	r3, r7
 800198a:	2202      	movs	r2, #2
 800198c:	2100      	movs	r1, #0
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <MX_HRTIM1_Init+0x228>)
 8001990:	f004 f810 	bl	80059b4 <HAL_HRTIM_WaveformOutputConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_HRTIM1_Init+0x21a>
  {
    Error_Handler();
 800199a:	f000 f993 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 800199e:	4803      	ldr	r0, [pc, #12]	; (80019ac <MX_HRTIM1_Init+0x228>)
 80019a0:	f000 f828 	bl	80019f4 <HAL_HRTIM_MspPostInit>

}
 80019a4:	bf00      	nop
 80019a6:	37c0      	adds	r7, #192	; 0xc0
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000035c 	.word	0x2000035c
 80019b0:	40016800 	.word	0x40016800

080019b4 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_HRTIM_MspInit+0x38>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10b      	bne.n	80019de <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_HRTIM_MspInit+0x3c>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_HRTIM_MspInit+0x3c>)
 80019cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019d0:	6613      	str	r3, [r2, #96]	; 0x60
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <HAL_HRTIM_MspInit+0x3c>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40016800 	.word	0x40016800
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <HAL_HRTIM_MspPostInit+0x68>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d11d      	bne.n	8001a52 <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_HRTIM_MspPostInit+0x6c>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001a40:	230d      	movs	r3, #13
 8001a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4e:	f002 ff2f 	bl	80048b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40016800 	.word	0x40016800
 8001a60:	40021000 	.word	0x40021000

08001a64 <PowerPWMSet>:
}

/* USER CODE BEGIN 1 */

void PowerPWMSet(uint32_t frequency, float dutycycle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b09c      	sub	sp, #112	; 0x70
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	ed87 0a00 	vstr	s0, [r7]
    uint32_t periodCoeff = (170000000 / frequency) * 32;
 8001a70:	4a48      	ldr	r2, [pc, #288]	; (8001b94 <PowerPWMSet+0x130>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	015b      	lsls	r3, r3, #5
 8001a7a:	66fb      	str	r3, [r7, #108]	; 0x6c

    // Calculate compare value using float for precision, then cast to uint32_t
    float tempCompareValue = periodCoeff * dutycycle;
 8001a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a86:	ed97 7a00 	vldr	s14, [r7]
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    uint32_t compareValue = (uint32_t)tempCompareValue;
 8001a92:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9a:	ee17 3a90 	vmov	r3, s15
 8001a9e:	667b      	str	r3, [r7, #100]	; 0x64

    // Update the timer period
    HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001aa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
    pTimeBaseCfg.Period = periodCoeff;
 8001aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ab0:	657b      	str	r3, [r7, #84]	; 0x54
    pTimeBaseCfg.RepetitionCounter = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	65bb      	str	r3, [r7, #88]	; 0x58
    pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
    pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001aba:	2308      	movs	r3, #8
 8001abc:	663b      	str	r3, [r7, #96]	; 0x60

    if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001abe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4834      	ldr	r0, [pc, #208]	; (8001b98 <PowerPWMSet+0x134>)
 8001ac8:	f003 f9e8 	bl	8004e9c <HAL_HRTIM_TimeBaseConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <PowerPWMSet+0x72>
    {
        Error_Handler();
 8001ad2:	f000 f8f7 	bl	8001cc4 <Error_Handler>
    }

    // Update the compare value
    HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8001ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
    pCompareCfg.CompareValue = compareValue;
 8001ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48

    if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001ae6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aea:	2201      	movs	r2, #1
 8001aec:	2100      	movs	r1, #0
 8001aee:	482a      	ldr	r0, [pc, #168]	; (8001b98 <PowerPWMSet+0x134>)
 8001af0:	f003 fdf2 	bl	80056d8 <HAL_HRTIM_WaveformCompareConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <PowerPWMSet+0x9a>
    {
        Error_Handler();
 8001afa:	f000 f8e3 	bl	8001cc4 <Error_Handler>
    }

    // Configure PWMH output (Set on compare, reset on period)
    HRTIM_OutputCfgTypeDef pOutputCfgH = {0};
 8001afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b02:	2220      	movs	r2, #32
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f008 ff57 	bl	800a9ba <memset>
    pOutputCfgH.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    pOutputCfgH.SetSource = HRTIM_OUTPUTSET_TIMCMP1;  // Set on compare match
 8001b10:	2308      	movs	r3, #8
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    pOutputCfgH.ResetSource = HRTIM_OUTPUTRESET_TIMPER; // Reset on period
 8001b14:	2304      	movs	r3, #4
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
    pOutputCfgH.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
    pOutputCfgH.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
    pOutputCfgH.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
    pOutputCfgH.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001b24:	2300      	movs	r3, #0
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
    pOutputCfgH.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	647b      	str	r3, [r7, #68]	; 0x44

    if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfgH) != HAL_OK)
 8001b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b30:	2201      	movs	r2, #1
 8001b32:	2100      	movs	r1, #0
 8001b34:	4818      	ldr	r0, [pc, #96]	; (8001b98 <PowerPWMSet+0x134>)
 8001b36:	f003 ff3d 	bl	80059b4 <HAL_HRTIM_WaveformOutputConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <PowerPWMSet+0xe0>
    {
        Error_Handler();
 8001b40:	f000 f8c0 	bl	8001cc4 <Error_Handler>
    }

    // Configure PWML output (Reset on compare, set on period)
    HRTIM_OutputCfgTypeDef pOutputCfgL = {0};
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f008 ff34 	bl	800a9ba <memset>
    pOutputCfgL.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
    pOutputCfgL.SetSource = HRTIM_OUTPUTSET_TIMPER;  // Set on period
 8001b56:	2304      	movs	r3, #4
 8001b58:	60fb      	str	r3, [r7, #12]
    pOutputCfgL.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1; // Reset on compare match
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	613b      	str	r3, [r7, #16]
    pOutputCfgL.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
    pOutputCfgL.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
    pOutputCfgL.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
    pOutputCfgL.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
    pOutputCfgL.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfgL) != HAL_OK)
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2202      	movs	r2, #2
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4807      	ldr	r0, [pc, #28]	; (8001b98 <PowerPWMSet+0x134>)
 8001b7c:	f003 ff1a 	bl	80059b4 <HAL_HRTIM_WaveformOutputConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <PowerPWMSet+0x126>
    {
        Error_Handler();
 8001b86:	f000 f89d 	bl	8001cc4 <Error_Handler>
    }
}
 8001b8a:	bf00      	nop
 8001b8c:	3770      	adds	r7, #112	; 0x70
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0a21fe80 	.word	0x0a21fe80
 8001b98:	2000035c 	.word	0x2000035c

08001b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba0:	f000 fb13 	bl	80021ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba4:	f000 f80f 	bl	8001bc6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba8:	f7ff fda2 	bl	80016f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bac:	f7ff fd6e 	bl	800168c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bb0:	f000 fa3e 	bl	8002030 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8001bb4:	f7ff f99e 	bl	8000ef4 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001bb8:	f7ff fde4 	bl	8001784 <MX_HRTIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001bbc:	f7ff faee 	bl	800119c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bc0:	f006 fe8c 	bl	80088dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <main+0x28>

08001bc6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b094      	sub	sp, #80	; 0x50
 8001bca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bcc:	f107 0318 	add.w	r3, r7, #24
 8001bd0:	2238      	movs	r2, #56	; 0x38
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f008 fef0 	bl	800a9ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f004 fbb5 	bl	8006358 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001c00:	2306      	movs	r3, #6
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c04:	2355      	movs	r3, #85	; 0x55
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fc51 	bl	80064c0 <HAL_RCC_OscConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001c24:	f000 f84e 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c28:	230f      	movs	r3, #15
 8001c2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4618      	mov	r0, r3
 8001c42:	f004 ff4f 	bl	8006ae4 <HAL_RCC_ClockConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c4c:	f000 f83a 	bl	8001cc4 <Error_Handler>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3750      	adds	r7, #80	; 0x50
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f001 f853 	bl	8002d0c <HAL_ADC_Stop_DMA>
	if(!adcFlag) adcFlag = 1;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <HAL_ADC_ConvCpltCallback+0x1c>
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2120      	movs	r1, #32
 8001c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c7c:	f002 ff9a 	bl	8004bb4 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc2, adcValue, 4);
 8001c80:	2204      	movs	r2, #4
 8001c82:	4905      	ldr	r1, [pc, #20]	; (8001c98 <HAL_ADC_ConvCpltCallback+0x40>)
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <HAL_ADC_ConvCpltCallback+0x44>)
 8001c86:	f000 ff6d 	bl	8002b64 <HAL_ADC_Start_DMA>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000308 	.word	0x20000308
 8001c98:	2000030c 	.word	0x2000030c
 8001c9c:	200001fc 	.word	0x200001fc

08001ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cb2:	f000 faa3 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */



  /* USER CODE END Callback 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40012c00 	.word	0x40012c00

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_MspInit+0x60>)
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cda:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <HAL_MspInit+0x60>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_MspInit+0x60>)
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_MspInit+0x60>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_MspInit+0x60>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_MspInit+0x60>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	210f      	movs	r1, #15
 8001d0a:	f06f 0001 	mvn.w	r0, #1
 8001d0e:	f002 fadb 	bl	80042c8 <HAL_NVIC_SetPriority>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8001d12:	2010      	movs	r0, #16
 8001d14:	f000 fa90 	bl	8002238 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001d18:	f000 fab6 	bl	8002288 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 fa9f 	bl	8002260 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d22:	f004 fbbd 	bl	80064a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08c      	sub	sp, #48	; 0x30
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_InitTick+0xc4>)
 8001d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <HAL_InitTick+0xc4>)
 8001d4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d4e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_InitTick+0xc4>)
 8001d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d5c:	f107 020c 	add.w	r2, r7, #12
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 f892 	bl	8006e90 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d6c:	f005 f87a 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 8001d70:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d74:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_InitTick+0xc8>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	0c9b      	lsrs	r3, r3, #18
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_InitTick+0xcc>)
 8001d82:	4a20      	ldr	r2, [pc, #128]	; (8001e04 <HAL_InitTick+0xd0>)
 8001d84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_InitTick+0xcc>)
 8001d88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d8e:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_InitTick+0xcc>)
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_InitTick+0xcc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_InitTick+0xcc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001da0:	4817      	ldr	r0, [pc, #92]	; (8001e00 <HAL_InitTick+0xcc>)
 8001da2:	f005 fb3b 	bl	800741c <HAL_TIM_Base_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d11b      	bne.n	8001dec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001db4:	4812      	ldr	r0, [pc, #72]	; (8001e00 <HAL_InitTick+0xcc>)
 8001db6:	f005 fb93 	bl	80074e0 <HAL_TIM_Base_Start_IT>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d111      	bne.n	8001dec <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dc8:	2019      	movs	r0, #25
 8001dca:	f002 fa97 	bl	80042fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d808      	bhi.n	8001de6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	2019      	movs	r0, #25
 8001dda:	f002 fa75 	bl	80042c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_InitTick+0xd4>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e002      	b.n	8001dec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3730      	adds	r7, #48	; 0x30
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	431bde83 	.word	0x431bde83
 8001e00:	20000458 	.word	0x20000458
 8001e04:	40012c00 	.word	0x40012c00
 8001e08:	2000000c 	.word	0x2000000c

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <DMA1_Channel1_IRQHandler+0x10>)
 8001e3e:	f002 fbe7 	bl	8004610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000268 	.word	0x20000268

08001e4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <ADC1_2_IRQHandler+0x10>)
 8001e52:	f000 ffbd 	bl	8002dd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200001fc 	.word	0x200001fc

08001e60 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e66:	f005 fbb3 	bl	80075d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000458 	.word	0x20000458

08001e74 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_kill>:

int _kill(int pid, int sig)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9c:	f008 fe36 	bl	800ab0c <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2216      	movs	r2, #22
 8001ea4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_exit>:

void _exit (int status)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eba:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffe7 	bl	8001e92 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec4:	e7fe      	b.n	8001ec4 <_exit+0x12>

08001ec6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e00a      	b.n	8001eee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed8:	f3af 8000 	nop.w
 8001edc:	4601      	mov	r1, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	60ba      	str	r2, [r7, #8]
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbf0      	blt.n	8001ed8 <_read+0x12>
  }

  return len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e009      	b.n	8001f26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbf1      	blt.n	8001f12 <_write+0x12>
  }
  return len;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_close>:

int _close(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f60:	605a      	str	r2, [r3, #4]
  return 0;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_isatty>:

int _isatty(int file)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f008 fd9c 	bl	800ab0c <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00000400 	.word	0x00000400
 8002004:	200004a4 	.word	0x200004a4
 8002008:	200013e0 	.word	0x200013e0

0800200c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 8002036:	4a23      	ldr	r2, [pc, #140]	; (80020c4 <MX_USART2_UART_Init+0x94>)
 8002038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 800203c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002042:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 8002056:	220c      	movs	r2, #12
 8002058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 8002062:	2200      	movs	r2, #0
 8002064:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 8002068:	2200      	movs	r2, #0
 800206a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 800206e:	2200      	movs	r2, #0
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 800207a:	f005 fd1b 	bl	8007ab4 <HAL_UART_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002084:	f7ff fe1e 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002088:	2100      	movs	r1, #0
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 800208c:	f006 fb44 	bl	8008718 <HAL_UARTEx_SetTxFifoThreshold>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002096:	f7ff fe15 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800209a:	2100      	movs	r1, #0
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 800209e:	f006 fb79 	bl	8008794 <HAL_UARTEx_SetRxFifoThreshold>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80020a8:	f7ff fe0c 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_USART2_UART_Init+0x90>)
 80020ae:	f006 fafa 	bl	80086a6 <HAL_UARTEx_DisableFifoMode>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020b8:	f7ff fe04 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200004a8 	.word	0x200004a8
 80020c4:	40004400 	.word	0x40004400

080020c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b09e      	sub	sp, #120	; 0x78
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	2254      	movs	r2, #84	; 0x54
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f008 fc66 	bl	800a9ba <memset>
  if(uartHandle->Instance==USART2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_UART_MspInit+0xa8>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d136      	bne.n	8002166 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	4618      	mov	r0, r3
 8002106:	f004 ff3b 	bl	8006f80 <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002110:	f7ff fdd8 	bl	8001cc4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_UART_MspInit+0xac>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_UART_MspInit+0xac>)
 800211a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211e:	6593      	str	r3, [r2, #88]	; 0x58
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_UART_MspInit+0xac>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_UART_MspInit+0xac>)
 800212e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002130:	4a10      	ldr	r2, [pc, #64]	; (8002174 <HAL_UART_MspInit+0xac>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_UART_MspInit+0xac>)
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002144:	230c      	movs	r3, #12
 8002146:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002154:	2307      	movs	r3, #7
 8002156:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f002 fba5 	bl	80048b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002166:	bf00      	nop
 8002168:	3778      	adds	r7, #120	; 0x78
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40004400 	.word	0x40004400
 8002174:	40021000 	.word	0x40021000

08002178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800217a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800217c:	f7ff ff46 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <LoopForever+0xe>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <LoopForever+0x16>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a6:	f008 fcb7 	bl	800ab18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021aa:	f7ff fcf7 	bl	8001b9c <main>

080021ae <LoopForever>:

LoopForever:
    b LoopForever
 80021ae:	e7fe      	b.n	80021ae <LoopForever>
  ldr   r0, =_estack
 80021b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021bc:	0800d0b4 	.word	0x0800d0b4
  ldr r2, =_sbss
 80021c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021c4:	200013e0 	.word	0x200013e0

080021c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC3_IRQHandler>

080021ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f002 f86c 	bl	80042b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021da:	200f      	movs	r0, #15
 80021dc:	f7ff fdaa 	bl	8001d34 <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	e001      	b.n	80021f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ec:	f7ff fd70 	bl	8001cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f0:	79fb      	ldrb	r3, [r7, #7]

}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x1c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_IncTick+0x20>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4413      	add	r3, r2
 800220a:	4a03      	ldr	r2, [pc, #12]	; (8002218 <HAL_IncTick+0x1c>)
 800220c:	6013      	str	r3, [r2, #0]
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	2000053c 	.word	0x2000053c
 800221c:	20000010 	.word	0x20000010

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000053c 	.word	0x2000053c

08002238 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002248:	4904      	ldr	r1, [pc, #16]	; (800225c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40010030 	.word	0x40010030

08002260 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 0202 	bic.w	r2, r3, #2
 8002270:	4904      	ldr	r1, [pc, #16]	; (8002284 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40010030 	.word	0x40010030

08002288 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800229a:	f7ff ffc1 	bl	8002220 <HAL_GetTick>
 800229e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80022a0:	e008      	b.n	80022b4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80022a2:	f7ff ffbd 	bl	8002220 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b0a      	cmp	r3, #10
 80022ae:	d901      	bls.n	80022b4 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e006      	b.n	80022c2 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40010030 	.word	0x40010030

080022d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	609a      	str	r2, [r3, #8]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3360      	adds	r3, #96	; 0x60
 800234a:	461a      	mov	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <LL_ADC_SetOffset+0x44>)
 800235a:	4013      	ands	r3, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	4313      	orrs	r3, r2
 8002368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	03fff000 	.word	0x03fff000

08002380 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3360      	adds	r3, #96	; 0x60
 800238e:	461a      	mov	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3360      	adds	r3, #96	; 0x60
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023d6:	bf00      	nop
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b087      	sub	sp, #28
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3360      	adds	r3, #96	; 0x60
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	431a      	orrs	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3360      	adds	r3, #96	; 0x60
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	615a      	str	r2, [r3, #20]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800249a:	b480      	push	{r7}
 800249c:	b087      	sub	sp, #28
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3330      	adds	r3, #48	; 0x30
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	211f      	movs	r1, #31
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	401a      	ands	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	f003 011f 	and.w	r1, r3, #31
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024e6:	bf00      	nop
 80024e8:	371c      	adds	r7, #28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3314      	adds	r3, #20
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0e5b      	lsrs	r3, r3, #25
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	0d1b      	lsrs	r3, r3, #20
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	2107      	movs	r1, #7
 8002546:	fa01 f303 	lsl.w	r3, r1, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	401a      	ands	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0d1b      	lsrs	r3, r3, #20
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	43db      	mvns	r3, r3
 800258a:	401a      	ands	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0318 	and.w	r3, r3, #24
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002594:	40d9      	lsrs	r1, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	400b      	ands	r3, r1
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	431a      	orrs	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	0007ffff 	.word	0x0007ffff

080025b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 031f 	and.w	r3, r3, #31
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6093      	str	r3, [r2, #8]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002650:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002678:	d101      	bne.n	800267e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800269c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026c8:	f043 0202 	orr.w	r2, r3, #2
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <LL_ADC_IsEnabled+0x18>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <LL_ADC_IsEnabled+0x1a>
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d101      	bne.n	800271a <LL_ADC_IsDisableOngoing+0x18>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_IsDisableOngoing+0x1a>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	f043 0204 	orr.w	r2, r3, #4
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002764:	f043 0210 	orr.w	r2, r3, #16
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d101      	bne.n	8002790 <LL_ADC_REG_IsConversionOngoing+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b2:	f043 0220 	orr.w	r2, r3, #32
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b08      	cmp	r3, #8
 80027d8:	d101      	bne.n	80027de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1a9      	b.n	8002b5a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7fe fc19 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fef1 	bl	8002614 <LL_ADC_IsDeepPowerDownEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fed7 	bl	80025f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff0c 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d115      	bne.n	800287e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fef0 	bl	800263c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800285c:	4b9c      	ldr	r3, [pc, #624]	; (8002ad0 <HAL_ADC_Init+0x2e4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	4a9c      	ldr	r2, [pc, #624]	; (8002ad4 <HAL_ADC_Init+0x2e8>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	3301      	adds	r3, #1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002870:	e002      	b.n	8002878 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b01      	subs	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f9      	bne.n	8002872 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff feee 	bl	8002664 <LL_ADC_IsInternalRegulatorEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	f043 0210 	orr.w	r2, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff62 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 80028b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f040 8142 	bne.w	8002b48 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 813e 	bne.w	8002b48 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fefb 	bl	80026dc <LL_ADC_IsEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d141      	bne.n	8002970 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f4:	d004      	beq.n	8002900 <HAL_ADC_Init+0x114>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_ADC_Init+0x2ec>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10f      	bne.n	8002920 <HAL_ADC_Init+0x134>
 8002900:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002904:	f7ff feea 	bl	80026dc <LL_ADC_IsEnabled>
 8002908:	4604      	mov	r4, r0
 800290a:	4873      	ldr	r0, [pc, #460]	; (8002ad8 <HAL_ADC_Init+0x2ec>)
 800290c:	f7ff fee6 	bl	80026dc <LL_ADC_IsEnabled>
 8002910:	4603      	mov	r3, r0
 8002912:	4323      	orrs	r3, r4
 8002914:	2b00      	cmp	r3, #0
 8002916:	bf0c      	ite	eq
 8002918:	2301      	moveq	r3, #1
 800291a:	2300      	movne	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e012      	b.n	8002946 <HAL_ADC_Init+0x15a>
 8002920:	486e      	ldr	r0, [pc, #440]	; (8002adc <HAL_ADC_Init+0x2f0>)
 8002922:	f7ff fedb 	bl	80026dc <LL_ADC_IsEnabled>
 8002926:	4604      	mov	r4, r0
 8002928:	486d      	ldr	r0, [pc, #436]	; (8002ae0 <HAL_ADC_Init+0x2f4>)
 800292a:	f7ff fed7 	bl	80026dc <LL_ADC_IsEnabled>
 800292e:	4603      	mov	r3, r0
 8002930:	431c      	orrs	r4, r3
 8002932:	486c      	ldr	r0, [pc, #432]	; (8002ae4 <HAL_ADC_Init+0x2f8>)
 8002934:	f7ff fed2 	bl	80026dc <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	4323      	orrs	r3, r4
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002952:	d004      	beq.n	800295e <HAL_ADC_Init+0x172>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <HAL_ADC_Init+0x2ec>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_ADC_Init+0x176>
 800295e:	4a62      	ldr	r2, [pc, #392]	; (8002ae8 <HAL_ADC_Init+0x2fc>)
 8002960:	e000      	b.n	8002964 <HAL_ADC_Init+0x178>
 8002962:	4a62      	ldr	r2, [pc, #392]	; (8002aec <HAL_ADC_Init+0x300>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f7ff fcb0 	bl	80022d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7f5b      	ldrb	r3, [r3, #29]
 8002974:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800297a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002980:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002986:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	045b      	lsls	r3, r3, #17
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <HAL_ADC_Init+0x304>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	430b      	orrs	r3, r1
 80029da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fee5 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 80029fc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d17f      	bne.n	8002b04 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d17c      	bne.n	8002b04 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a0e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a16:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a26:	f023 0302 	bic.w	r3, r3, #2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	69b9      	ldr	r1, [r7, #24]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6911      	ldr	r1, [r2, #16]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002a6a:	e013      	b.n	8002a94 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a90:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d12a      	bne.n	8002af4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ab4:	4311      	orrs	r1, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	611a      	str	r2, [r3, #16]
 8002ace:	e019      	b.n	8002b04 <HAL_ADC_Init+0x318>
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	053e2d63 	.word	0x053e2d63
 8002ad8:	50000100 	.word	0x50000100
 8002adc:	50000400 	.word	0x50000400
 8002ae0:	50000500 	.word	0x50000500
 8002ae4:	50000600 	.word	0x50000600
 8002ae8:	50000300 	.word	0x50000300
 8002aec:	50000700 	.word	0x50000700
 8002af0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10c      	bne.n	8002b26 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f023 010f 	bic.w	r1, r3, #15
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	1e5a      	subs	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
 8002b24:	e007      	b.n	8002b36 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 020f 	bic.w	r2, r2, #15
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b46:	e007      	b.n	8002b58 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}
 8002b62:	bf00      	nop

08002b64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_Start_DMA+0x20>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5a      	ldr	r2, [pc, #360]	; (8002ce8 <HAL_ADC_Start_DMA+0x184>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_Start_DMA+0x24>
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_ADC_Start_DMA+0x188>)
 8002b86:	e000      	b.n	8002b8a <HAL_ADC_Start_DMA+0x26>
 8002b88:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_ADC_Start_DMA+0x18c>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fd14 	bl	80025b8 <LL_ADC_GetMultimode>
 8002b90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fdee 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 809b 	bne.w	8002cda <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_Start_DMA+0x4e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e096      	b.n	8002ce0 <HAL_ADC_Start_DMA+0x17c>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4d      	ldr	r2, [pc, #308]	; (8002cf4 <HAL_ADC_Start_DMA+0x190>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d008      	beq.n	8002bd6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d002      	beq.n	8002bd6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b09      	cmp	r3, #9
 8002bd4:	d17a      	bne.n	8002ccc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f001 f874 	bl	8003cc4 <ADC_Enable>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d16d      	bne.n	8002cc2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3a      	ldr	r2, [pc, #232]	; (8002ce8 <HAL_ADC_Start_DMA+0x184>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_ADC_Start_DMA+0xb4>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3b      	ldr	r2, [pc, #236]	; (8002cf8 <HAL_ADC_Start_DMA+0x194>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d002      	beq.n	8002c14 <HAL_ADC_Start_DMA+0xb0>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	e003      	b.n	8002c1c <HAL_ADC_Start_DMA+0xb8>
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_ADC_Start_DMA+0x198>)
 8002c16:	e001      	b.n	8002c1c <HAL_ADC_Start_DMA+0xb8>
 8002c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d002      	beq.n	8002c2a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	f023 0206 	bic.w	r2, r3, #6
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60
 8002c4e:	e002      	b.n	8002c56 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5a:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <HAL_ADC_Start_DMA+0x19c>)
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <HAL_ADC_Start_DMA+0x1a0>)
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6a:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <HAL_ADC_Start_DMA+0x1a4>)
 8002c6c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	221c      	movs	r2, #28
 8002c74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0210 	orr.w	r2, r2, #16
 8002c8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3340      	adds	r3, #64	; 0x40
 8002ca8:	4619      	mov	r1, r3
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f001 fbdb 	bl	8004468 <HAL_DMA_Start_IT>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fd34 	bl	8002728 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002cc0:	e00d      	b.n	8002cde <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002cca:	e008      	b.n	8002cde <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002cd8:	e001      	b.n	8002cde <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	50000100 	.word	0x50000100
 8002cec:	50000300 	.word	0x50000300
 8002cf0:	50000700 	.word	0x50000700
 8002cf4:	50000600 	.word	0x50000600
 8002cf8:	50000500 	.word	0x50000500
 8002cfc:	50000400 	.word	0x50000400
 8002d00:	08003eaf 	.word	0x08003eaf
 8002d04:	08003f87 	.word	0x08003f87
 8002d08:	08003fa3 	.word	0x08003fa3

08002d0c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_Stop_DMA+0x16>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e051      	b.n	8002dc6 <HAL_ADC_Stop_DMA+0xba>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002d2a:	2103      	movs	r1, #3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 ff0d 	bl	8003b4c <ADC_ConversionStop>
 8002d32:	4603      	mov	r3, r0
 8002d34:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d13f      	bne.n	8002dbc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d10f      	bne.n	8002d7a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fbfd 	bl	800455e <HAL_DMA_Abort>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d005      	beq.n	8002d7a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0210 	bic.w	r2, r2, #16
 8002d88:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f001 f82d 	bl	8003df0 <ADC_Disable>
 8002d96:	4603      	mov	r3, r0
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e002      	b.n	8002da2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f001 f827 	bl	8003df0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df4:	d004      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x30>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a8e      	ldr	r2, [pc, #568]	; (8003034 <HAL_ADC_IRQHandler+0x264>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x34>
 8002e00:	4b8d      	ldr	r3, [pc, #564]	; (8003038 <HAL_ADC_IRQHandler+0x268>)
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_IRQHandler+0x36>
 8002e04:	4b8d      	ldr	r3, [pc, #564]	; (800303c <HAL_ADC_IRQHandler+0x26c>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fbd6 	bl	80025b8 <LL_ADC_GetMultimode>
 8002e0c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d017      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x78>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 f982 	bl	8004144 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2202      	movs	r2, #2
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_ADC_IRQHandler+0x8c>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8094 	beq.w	8002f90 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 808e 	beq.w	8002f90 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff faef 	bl	8002474 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d072      	beq.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a64      	ldr	r2, [pc, #400]	; (8003034 <HAL_ADC_IRQHandler+0x264>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_ADC_IRQHandler+0xea>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a65      	ldr	r2, [pc, #404]	; (8003040 <HAL_ADC_IRQHandler+0x270>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d002      	beq.n	8002eb6 <HAL_ADC_IRQHandler+0xe6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e003      	b.n	8002ebe <HAL_ADC_IRQHandler+0xee>
 8002eb6:	4b63      	ldr	r3, [pc, #396]	; (8003044 <HAL_ADC_IRQHandler+0x274>)
 8002eb8:	e001      	b.n	8002ebe <HAL_ADC_IRQHandler+0xee>
 8002eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d008      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d002      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d104      	bne.n	8002ee2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	623b      	str	r3, [r7, #32]
 8002ee0:	e014      	b.n	8002f0c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a53      	ldr	r2, [pc, #332]	; (8003034 <HAL_ADC_IRQHandler+0x264>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x130>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a53      	ldr	r2, [pc, #332]	; (8003040 <HAL_ADC_IRQHandler+0x270>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d002      	beq.n	8002efc <HAL_ADC_IRQHandler+0x12c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_IRQHandler+0x134>
 8002efc:	4b51      	ldr	r3, [pc, #324]	; (8003044 <HAL_ADC_IRQHandler+0x274>)
 8002efe:	e001      	b.n	8002f04 <HAL_ADC_IRQHandler+0x134>
 8002f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f04:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d135      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d12e      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fc25 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d11a      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 020c 	bic.w	r2, r2, #12
 8002f42:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d112      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f68:	e00b      	b.n	8002f82 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f043 0210 	orr.w	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7fe fe68 	bl	8001c58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	220c      	movs	r2, #12
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x1d4>
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80b3 	beq.w	8003116 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80ad 	beq.w	8003116 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fa8a 	bl	80024f2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002fde:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fa45 	bl	8002474 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <HAL_ADC_IRQHandler+0x264>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d009      	beq.n	800300a <HAL_ADC_IRQHandler+0x23a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_ADC_IRQHandler+0x270>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d002      	beq.n	8003006 <HAL_ADC_IRQHandler+0x236>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e003      	b.n	800300e <HAL_ADC_IRQHandler+0x23e>
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <HAL_ADC_IRQHandler+0x274>)
 8003008:	e001      	b.n	800300e <HAL_ADC_IRQHandler+0x23e>
 800300a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	4293      	cmp	r3, r2
 8003014:	d008      	beq.n	8003028 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b06      	cmp	r3, #6
 8003020:	d002      	beq.n	8003028 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b07      	cmp	r3, #7
 8003026:	d10f      	bne.n	8003048 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	e01f      	b.n	8003072 <HAL_ADC_IRQHandler+0x2a2>
 8003032:	bf00      	nop
 8003034:	50000100 	.word	0x50000100
 8003038:	50000300 	.word	0x50000300
 800303c:	50000700 	.word	0x50000700
 8003040:	50000500 	.word	0x50000500
 8003044:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a8b      	ldr	r2, [pc, #556]	; (800327c <HAL_ADC_IRQHandler+0x4ac>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_ADC_IRQHandler+0x296>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a8a      	ldr	r2, [pc, #552]	; (8003280 <HAL_ADC_IRQHandler+0x4b0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d002      	beq.n	8003062 <HAL_ADC_IRQHandler+0x292>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e003      	b.n	800306a <HAL_ADC_IRQHandler+0x29a>
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_ADC_IRQHandler+0x4b4>)
 8003064:	e001      	b.n	800306a <HAL_ADC_IRQHandler+0x29a>
 8003066:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800306a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d047      	beq.n	8003108 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_ADC_IRQHandler+0x2c2>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d03f      	beq.n	8003108 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d13a      	bne.n	8003108 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d133      	bne.n	8003108 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12e      	bne.n	8003108 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fb89 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11a      	bne.n	80030f0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030c8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d112      	bne.n	8003108 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80030ee:	e00b      	b.n	8003108 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fff3 	bl	80040f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2260      	movs	r2, #96	; 0x60
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311c:	2b00      	cmp	r3, #0
 800311e:	d011      	beq.n	8003144 <HAL_ADC_IRQHandler+0x374>
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f8b4 	bl	80032a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d012      	beq.n	8003174 <HAL_ADC_IRQHandler+0x3a4>
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 ffd9 	bl	800411c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003172:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x3d4>
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00d      	beq.n	80031a4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 ffcb 	bl	8004130 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d043      	beq.n	8003236 <HAL_ADC_IRQHandler+0x466>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d03e      	beq.n	8003236 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80031c0:	2301      	movs	r3, #1
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	e021      	b.n	800320a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d4:	d004      	beq.n	80031e0 <HAL_ADC_IRQHandler+0x410>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_ADC_IRQHandler+0x4ac>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_IRQHandler+0x414>
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <HAL_ADC_IRQHandler+0x4b8>)
 80031e2:	e000      	b.n	80031e6 <HAL_ADC_IRQHandler+0x416>
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_ADC_IRQHandler+0x4bc>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff f9f4 	bl	80025d4 <LL_ADC_GetMultiDMATransfer>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80031f2:	2301      	movs	r3, #1
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
 80031f6:	e008      	b.n	800320a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10e      	bne.n	800322e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003220:	f043 0202 	orr.w	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f845 	bl	80032b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2210      	movs	r2, #16
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d018      	beq.n	8003272 <HAL_ADC_IRQHandler+0x4a2>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d013      	beq.n	8003272 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325a:	f043 0208 	orr.w	r2, r3, #8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 ff4b 	bl	8004108 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003272:	bf00      	nop
 8003274:	3728      	adds	r7, #40	; 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	50000100 	.word	0x50000100
 8003280:	50000500 	.word	0x50000500
 8003284:	50000400 	.word	0x50000400
 8003288:	50000300 	.word	0x50000300
 800328c:	50000700 	.word	0x50000700

08003290 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b0b6      	sub	sp, #216	; 0xd8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x24>
 80032ea:	2302      	movs	r3, #2
 80032ec:	f000 bc13 	b.w	8003b16 <HAL_ADC_ConfigChannel+0x84a>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fa3b 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 83f3 	bne.w	8003af0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	f7ff f8bf 	bl	800249a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fa29 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8003326:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fa49 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8003334:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003338:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f040 81d9 	bne.w	80036f4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 81d4 	bne.w	80036f4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003354:	d10f      	bne.n	8003376 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	4619      	mov	r1, r3
 8003362:	f7ff f8d9 	bl	8002518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff f86d 	bl	800244e <LL_ADC_SetSamplingTimeCommonConfig>
 8003374:	e00e      	b.n	8003394 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6819      	ldr	r1, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	461a      	mov	r2, r3
 8003384:	f7ff f8c8 	bl	8002518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f85d 	bl	800244e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d022      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6919      	ldr	r1, [r3, #16]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033c6:	f7fe ffb7 	bl	8002338 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6919      	ldr	r1, [r3, #16]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f7ff f803 	bl	80023e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d102      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x126>
 80033ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033f0:	e000      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x128>
 80033f2:	2300      	movs	r3, #0
 80033f4:	461a      	mov	r2, r3
 80033f6:	f7ff f80f 	bl	8002418 <LL_ADC_SetOffsetSaturation>
 80033fa:	e17b      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe ffbc 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003408:	4603      	mov	r3, r0
 800340a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x15c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe ffb1 	bl	8002380 <LL_ADC_GetOffsetChannel>
 800341e:	4603      	mov	r3, r0
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	f003 021f 	and.w	r2, r3, #31
 8003426:	e01e      	b.n	8003466 <HAL_ADC_ConfigChannel+0x19a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe ffa6 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800344a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800344e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800345a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <HAL_ADC_ConfigChannel+0x1b2>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	0e9b      	lsrs	r3, r3, #26
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	e018      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x1e4>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800349a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80034a2:	2320      	movs	r3, #32
 80034a4:	e004      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80034a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d106      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe ff75 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe ff59 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x222>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2101      	movs	r1, #1
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe ff4e 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	0e9b      	lsrs	r3, r3, #26
 80034e8:	f003 021f 	and.w	r2, r3, #31
 80034ec:	e01e      	b.n	800352c <HAL_ADC_ConfigChannel+0x260>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe ff43 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800350c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003510:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e004      	b.n	800352a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x278>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	e018      	b.n	8003576 <HAL_ADC_ConfigChannel+0x2aa>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003558:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800355c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e004      	b.n	8003576 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800356c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003576:	429a      	cmp	r2, r3
 8003578:	d106      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe ff12 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2102      	movs	r1, #2
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fef6 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003594:	4603      	mov	r3, r0
 8003596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x2e8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2102      	movs	r1, #2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe feeb 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	0e9b      	lsrs	r3, r3, #26
 80035ae:	f003 021f 	and.w	r2, r3, #31
 80035b2:	e01e      	b.n	80035f2 <HAL_ADC_ConfigChannel+0x326>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fee0 	bl	8002380 <LL_ADC_GetOffsetChannel>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80035da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035e2:	2320      	movs	r3, #32
 80035e4:	e004      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_ADC_ConfigChannel+0x33e>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	e016      	b.n	8003638 <HAL_ADC_ConfigChannel+0x36c>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800361c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800361e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003622:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800362a:	2320      	movs	r3, #32
 800362c:	e004      	b.n	8003638 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800362e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003638:	429a      	cmp	r2, r3
 800363a:	d106      	bne.n	800364a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	2102      	movs	r1, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe feb1 	bl	80023ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2103      	movs	r1, #3
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fe95 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003656:	4603      	mov	r3, r0
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x3aa>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2103      	movs	r1, #3
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fe8a 	bl	8002380 <LL_ADC_GetOffsetChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	0e9b      	lsrs	r3, r3, #26
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	e017      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x3da>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2103      	movs	r1, #3
 800367c:	4618      	mov	r0, r3
 800367e:	f7fe fe7f 	bl	8002380 <LL_ADC_GetOffsetChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800368e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003690:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800369c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <HAL_ADC_ConfigChannel+0x3f2>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	0e9b      	lsrs	r3, r3, #26
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	e011      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x416>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e003      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d106      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2103      	movs	r1, #3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe fe5c 	bl	80023ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe ffef 	bl	80026dc <LL_ADC_IsEnabled>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 813d 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6819      	ldr	r1, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f7fe ff2c 	bl	8002570 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4aa2      	ldr	r2, [pc, #648]	; (80039a8 <HAL_ADC_ConfigChannel+0x6dc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	f040 812e 	bne.w	8003980 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10b      	bne.n	800374c <HAL_ADC_ConfigChannel+0x480>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	0e9b      	lsrs	r3, r3, #26
 800373a:	3301      	adds	r3, #1
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2b09      	cmp	r3, #9
 8003742:	bf94      	ite	ls
 8003744:	2301      	movls	r3, #1
 8003746:	2300      	movhi	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	e019      	b.n	8003780 <HAL_ADC_ConfigChannel+0x4b4>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003754:	fa93 f3a3 	rbit	r3, r3
 8003758:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800375a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800375e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003764:	2320      	movs	r3, #32
 8003766:	e003      	b.n	8003770 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	2b09      	cmp	r3, #9
 8003778:	bf94      	ite	ls
 800377a:	2301      	movls	r3, #1
 800377c:	2300      	movhi	r3, #0
 800377e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003780:	2b00      	cmp	r3, #0
 8003782:	d079      	beq.n	8003878 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x4d4>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	0e9b      	lsrs	r3, r3, #26
 8003796:	3301      	adds	r3, #1
 8003798:	069b      	lsls	r3, r3, #26
 800379a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800379e:	e015      	b.n	80037cc <HAL_ADC_ConfigChannel+0x500>
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037b8:	2320      	movs	r3, #32
 80037ba:	e003      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	069b      	lsls	r3, r3, #26
 80037c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x520>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	0e9b      	lsrs	r3, r3, #26
 80037de:	3301      	adds	r3, #1
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	e017      	b.n	800381c <HAL_ADC_ConfigChannel+0x550>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80037fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80037fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3301      	adds	r3, #1
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	ea42 0103 	orr.w	r1, r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x576>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	3301      	adds	r3, #1
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	051b      	lsls	r3, r3, #20
 8003840:	e018      	b.n	8003874 <HAL_ADC_ConfigChannel+0x5a8>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e003      	b.n	8003866 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003874:	430b      	orrs	r3, r1
 8003876:	e07e      	b.n	8003976 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003880:	2b00      	cmp	r3, #0
 8003882:	d107      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x5c8>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	3301      	adds	r3, #1
 800388c:	069b      	lsls	r3, r3, #26
 800388e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003892:	e015      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x5f4>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	fa93 f3a3 	rbit	r3, r3
 80038a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038ac:	2320      	movs	r3, #32
 80038ae:	e003      	b.n	80038b8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	fab3 f383 	clz	r3, r3
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	3301      	adds	r3, #1
 80038ba:	069b      	lsls	r3, r3, #26
 80038bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x614>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	0e9b      	lsrs	r3, r3, #26
 80038d2:	3301      	adds	r3, #1
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	e017      	b.n	8003910 <HAL_ADC_ConfigChannel+0x644>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	fa93 f3a3 	rbit	r3, r3
 80038ec:	61fb      	str	r3, [r7, #28]
  return result;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038f8:	2320      	movs	r3, #32
 80038fa:	e003      	b.n	8003904 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	3301      	adds	r3, #1
 8003906:	f003 031f 	and.w	r3, r3, #31
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	ea42 0103 	orr.w	r1, r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10d      	bne.n	800393c <HAL_ADC_ConfigChannel+0x670>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	0e9b      	lsrs	r3, r3, #26
 8003926:	3301      	adds	r3, #1
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	3b1e      	subs	r3, #30
 8003934:	051b      	lsls	r3, r3, #20
 8003936:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800393a:	e01b      	b.n	8003974 <HAL_ADC_ConfigChannel+0x6a8>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	613b      	str	r3, [r7, #16]
  return result;
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003954:	2320      	movs	r3, #32
 8003956:	e003      	b.n	8003960 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f003 021f 	and.w	r2, r3, #31
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	3b1e      	subs	r3, #30
 800396e:	051b      	lsls	r3, r3, #20
 8003970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003974:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397a:	4619      	mov	r1, r3
 800397c:	f7fe fdcc 	bl	8002518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_ADC_ConfigChannel+0x6e0>)
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80be 	beq.w	8003b0a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003996:	d004      	beq.n	80039a2 <HAL_ADC_ConfigChannel+0x6d6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a04      	ldr	r2, [pc, #16]	; (80039b0 <HAL_ADC_ConfigChannel+0x6e4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d10a      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x6ec>
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_ADC_ConfigChannel+0x6e8>)
 80039a4:	e009      	b.n	80039ba <HAL_ADC_ConfigChannel+0x6ee>
 80039a6:	bf00      	nop
 80039a8:	407f0000 	.word	0x407f0000
 80039ac:	80080000 	.word	0x80080000
 80039b0:	50000100 	.word	0x50000100
 80039b4:	50000300 	.word	0x50000300
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fcae 	bl	800231c <LL_ADC_GetCommonPathInternalCh>
 80039c0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a56      	ldr	r2, [pc, #344]	; (8003b24 <HAL_ADC_ConfigChannel+0x858>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x70c>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a55      	ldr	r2, [pc, #340]	; (8003b28 <HAL_ADC_ConfigChannel+0x85c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d13a      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d134      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ec:	d005      	beq.n	80039fa <HAL_ADC_ConfigChannel+0x72e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <HAL_ADC_ConfigChannel+0x860>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f040 8085 	bne.w	8003b04 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a02:	d004      	beq.n	8003a0e <HAL_ADC_ConfigChannel+0x742>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a49      	ldr	r2, [pc, #292]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x746>
 8003a0e:	4a49      	ldr	r2, [pc, #292]	; (8003b34 <HAL_ADC_ConfigChannel+0x868>)
 8003a10:	e000      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x748>
 8003a12:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 8003a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7fe fc69 	bl	80022f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a24:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_ADC_ConfigChannel+0x86c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	099b      	lsrs	r3, r3, #6
 8003a2a:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <HAL_ADC_ConfigChannel+0x870>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a3e:	e002      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f9      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a4c:	e05a      	b.n	8003b04 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3b      	ldr	r2, [pc, #236]	; (8003b40 <HAL_ADC_ConfigChannel+0x874>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d125      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d11f      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a31      	ldr	r2, [pc, #196]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d104      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x7ac>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <HAL_ADC_ConfigChannel+0x878>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d047      	beq.n	8003b08 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a80:	d004      	beq.n	8003a8c <HAL_ADC_ConfigChannel+0x7c0>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x7c4>
 8003a8c:	4a29      	ldr	r2, [pc, #164]	; (8003b34 <HAL_ADC_ConfigChannel+0x868>)
 8003a8e:	e000      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x7c6>
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 8003a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7fe fc2a 	bl	80022f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa2:	e031      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <HAL_ADC_ConfigChannel+0x87c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d12d      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d127      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADC_ConfigChannel+0x80c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a17      	ldr	r2, [pc, #92]	; (8003b30 <HAL_ADC_ConfigChannel+0x864>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x810>
 8003ad8:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <HAL_ADC_ConfigChannel+0x868>)
 8003ada:	e000      	b.n	8003ade <HAL_ADC_ConfigChannel+0x812>
 8003adc:	4a10      	ldr	r2, [pc, #64]	; (8003b20 <HAL_ADC_ConfigChannel+0x854>)
 8003ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ae2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fe fc04 	bl	80022f6 <LL_ADC_SetCommonPathInternalCh>
 8003aee:	e00c      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b02:	e002      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b04:	bf00      	nop
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	37d8      	adds	r7, #216	; 0xd8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	50000700 	.word	0x50000700
 8003b24:	c3210000 	.word	0xc3210000
 8003b28:	90c00010 	.word	0x90c00010
 8003b2c:	50000600 	.word	0x50000600
 8003b30:	50000100 	.word	0x50000100
 8003b34:	50000300 	.word	0x50000300
 8003b38:	20000008 	.word	0x20000008
 8003b3c:	053e2d63 	.word	0x053e2d63
 8003b40:	c7520000 	.word	0xc7520000
 8003b44:	50000500 	.word	0x50000500
 8003b48:	cb840000 	.word	0xcb840000

08003b4c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fe08 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8003b68:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fe29 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8003b74:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d103      	bne.n	8003b84 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8098 	beq.w	8003cb4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d02a      	beq.n	8003be8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7f5b      	ldrb	r3, [r3, #29]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d126      	bne.n	8003be8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7f1b      	ldrb	r3, [r3, #28]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d122      	bne.n	8003be8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ba6:	e014      	b.n	8003bd2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4a45      	ldr	r2, [pc, #276]	; (8003cc0 <ADC_ConversionStop+0x174>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d90d      	bls.n	8003bcc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	f043 0210 	orr.w	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e074      	b.n	8003cb6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d1e3      	bne.n	8003ba8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2240      	movs	r2, #64	; 0x40
 8003be6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d014      	beq.n	8003c18 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fdc0 	bl	8002778 <LL_ADC_REG_IsConversionOngoing>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fd7d 	bl	8002702 <LL_ADC_IsDisableOngoing>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fd9c 	bl	8002750 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d014      	beq.n	8003c48 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fdcf 	bl	80027c6 <LL_ADC_INJ_IsConversionOngoing>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fd65 	bl	8002702 <LL_ADC_IsDisableOngoing>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d104      	bne.n	8003c48 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fdab 	bl	800279e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d005      	beq.n	8003c5a <ADC_ConversionStop+0x10e>
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d105      	bne.n	8003c60 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c54:	230c      	movs	r3, #12
 8003c56:	617b      	str	r3, [r7, #20]
        break;
 8003c58:	e005      	b.n	8003c66 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	617b      	str	r3, [r7, #20]
        break;
 8003c5e:	e002      	b.n	8003c66 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c60:	2304      	movs	r3, #4
 8003c62:	617b      	str	r3, [r7, #20]
        break;
 8003c64:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c66:	f7fe fadb 	bl	8002220 <HAL_GetTick>
 8003c6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c6c:	e01b      	b.n	8003ca6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c6e:	f7fe fad7 	bl	8002220 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b05      	cmp	r3, #5
 8003c7a:	d914      	bls.n	8003ca6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	f043 0210 	orr.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e007      	b.n	8003cb6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1dc      	bne.n	8003c6e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	a33fffff 	.word	0xa33fffff

08003cc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe fd01 	bl	80026dc <LL_ADC_IsEnabled>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d176      	bne.n	8003dce <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	4b3c      	ldr	r3, [pc, #240]	; (8003dd8 <ADC_Enable+0x114>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00d      	beq.n	8003d0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	f043 0210 	orr.w	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	f043 0201 	orr.w	r2, r3, #1
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e062      	b.n	8003dd0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fcbc 	bl	800268c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d1c:	d004      	beq.n	8003d28 <ADC_Enable+0x64>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <ADC_Enable+0x118>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <ADC_Enable+0x68>
 8003d28:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <ADC_Enable+0x11c>)
 8003d2a:	e000      	b.n	8003d2e <ADC_Enable+0x6a>
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <ADC_Enable+0x120>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe faf4 	bl	800231c <LL_ADC_GetCommonPathInternalCh>
 8003d34:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d013      	beq.n	8003d66 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d3e:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <ADC_Enable+0x124>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	099b      	lsrs	r3, r3, #6
 8003d44:	4a29      	ldr	r2, [pc, #164]	; (8003dec <ADC_Enable+0x128>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	099b      	lsrs	r3, r3, #6
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d58:	e002      	b.n	8003d60 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f9      	bne.n	8003d5a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d66:	f7fe fa5b 	bl	8002220 <HAL_GetTick>
 8003d6a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d6c:	e028      	b.n	8003dc0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fcb2 	bl	80026dc <LL_ADC_IsEnabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d104      	bne.n	8003d88 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fc82 	bl	800268c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d88:	f7fe fa4a 	bl	8002220 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d914      	bls.n	8003dc0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d00d      	beq.n	8003dc0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f043 0210 	orr.w	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e007      	b.n	8003dd0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d1cf      	bne.n	8003d6e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	8000003f 	.word	0x8000003f
 8003ddc:	50000100 	.word	0x50000100
 8003de0:	50000300 	.word	0x50000300
 8003de4:	50000700 	.word	0x50000700
 8003de8:	20000008 	.word	0x20000008
 8003dec:	053e2d63 	.word	0x053e2d63

08003df0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fe fc80 	bl	8002702 <LL_ADC_IsDisableOngoing>
 8003e02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fe fc67 	bl	80026dc <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d047      	beq.n	8003ea4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d144      	bne.n	8003ea4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030d 	and.w	r3, r3, #13
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d10c      	bne.n	8003e42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fc41 	bl	80026b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2203      	movs	r2, #3
 8003e38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e3a:	f7fe f9f1 	bl	8002220 <HAL_GetTick>
 8003e3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e40:	e029      	b.n	8003e96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	f043 0210 	orr.w	r2, r3, #16
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e023      	b.n	8003ea6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e5e:	f7fe f9df 	bl	8002220 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d914      	bls.n	8003e96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00d      	beq.n	8003e96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	f043 0210 	orr.w	r2, r3, #16
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8a:	f043 0201 	orr.w	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e007      	b.n	8003ea6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1dc      	bne.n	8003e5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d14b      	bne.n	8003f60 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d021      	beq.n	8003f26 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fac4 	bl	8002474 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d032      	beq.n	8003f58 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d12b      	bne.n	8003f58 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d11f      	bne.n	8003f58 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1c:	f043 0201 	orr.w	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f24:	e018      	b.n	8003f58 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d111      	bne.n	8003f58 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7fd fe7d 	bl	8001c58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003f5e:	e00e      	b.n	8003f7e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff f9a3 	bl	80032b8 <HAL_ADC_ErrorCallback>
}
 8003f72:	e004      	b.n	8003f7e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff f97b 	bl	8003290 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	f043 0204 	orr.w	r2, r3, #4
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff f975 	bl	80032b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <LL_ADC_StartCalibration>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003fe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_IsCalibrationOnGoing>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800401c:	d101      	bne.n	8004022 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_ADCEx_Calibration_Start+0x1c>
 8004048:	2302      	movs	r3, #2
 800404a:	e04d      	b.n	80040e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fecb 	bl	8003df0 <ADC_Disable>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d136      	bne.n	80040d2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800406c:	f023 0302 	bic.w	r3, r3, #2
 8004070:	f043 0202 	orr.w	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff ffa9 	bl	8003fd6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004084:	e014      	b.n	80040b0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	3301      	adds	r3, #1
 800408a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d90d      	bls.n	80040b0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004098:	f023 0312 	bic.w	r3, r3, #18
 800409c:	f043 0210 	orr.w	r2, r3, #16
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e01b      	b.n	80040e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ffa7 	bl	8004008 <LL_ADC_IsCalibrationOnGoing>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e2      	bne.n	8004086 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	f023 0303 	bic.w	r3, r3, #3
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80040d0:	e005      	b.n	80040de <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d6:	f043 0210 	orr.w	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	0004de01 	.word	0x0004de01

080040f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004168:	4b0c      	ldr	r3, [pc, #48]	; (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004174:	4013      	ands	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418a:	4a04      	ldr	r2, [pc, #16]	; (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	60d3      	str	r3, [r2, #12]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <__NVIC_GetPriorityGrouping+0x18>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	f003 0307 	and.w	r3, r3, #7
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	db0b      	blt.n	80041e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	f003 021f 	and.w	r2, r3, #31
 80041d4:	4907      	ldr	r1, [pc, #28]	; (80041f4 <__NVIC_EnableIRQ+0x38>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2001      	movs	r0, #1
 80041de:	fa00 f202 	lsl.w	r2, r0, r2
 80041e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	e000e100 	.word	0xe000e100

080041f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	6039      	str	r1, [r7, #0]
 8004202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004208:	2b00      	cmp	r3, #0
 800420a:	db0a      	blt.n	8004222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	490c      	ldr	r1, [pc, #48]	; (8004244 <__NVIC_SetPriority+0x4c>)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	0112      	lsls	r2, r2, #4
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	440b      	add	r3, r1
 800421c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004220:	e00a      	b.n	8004238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4908      	ldr	r1, [pc, #32]	; (8004248 <__NVIC_SetPriority+0x50>)
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	3b04      	subs	r3, #4
 8004230:	0112      	lsls	r2, r2, #4
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	440b      	add	r3, r1
 8004236:	761a      	strb	r2, [r3, #24]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000e100 	.word	0xe000e100
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800424c:	b480      	push	{r7}
 800424e:	b089      	sub	sp, #36	; 0x24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f1c3 0307 	rsb	r3, r3, #7
 8004266:	2b04      	cmp	r3, #4
 8004268:	bf28      	it	cs
 800426a:	2304      	movcs	r3, #4
 800426c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	3304      	adds	r3, #4
 8004272:	2b06      	cmp	r3, #6
 8004274:	d902      	bls.n	800427c <NVIC_EncodePriority+0x30>
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	3b03      	subs	r3, #3
 800427a:	e000      	b.n	800427e <NVIC_EncodePriority+0x32>
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004280:	f04f 32ff 	mov.w	r2, #4294967295
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43da      	mvns	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	401a      	ands	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004294:	f04f 31ff 	mov.w	r1, #4294967295
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	fa01 f303 	lsl.w	r3, r1, r3
 800429e:	43d9      	mvns	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	4313      	orrs	r3, r2
         );
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3724      	adds	r7, #36	; 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ff4c 	bl	8004158 <__NVIC_SetPriorityGrouping>
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042d6:	f7ff ff63 	bl	80041a0 <__NVIC_GetPriorityGrouping>
 80042da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	6978      	ldr	r0, [r7, #20]
 80042e2:	f7ff ffb3 	bl	800424c <NVIC_EncodePriority>
 80042e6:	4602      	mov	r2, r0
 80042e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff82 	bl	80041f8 <__NVIC_SetPriority>
}
 80042f4:	bf00      	nop
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ff56 	bl	80041bc <__NVIC_EnableIRQ>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e08d      	b.n	8004446 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	4b47      	ldr	r3, [pc, #284]	; (8004450 <HAL_DMA_Init+0x138>)
 8004332:	429a      	cmp	r2, r3
 8004334:	d80f      	bhi.n	8004356 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	4b45      	ldr	r3, [pc, #276]	; (8004454 <HAL_DMA_Init+0x13c>)
 800433e:	4413      	add	r3, r2
 8004340:	4a45      	ldr	r2, [pc, #276]	; (8004458 <HAL_DMA_Init+0x140>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	009a      	lsls	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a42      	ldr	r2, [pc, #264]	; (800445c <HAL_DMA_Init+0x144>)
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
 8004354:	e00e      	b.n	8004374 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <HAL_DMA_Init+0x148>)
 800435e:	4413      	add	r3, r2
 8004360:	4a3d      	ldr	r2, [pc, #244]	; (8004458 <HAL_DMA_Init+0x140>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	009a      	lsls	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a3c      	ldr	r2, [pc, #240]	; (8004464 <HAL_DMA_Init+0x14c>)
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fa10 	bl	80047ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d4:	d102      	bne.n	80043dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d010      	beq.n	800441c <HAL_DMA_Init+0x104>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d80c      	bhi.n	800441c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fa30 	bl	8004868 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	e008      	b.n	800442e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40020407 	.word	0x40020407
 8004454:	bffdfff8 	.word	0xbffdfff8
 8004458:	cccccccd 	.word	0xcccccccd
 800445c:	40020000 	.word	0x40020000
 8004460:	bffdfbf8 	.word	0xbffdfbf8
 8004464:	40020400 	.word	0x40020400

08004468 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_DMA_Start_IT+0x20>
 8004484:	2302      	movs	r3, #2
 8004486:	e066      	b.n	8004556 <HAL_DMA_Start_IT+0xee>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d155      	bne.n	8004548 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f954 	bl	800476e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 020e 	orr.w	r2, r2, #14
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e00f      	b.n	8004500 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0204 	bic.w	r2, r2, #4
 80044ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 020a 	orr.w	r2, r2, #10
 80044fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800451c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004534:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0201 	orr.w	r2, r2, #1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e005      	b.n	8004554 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004550:	2302      	movs	r3, #2
 8004552:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d005      	beq.n	8004582 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2204      	movs	r2, #4
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e037      	b.n	80045f2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 020e 	bic.w	r2, r2, #14
 8004590:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	f003 021f 	and.w	r2, r3, #31
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	2101      	movs	r1, #1
 80045c0:	fa01 f202 	lsl.w	r2, r1, r2
 80045c4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045ce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00c      	beq.n	80045f2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80045f0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004602:	7bfb      	ldrb	r3, [r7, #15]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	2204      	movs	r2, #4
 8004632:	409a      	lsls	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d026      	beq.n	800468a <HAL_DMA_IRQHandler+0x7a>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d021      	beq.n	800468a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	d107      	bne.n	8004664 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0204 	bic.w	r2, r2, #4
 8004662:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	f003 021f 	and.w	r2, r3, #31
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	2104      	movs	r1, #4
 8004672:	fa01 f202 	lsl.w	r2, r1, r2
 8004676:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	2b00      	cmp	r3, #0
 800467e:	d071      	beq.n	8004764 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004688:	e06c      	b.n	8004764 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2202      	movs	r2, #2
 8004694:	409a      	lsls	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4013      	ands	r3, r2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d02e      	beq.n	80046fc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d029      	beq.n	80046fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 020a 	bic.w	r2, r2, #10
 80046c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f003 021f 	and.w	r2, r3, #31
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2102      	movs	r1, #2
 80046dc:	fa01 f202 	lsl.w	r2, r1, r2
 80046e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d038      	beq.n	8004764 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80046fa:	e033      	b.n	8004764 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	2208      	movs	r2, #8
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d02a      	beq.n	8004766 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d025      	beq.n	8004766 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 020e 	bic.w	r2, r2, #14
 8004728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	f003 021f 	and.w	r2, r3, #31
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f202 	lsl.w	r2, r1, r2
 800473c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004764:	bf00      	nop
 8004766:	bf00      	nop
}
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004784:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	2b00      	cmp	r3, #0
 800478c:	d004      	beq.n	8004798 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	2101      	movs	r1, #1
 80047a6:	fa01 f202 	lsl.w	r2, r1, r2
 80047aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d108      	bne.n	80047ce <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047cc:	e007      	b.n	80047de <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	60da      	str	r2, [r3, #12]
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	4b16      	ldr	r3, [pc, #88]	; (8004854 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d802      	bhi.n	8004806 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e001      	b.n	800480a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004808:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3b08      	subs	r3, #8
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004836:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2201      	movs	r2, #1
 8004840:	409a      	lsls	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40020407 	.word	0x40020407
 8004858:	40020800 	.word	0x40020800
 800485c:	40020820 	.word	0x40020820
 8004860:	cccccccd 	.word	0xcccccccd
 8004864:	40020880 	.word	0x40020880

08004868 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	b2db      	uxtb	r3, r3
 8004876:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800488a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3b01      	subs	r3, #1
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	1000823f 	.word	0x1000823f
 80048ac:	40020940 	.word	0x40020940

080048b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048be:	e15a      	b.n	8004b76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	2101      	movs	r1, #1
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	4013      	ands	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 814c 	beq.w	8004b70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d005      	beq.n	80048f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d130      	bne.n	8004952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	2203      	movs	r2, #3
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004926:	2201      	movs	r2, #1
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0201 	and.w	r2, r3, #1
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b03      	cmp	r3, #3
 800495c:	d017      	beq.n	800498e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	2203      	movs	r2, #3
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d123      	bne.n	80049e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	08da      	lsrs	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3208      	adds	r2, #8
 80049a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	220f      	movs	r2, #15
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4013      	ands	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	08da      	lsrs	r2, r3, #3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3208      	adds	r2, #8
 80049dc:	6939      	ldr	r1, [r7, #16]
 80049de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	2203      	movs	r2, #3
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 0203 	and.w	r2, r3, #3
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 80a6 	beq.w	8004b70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a24:	4b5b      	ldr	r3, [pc, #364]	; (8004b94 <HAL_GPIO_Init+0x2e4>)
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	4a5a      	ldr	r2, [pc, #360]	; (8004b94 <HAL_GPIO_Init+0x2e4>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6613      	str	r3, [r2, #96]	; 0x60
 8004a30:	4b58      	ldr	r3, [pc, #352]	; (8004b94 <HAL_GPIO_Init+0x2e4>)
 8004a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3c:	4a56      	ldr	r2, [pc, #344]	; (8004b98 <HAL_GPIO_Init+0x2e8>)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	3302      	adds	r3, #2
 8004a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	220f      	movs	r2, #15
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a66:	d01f      	beq.n	8004aa8 <HAL_GPIO_Init+0x1f8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a4c      	ldr	r2, [pc, #304]	; (8004b9c <HAL_GPIO_Init+0x2ec>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d019      	beq.n	8004aa4 <HAL_GPIO_Init+0x1f4>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a4b      	ldr	r2, [pc, #300]	; (8004ba0 <HAL_GPIO_Init+0x2f0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_GPIO_Init+0x1f0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a4a      	ldr	r2, [pc, #296]	; (8004ba4 <HAL_GPIO_Init+0x2f4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00d      	beq.n	8004a9c <HAL_GPIO_Init+0x1ec>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a49      	ldr	r2, [pc, #292]	; (8004ba8 <HAL_GPIO_Init+0x2f8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <HAL_GPIO_Init+0x1e8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a48      	ldr	r2, [pc, #288]	; (8004bac <HAL_GPIO_Init+0x2fc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_GPIO_Init+0x1e4>
 8004a90:	2305      	movs	r3, #5
 8004a92:	e00a      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004a94:	2306      	movs	r3, #6
 8004a96:	e008      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004a98:	2304      	movs	r3, #4
 8004a9a:	e006      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e004      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e002      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_GPIO_Init+0x1fa>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	f002 0203 	and.w	r2, r2, #3
 8004ab0:	0092      	lsls	r2, r2, #2
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aba:	4937      	ldr	r1, [pc, #220]	; (8004b98 <HAL_GPIO_Init+0x2e8>)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	089b      	lsrs	r3, r3, #2
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ac8:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004aec:	4a30      	ldr	r2, [pc, #192]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004af2:	4b2f      	ldr	r3, [pc, #188]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b16:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b46:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_GPIO_Init+0x300>)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	3301      	adds	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f ae9d 	bne.w	80048c0 <HAL_GPIO_Init+0x10>
  }
}
 8004b86:	bf00      	nop
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	48000400 	.word	0x48000400
 8004ba0:	48000800 	.word	0x48000800
 8004ba4:	48000c00 	.word	0x48000c00
 8004ba8:	48001000 	.word	0x48001000
 8004bac:	48001400 	.word	0x48001400
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bd0:	e002      	b.n	8004bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bd2:	887a      	ldrh	r2, [r7, #2]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0be      	b.n	8004d74 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d02e      	beq.n	8004ca0 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a4d      	ldr	r2, [pc, #308]	; (8004d7c <HAL_HRTIM_Init+0x198>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d10b      	bne.n	8004c64 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004c4c:	4b4c      	ldr	r3, [pc, #304]	; (8004d80 <HAL_HRTIM_Init+0x19c>)
 8004c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c50:	4a4b      	ldr	r2, [pc, #300]	; (8004d80 <HAL_HRTIM_Init+0x19c>)
 8004c52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c56:	6613      	str	r3, [r2, #96]	; 0x60
 8004c58:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <HAL_HRTIM_Init+0x19c>)
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c72:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c88:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7fc fe87 	bl	80019b4 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	75fb      	strb	r3, [r7, #23]
 8004cec:	e03e      	b.n	8004d6c <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004cee:	7dfa      	ldrb	r2, [r7, #23]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3318      	adds	r3, #24
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004d02:	7dfa      	ldrb	r2, [r7, #23]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	331c      	adds	r3, #28
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004d16:	7dfa      	ldrb	r2, [r7, #23]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	3320      	adds	r3, #32
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004d2a:	7dfa      	ldrb	r2, [r7, #23]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	3324      	adds	r3, #36	; 0x24
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004d3e:	7dfa      	ldrb	r2, [r7, #23]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3328      	adds	r3, #40	; 0x28
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004d52:	7dfa      	ldrb	r2, [r7, #23]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	3330      	adds	r3, #48	; 0x30
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004d6c:	7dfb      	ldrb	r3, [r7, #23]
 8004d6e:	2b06      	cmp	r3, #6
 8004d70:	d9bd      	bls.n	8004cee <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40016800 	.word	0x40016800
 8004d80:	40021000 	.word	0x40021000

08004d84 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e045      	b.n	8004e28 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d114      	bne.n	8004dde <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0202 	bic.w	r2, r2, #2
 8004dc4:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8004ddc:	e01f      	b.n	8004e1e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0202 	orr.w	r2, r2, #2
 8004dee:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8004dfa:	f023 010c 	bic.w	r1, r3, #12
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004e3e:	f7fd f9ef 	bl	8002220 <HAL_GetTick>
 8004e42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004e44:	e014      	b.n	8004e70 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4c:	d010      	beq.n	8004e70 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8004e4e:	f7fd f9e7 	bl	8002220 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d105      	bne.n	8004e70 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2207      	movs	r2, #7
 8004e68:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e011      	b.n	8004e94 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8004e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e80:	d1e1      	bne.n	8004e46 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d101      	bne.n	8004eb8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e015      	b.n	8004ee4 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b06      	cmp	r3, #6
 8004ec4:	d104      	bne.n	8004ed0 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fdfc 	bl	8005ac6 <HRTIM_MasterBase_Config>
 8004ece:	e004      	b.n	8004eda <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 fe25 	bl	8005b24 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d101      	bne.n	8004f08 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
 8004f06:	e1d7      	b.n	80052b8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e1d0      	b.n	80052b8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2202      	movs	r2, #2
 8004f22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004f2e:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8004f38:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f40:	f000 816d 	beq.w	800521e <HAL_HRTIM_ADCTriggerConfig+0x332>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4a:	f200 818d 	bhi.w	8005268 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f54:	f000 813f 	beq.w	80051d6 <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5e:	f200 8183 	bhi.w	8005268 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b80      	cmp	r3, #128	; 0x80
 8004f66:	f000 8111 	beq.w	800518c <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	f200 817b 	bhi.w	8005268 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	d84b      	bhi.n	8005010 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8174 	beq.w	8005268 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	2b1f      	cmp	r3, #31
 8004f86:	f200 816f 	bhi.w	8005268 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	0800501b 	.word	0x0800501b
 8004f94:	0800503f 	.word	0x0800503f
 8004f98:	08005269 	.word	0x08005269
 8004f9c:	08005065 	.word	0x08005065
 8004fa0:	08005269 	.word	0x08005269
 8004fa4:	08005269 	.word	0x08005269
 8004fa8:	08005269 	.word	0x08005269
 8004fac:	0800508b 	.word	0x0800508b
 8004fb0:	08005269 	.word	0x08005269
 8004fb4:	08005269 	.word	0x08005269
 8004fb8:	08005269 	.word	0x08005269
 8004fbc:	08005269 	.word	0x08005269
 8004fc0:	08005269 	.word	0x08005269
 8004fc4:	08005269 	.word	0x08005269
 8004fc8:	08005269 	.word	0x08005269
 8004fcc:	080050b1 	.word	0x080050b1
 8004fd0:	08005269 	.word	0x08005269
 8004fd4:	08005269 	.word	0x08005269
 8004fd8:	08005269 	.word	0x08005269
 8004fdc:	08005269 	.word	0x08005269
 8004fe0:	08005269 	.word	0x08005269
 8004fe4:	08005269 	.word	0x08005269
 8004fe8:	08005269 	.word	0x08005269
 8004fec:	08005269 	.word	0x08005269
 8004ff0:	08005269 	.word	0x08005269
 8004ff4:	08005269 	.word	0x08005269
 8004ff8:	08005269 	.word	0x08005269
 8004ffc:	08005269 	.word	0x08005269
 8005000:	08005269 	.word	0x08005269
 8005004:	08005269 	.word	0x08005269
 8005008:	08005269 	.word	0x08005269
 800500c:	080050f9 	.word	0x080050f9
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	f000 8095 	beq.w	8005142 <HAL_HRTIM_ADCTriggerConfig+0x256>
 8005018:	e126      	b.n	8005268 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005020:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6852      	ldr	r2, [r2, #4]
 8005038:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 800503c:	e11d      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8005044:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6852      	ldr	r2, [r2, #4]
 800505e:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8005062:	e10a      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800506a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6852      	ldr	r2, [r2, #4]
 8005084:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8005088:	e0f7      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005090:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	025b      	lsls	r3, r3, #9
 8005098:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6852      	ldr	r2, [r2, #4]
 80050aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 80050ae:	e0e4      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 0307 	bic.w	r3, r3, #7
 80050b6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0c1b      	lsrs	r3, r3, #16
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 021f 	bic.w	r2, r2, #31
 80050d8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 021f 	and.w	r2, r3, #31
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80050f6:	e0c0      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0b1b      	lsrs	r3, r3, #12
 8005106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 7278 	bic.w	r2, r2, #992	; 0x3e0
 8005120:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	015b      	lsls	r3, r3, #5
 8005132:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005140:	e09b      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005148:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800516a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	029b      	lsls	r3, r3, #10
 800517c:	f403 42f8 	and.w	r2, r3, #31744	; 0x7c00
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800518a:	e076      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005192:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80051b4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 80051d4:	e051      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80051dc:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 7278 	bic.w	r2, r2, #65011712	; 0x3e00000
 80051fc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	055b      	lsls	r3, r3, #21
 800520e:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 800521c:	e02d      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005224:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	; 0x3f8
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8005246:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	; 0x3f8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	069b      	lsls	r3, r3, #26
 8005258:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
      break;
 8005266:	e008      	b.n	800527a <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2207      	movs	r2, #7
 800526c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005278:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b07      	cmp	r3, #7
 8005284:	d101      	bne.n	800528a <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
     return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e016      	b.n	80052b8 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b0f      	cmp	r3, #15
 800528e:	d805      	bhi.n	800529c <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
   hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
 800529a:	e004      	b.n	80052a6 <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
   hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	371c      	adds	r7, #28
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             uint32_t Postscaler)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d101      	bne.n	80052e0 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
     return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
 80052de:	e135      	b.n	800554c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e12e      	b.n	800554c <HAL_HRTIM_ADCPostScalerConfig+0x288>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  switch (ADCTrigger)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	f000 80f8 	beq.w	80054f8 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800530e:	f200 8103 	bhi.w	8005518 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	f000 80de 	beq.w	80054d8 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005322:	f200 80f9 	bhi.w	8005518 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b80      	cmp	r3, #128	; 0x80
 800532a:	f000 80c5 	beq.w	80054b8 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	f200 80f1 	bhi.w	8005518 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b20      	cmp	r3, #32
 800533a:	d84b      	bhi.n	80053d4 <HAL_HRTIM_ADCPostScalerConfig+0x110>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80ea 	beq.w	8005518 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	3b01      	subs	r3, #1
 8005348:	2b1f      	cmp	r3, #31
 800534a:	f200 80e5 	bhi.w	8005518 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	080053dd 	.word	0x080053dd
 8005358:	080053fb 	.word	0x080053fb
 800535c:	08005519 	.word	0x08005519
 8005360:	0800541b 	.word	0x0800541b
 8005364:	08005519 	.word	0x08005519
 8005368:	08005519 	.word	0x08005519
 800536c:	08005519 	.word	0x08005519
 8005370:	0800543b 	.word	0x0800543b
 8005374:	08005519 	.word	0x08005519
 8005378:	08005519 	.word	0x08005519
 800537c:	08005519 	.word	0x08005519
 8005380:	08005519 	.word	0x08005519
 8005384:	08005519 	.word	0x08005519
 8005388:	08005519 	.word	0x08005519
 800538c:	08005519 	.word	0x08005519
 8005390:	0800545b 	.word	0x0800545b
 8005394:	08005519 	.word	0x08005519
 8005398:	08005519 	.word	0x08005519
 800539c:	08005519 	.word	0x08005519
 80053a0:	08005519 	.word	0x08005519
 80053a4:	08005519 	.word	0x08005519
 80053a8:	08005519 	.word	0x08005519
 80053ac:	08005519 	.word	0x08005519
 80053b0:	08005519 	.word	0x08005519
 80053b4:	08005519 	.word	0x08005519
 80053b8:	08005519 	.word	0x08005519
 80053bc:	08005519 	.word	0x08005519
 80053c0:	08005519 	.word	0x08005519
 80053c4:	08005519 	.word	0x08005519
 80053c8:	08005519 	.word	0x08005519
 80053cc:	08005519 	.word	0x08005519
 80053d0:	0800547b 	.word	0x0800547b
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d05e      	beq.n	8005498 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 80053da:	e09d      	b.n	8005518 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
  case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80053e4:	f023 011f 	bic.w	r1, r3, #31
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f003 021f 	and.w	r2, r3, #31
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 80053f8:	e097      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005402:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005418:	e087      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005422:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	031b      	lsls	r3, r3, #12
 800542a:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005438:	e077      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005442:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	049b      	lsls	r3, r3, #18
 800544a:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005458:	e067      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005462:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      break;
 8005478:	e057      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005482:	f023 011f 	bic.w	r1, r3, #31
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f003 021f 	and.w	r2, r3, #31
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005496:	e048      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80054a0:	f423 61f8 	bic.w	r1, r3, #1984	; 0x7c0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	019b      	lsls	r3, r3, #6
 80054a8:	f403 62f8 	and.w	r2, r3, #1984	; 0x7c0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80054b6:	e038      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80054c0:	f423 31f8 	bic.w	r1, r3, #126976	; 0x1f000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	031b      	lsls	r3, r3, #12
 80054c8:	f403 32f8 	and.w	r2, r3, #126976	; 0x1f000
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80054d6:	e028      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80054e0:	f423 01f8 	bic.w	r1, r3, #8126464	; 0x7c0000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	049b      	lsls	r3, r3, #18
 80054e8:	f403 02f8 	and.w	r2, r3, #8126464	; 0x7c0000
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 80054f6:	e018      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005500:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	f003 52f8 	and.w	r2, r3, #520093696	; 0x1f000000
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      break;
 8005516:	e008      	b.n	800552a <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2207      	movs	r2, #7
 800551c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 8005528:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b07      	cmp	r3, #7
 8005534:	d101      	bne.n	800553a <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
     return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e008      	b.n	800554c <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d101      	bne.n	8005574 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
 8005572:	e07a      	b.n	800566a <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800557e:	2302      	movs	r3, #2
 8005580:	e073      	b.n	800566a <HAL_HRTIM_WaveformTimerConfig+0x112>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b06      	cmp	r3, #6
 8005596:	d104      	bne.n	80055a2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fb02 	bl	8005ba4 <HRTIM_MasterWaveform_Config>
 80055a0:	e004      	b.n	80055ac <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fb9a 	bl	8005ce0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	4613      	mov	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	1a9b      	subs	r3, r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4403      	add	r3, r0
 80055be:	3320      	adds	r3, #32
 80055c0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4403      	add	r3, r0
 80055d4:	3324      	adds	r3, #36	; 0x24
 80055d6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6899      	ldr	r1, [r3, #8]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4613      	mov	r3, r2
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4403      	add	r3, r0
 80055ea:	3328      	adds	r3, #40	; 0x28
 80055ec:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68d9      	ldr	r1, [r3, #12]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4403      	add	r3, r0
 8005600:	332c      	adds	r3, #44	; 0x2c
 8005602:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6919      	ldr	r1, [r3, #16]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4613      	mov	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4403      	add	r3, r0
 8005616:	3330      	adds	r3, #48	; 0x30
 8005618:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fe2d 	bl	800627c <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b06      	cmp	r3, #6
 8005626:	d017      	beq.n	8005658 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d113      	bne.n	8005658 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	3301      	adds	r3, #1
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005646:	025b      	lsls	r3, r3, #9
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	6809      	ldr	r1, [r1, #0]
 800564c:	431a      	orrs	r2, r3
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3301      	adds	r3, #1
 8005652:	01db      	lsls	r3, r3, #7
 8005654:	440b      	add	r3, r1
 8005656:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b084      	sub	sp, #16
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
    assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
    assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
    assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
    assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

    if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d101      	bne.n	800568e <HAL_HRTIM_WaveformTimerControl+0x1c>
    {
       return HAL_BUSY;
 800568a:	2302      	movs	r3, #2
 800568c:	e020      	b.n	80056d0 <HAL_HRTIM_WaveformTimerControl+0x5e>
    }

    /* Process Locked */
    __HAL_LOCK(hhrtim);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_HRTIM_WaveformTimerControl+0x2a>
 8005698:	2302      	movs	r3, #2
 800569a:	e019      	b.n	80056d0 <HAL_HRTIM_WaveformTimerControl+0x5e>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fc9b 	bl	8005fec <HRTIM_TimingUnitWaveform_Control>

    /* Force a software update */
    HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 fddf 	bl	800627c <HRTIM_ForceRegistersUpdate>

    hhrtim->State = HAL_HRTIM_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    /* Process Unlocked */
    __HAL_UNLOCK(hhrtim);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d101      	bne.n	80056f6 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e157      	b.n	80059a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005700:	2302      	movs	r3, #2
 8005702:	e150      	b.n	80059a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b06      	cmp	r3, #6
 8005718:	d140      	bne.n	800579c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3b01      	subs	r3, #1
 800571e:	2b07      	cmp	r3, #7
 8005720:	d82a      	bhi.n	8005778 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005749 	.word	0x08005749
 800572c:	08005755 	.word	0x08005755
 8005730:	08005779 	.word	0x08005779
 8005734:	08005761 	.word	0x08005761
 8005738:	08005779 	.word	0x08005779
 800573c:	08005779 	.word	0x08005779
 8005740:	08005779 	.word	0x08005779
 8005744:	0800576d 	.word	0x0800576d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	61da      	str	r2, [r3, #28]
        break;
 8005752:	e01a      	b.n	800578a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800575e:	e014      	b.n	800578a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800576a:	e00e      	b.n	800578a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005776:	e008      	b.n	800578a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2207      	movs	r2, #7
 800577c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

        break;
 8005788:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b07      	cmp	r3, #7
 8005794:	f040 80fe 	bne.w	8005994 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e104      	b.n	80059a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3b01      	subs	r3, #1
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	f200 80e3 	bhi.w	800596c <HAL_HRTIM_WaveformCompareConfig+0x294>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057cd 	.word	0x080057cd
 80057b0:	080057e1 	.word	0x080057e1
 80057b4:	0800596d 	.word	0x0800596d
 80057b8:	0800589d 	.word	0x0800589d
 80057bc:	0800596d 	.word	0x0800596d
 80057c0:	0800596d 	.word	0x0800596d
 80057c4:	0800596d 	.word	0x0800596d
 80057c8:	080058b1 	.word	0x080058b1
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	01db      	lsls	r3, r3, #7
 80057d8:	440b      	add	r3, r1
 80057da:	339c      	adds	r3, #156	; 0x9c
 80057dc:	601a      	str	r2, [r3, #0]
        break;
 80057de:	e0d1      	b.n	8005984 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	01db      	lsls	r3, r3, #7
 80057ec:	440b      	add	r3, r1
 80057ee:	33a4      	adds	r3, #164	; 0xa4
 80057f0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03f      	beq.n	800587a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	3301      	adds	r3, #1
 8005802:	01db      	lsls	r3, r3, #7
 8005804:	4413      	add	r3, r2
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	6811      	ldr	r1, [r2, #0]
 800580c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	3301      	adds	r3, #1
 8005814:	01db      	lsls	r3, r3, #7
 8005816:	440b      	add	r3, r1
 8005818:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3301      	adds	r3, #1
 8005822:	01db      	lsls	r3, r3, #7
 8005824:	4413      	add	r3, r2
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68f9      	ldr	r1, [r7, #12]
 800582e:	6809      	ldr	r1, [r1, #0]
 8005830:	431a      	orrs	r2, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	3301      	adds	r3, #1
 8005836:	01db      	lsls	r3, r3, #7
 8005838:	440b      	add	r3, r1
 800583a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005844:	d109      	bne.n	800585a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6819      	ldr	r1, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	01db      	lsls	r3, r3, #7
 8005852:	440b      	add	r3, r1
 8005854:	339c      	adds	r3, #156	; 0x9c
 8005856:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005858:	e091      	b.n	800597e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005862:	f040 808c 	bne.w	800597e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	01db      	lsls	r3, r3, #7
 8005872:	440b      	add	r3, r1
 8005874:	33a8      	adds	r3, #168	; 0xa8
 8005876:	601a      	str	r2, [r3, #0]
         break;
 8005878:	e081      	b.n	800597e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3301      	adds	r3, #1
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	4413      	add	r3, r2
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	6811      	ldr	r1, [r2, #0]
 800588c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3301      	adds	r3, #1
 8005894:	01db      	lsls	r3, r3, #7
 8005896:	440b      	add	r3, r1
 8005898:	601a      	str	r2, [r3, #0]
         break;
 800589a:	e070      	b.n	800597e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	01db      	lsls	r3, r3, #7
 80058a8:	440b      	add	r3, r1
 80058aa:	33a8      	adds	r3, #168	; 0xa8
 80058ac:	601a      	str	r2, [r3, #0]
        break;
 80058ae:	e069      	b.n	8005984 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	01db      	lsls	r3, r3, #7
 80058bc:	440b      	add	r3, r1
 80058be:	33ac      	adds	r3, #172	; 0xac
 80058c0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d03f      	beq.n	800594a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	3301      	adds	r3, #1
 80058d2:	01db      	lsls	r3, r3, #7
 80058d4:	4413      	add	r3, r2
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	6811      	ldr	r1, [r2, #0]
 80058dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	3301      	adds	r3, #1
 80058e4:	01db      	lsls	r3, r3, #7
 80058e6:	440b      	add	r3, r1
 80058e8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	3301      	adds	r3, #1
 80058f2:	01db      	lsls	r3, r3, #7
 80058f4:	4413      	add	r3, r2
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	6809      	ldr	r1, [r1, #0]
 8005902:	431a      	orrs	r2, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	3301      	adds	r3, #1
 8005908:	01db      	lsls	r3, r3, #7
 800590a:	440b      	add	r3, r1
 800590c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005916:	d109      	bne.n	800592c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6819      	ldr	r1, [r3, #0]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	01db      	lsls	r3, r3, #7
 8005924:	440b      	add	r3, r1
 8005926:	339c      	adds	r3, #156	; 0x9c
 8005928:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800592a:	e02a      	b.n	8005982 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005934:	d125      	bne.n	8005982 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	01db      	lsls	r3, r3, #7
 8005942:	440b      	add	r3, r1
 8005944:	33a8      	adds	r3, #168	; 0xa8
 8005946:	601a      	str	r2, [r3, #0]
         break;
 8005948:	e01b      	b.n	8005982 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	3301      	adds	r3, #1
 8005952:	01db      	lsls	r3, r3, #7
 8005954:	4413      	add	r3, r2
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6811      	ldr	r1, [r2, #0]
 800595c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	3301      	adds	r3, #1
 8005964:	01db      	lsls	r3, r3, #7
 8005966:	440b      	add	r3, r1
 8005968:	601a      	str	r2, [r3, #0]
         break;
 800596a:	e00a      	b.n	8005982 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2207      	movs	r2, #7
 8005970:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

      break;
 800597c:	e002      	b.n	8005984 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005982:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b07      	cmp	r3, #7
 800598e:	d101      	bne.n	8005994 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e008      	b.n	80059a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop

080059b4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d101      	bne.n	80059d2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80059ce:	2302      	movs	r3, #2
 80059d0:	e01d      	b.n	8005a0e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80059dc:	2302      	movs	r3, #2
 80059de:	e016      	b.n	8005a0e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 fb58 	bl	80060ac <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_HRTIM_WaveformOutputStart+0x18>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e01a      	b.n	8005a64 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_HRTIM_WaveformCountStart+0x18>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e018      	b.n	8005aba <HAL_HRTIM_WaveformCountStart+0x4a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f023 0318 	bic.w	r3, r3, #24
 8005af0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	6852      	ldr	r2, [r2, #4]
 8005b16:	619a      	str	r2, [r3, #24]
}
 8005b18:	bf00      	nop
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	3301      	adds	r3, #1
 8005b38:	01db      	lsls	r3, r3, #7
 8005b3a:	4413      	add	r3, r2
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0307 	bic.w	r3, r3, #7
 8005b46:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0318 	bic.w	r3, r3, #24
 8005b58:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	01db      	lsls	r3, r3, #7
 8005b6e:	4413      	add	r3, r2
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6819      	ldr	r1, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	01db      	lsls	r3, r3, #7
 8005b80:	440b      	add	r3, r1
 8005b82:	3394      	adds	r3, #148	; 0x94
 8005b84:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	01db      	lsls	r3, r3, #7
 8005b92:	440b      	add	r3, r1
 8005b94:	3398      	adds	r3, #152	; 0x98
 8005b96:	601a      	str	r2, [r3, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0320 	bic.w	r3, r3, #32
 8005bc6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bd8:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d003      	beq.n	8005bea <HRTIM_MasterWaveform_Config+0x46>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d108      	bne.n	8005bfc <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bf0:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f043 0320 	orr.w	r3, r3, #32
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e021      	b.n	8005c40 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d108      	bne.n	8005c16 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0a:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e014      	b.n	8005c40 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d108      	bne.n	8005c30 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c24:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e007      	b.n	8005c40 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0320 	bic.w	r3, r3, #32
 8005c36:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c46:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c58:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c6a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005c7c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005c8e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ca2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb4:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b08b      	sub	sp, #44	; 0x2c
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	01db      	lsls	r3, r3, #7
 8005cf6:	4413      	add	r3, r2
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	6811      	ldr	r1, [r2, #0]
 8005cfe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3301      	adds	r3, #1
 8005d06:	01db      	lsls	r3, r3, #7
 8005d08:	440b      	add	r3, r1
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	3301      	adds	r3, #1
 8005d14:	01db      	lsls	r3, r3, #7
 8005d16:	4413      	add	r3, r2
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	01db      	lsls	r3, r3, #7
 8005d24:	4413      	add	r3, r2
 8005d26:	33e8      	adds	r3, #232	; 0xe8
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	01db      	lsls	r3, r3, #7
 8005d34:	4413      	add	r3, r2
 8005d36:	33e4      	adds	r3, #228	; 0xe4
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005d44:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	f023 0320 	bic.w	r3, r3, #32
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d54:	4313      	orrs	r3, r2
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	2b20      	cmp	r3, #32
 8005d5e:	d003      	beq.n	8005d68 <HRTIM_TimingUnitWaveform_Config+0x88>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d108      	bne.n	8005d7a <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	f043 0320 	orr.w	r3, r3, #32
 8005d76:	627b      	str	r3, [r7, #36]	; 0x24
 8005d78:	e021      	b.n	8005dbe <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d108      	bne.n	8005d94 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
 8005d92:	e014      	b.n	8005dbe <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d108      	bne.n	8005dae <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dac:	e007      	b.n	8005dbe <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	f023 0320 	bic.w	r3, r3, #32
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dde:	4313      	orrs	r3, r2
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	4313      	orrs	r3, r2
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e02:	4313      	orrs	r3, r2
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e14:	4313      	orrs	r3, r2
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e28:	d103      	bne.n	8005e32 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e40:	4313      	orrs	r3, r2
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	4313      	orrs	r3, r2
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8005e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e72:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e88:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e9a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	6a3a      	ldr	r2, [r7, #32]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eaa:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005eae:	d004      	beq.n	8005eba <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eb4:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8005eb8:	d103      	bne.n	8005ec2 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	2b40      	cmp	r3, #64	; 0x40
 8005ec0:	d108      	bne.n	8005ed4 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8005ec8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eda:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d850      	bhi.n	8005f94 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f11 	.word	0x08005f11
 8005efc:	08005f27 	.word	0x08005f27
 8005f00:	08005f3d 	.word	0x08005f3d
 8005f04:	08005f53 	.word	0x08005f53
 8005f08:	08005f69 	.word	0x08005f69
 8005f0c:	08005f7f 	.word	0x08005f7f
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f16:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61fb      	str	r3, [r7, #28]
      break;
 8005f24:	e037      	b.n	8005f96 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f2c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	61fb      	str	r3, [r7, #28]
      break;
 8005f3a:	e02c      	b.n	8005f96 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005f42:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	61fb      	str	r3, [r7, #28]
      break;
 8005f50:	e021      	b.n	8005f96 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f58:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]
      break;
 8005f66:	e016      	b.n	8005f96 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f6e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	015b      	lsls	r3, r3, #5
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61fb      	str	r3, [r7, #28]
      break;
 8005f7c:	e00b      	b.n	8005f96 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005f84:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	019b      	lsls	r3, r3, #6
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61fb      	str	r3, [r7, #28]
      break;
 8005f92:	e000      	b.n	8005f96 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8005f94:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	01db      	lsls	r3, r3, #7
 8005fa0:	4413      	add	r3, r2
 8005fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	01db      	lsls	r3, r3, #7
 8005fae:	4413      	add	r3, r2
 8005fb0:	33e8      	adds	r3, #232	; 0xe8
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	01db      	lsls	r3, r3, #7
 8005fbe:	4413      	add	r3, r2
 8005fc0:	33e4      	adds	r3, #228	; 0xe4
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	01db      	lsls	r3, r3, #7
 8005fce:	4413      	add	r3, r2
 8005fd0:	33d4      	adds	r3, #212	; 0xd4
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005fe0:	bf00      	nop
 8005fe2:	372c      	adds	r7, #44	; 0x2c
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef * pTimerCtl)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
   uint32_t hrtim_timcr2;

   /* Configure timing unit (Timer A to Timer F) */
   hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	01db      	lsls	r3, r3, #7
 8006000:	4413      	add	r3, r2
 8006002:	33ec      	adds	r3, #236	; 0xec
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	617b      	str	r3, [r7, #20]

   /* Set the UpDown counting Mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f023 0310 	bic.w	r3, r3, #16
 800600e:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

   /* Set the TrigHalf Mode : requires the counter to be disabled */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006022:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006034:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]

   /* define the compare event operating mode */
   hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006046:	617b      	str	r3, [r7, #20]
   hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

   if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d11a      	bne.n	8006090 <HRTIM_TimingUnitWaveform_Control+0xa4>
   {
      /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 0304 	bic.w	r3, r3, #4
 8006060:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

      /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0302 	bic.w	r3, r3, #2
 8006072:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]

      /* Enable the DualChannel DAC trigger */
      hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	617b      	str	r3, [r7, #20]
      hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
   }
   /* Update the HRTIM registers */
   hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	01db      	lsls	r3, r3, #7
 8006098:	4413      	add	r3, r2
 800609a:	33ec      	adds	r3, #236	; 0xec
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	601a      	str	r2, [r3, #0]

}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	01db      	lsls	r3, r3, #7
 80060c6:	4413      	add	r3, r2
 80060c8:	33e4      	adds	r3, #228	; 0xe4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	01db      	lsls	r3, r3, #7
 80060d6:	4413      	add	r3, r2
 80060d8:	33b8      	adds	r3, #184	; 0xb8
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	617b      	str	r3, [r7, #20]

  switch (Output)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e4:	d05d      	beq.n	80061a2 <HRTIM_OutputConfig+0xf6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ec:	d86e      	bhi.n	80061cc <HRTIM_OutputConfig+0x120>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f4:	d042      	beq.n	800617c <HRTIM_OutputConfig+0xd0>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fc:	d866      	bhi.n	80061cc <HRTIM_OutputConfig+0x120>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006104:	d04d      	beq.n	80061a2 <HRTIM_OutputConfig+0xf6>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610c:	d85e      	bhi.n	80061cc <HRTIM_OutputConfig+0x120>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006114:	d032      	beq.n	800617c <HRTIM_OutputConfig+0xd0>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611c:	d856      	bhi.n	80061cc <HRTIM_OutputConfig+0x120>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d03e      	beq.n	80061a2 <HRTIM_OutputConfig+0xf6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d850      	bhi.n	80061cc <HRTIM_OutputConfig+0x120>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d025      	beq.n	800617c <HRTIM_OutputConfig+0xd0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d84a      	bhi.n	80061cc <HRTIM_OutputConfig+0x120>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d01f      	beq.n	800617c <HRTIM_OutputConfig+0xd0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d044      	beq.n	80061cc <HRTIM_OutputConfig+0x120>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b20      	cmp	r3, #32
 8006146:	d841      	bhi.n	80061cc <HRTIM_OutputConfig+0x120>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d33e      	bcc.n	80061cc <HRTIM_OutputConfig+0x120>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3b02      	subs	r3, #2
 8006152:	2201      	movs	r2, #1
 8006154:	409a      	lsls	r2, r3
 8006156:	4b48      	ldr	r3, [pc, #288]	; (8006278 <HRTIM_OutputConfig+0x1cc>)
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11c      	bne.n	80061a2 <HRTIM_OutputConfig+0xf6>
 8006168:	f244 0304 	movw	r3, #16388	; 0x4004
 800616c:	4013      	ands	r3, r2
 800616e:	2b00      	cmp	r3, #0
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d027      	beq.n	80061cc <HRTIM_OutputConfig+0x120>
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
  case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	01db      	lsls	r3, r3, #7
 8006188:	440b      	add	r3, r1
 800618a:	33bc      	adds	r3, #188	; 0xbc
 800618c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6819      	ldr	r1, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	01db      	lsls	r3, r3, #7
 800619a:	440b      	add	r3, r1
 800619c:	33c0      	adds	r3, #192	; 0xc0
 800619e:	601a      	str	r2, [r3, #0]
      break;
 80061a0:	e015      	b.n	80061ce <HRTIM_OutputConfig+0x122>
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
  case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	01db      	lsls	r3, r3, #7
 80061ae:	440b      	add	r3, r1
 80061b0:	33c4      	adds	r3, #196	; 0xc4
 80061b2:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6819      	ldr	r1, [r3, #0]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	01db      	lsls	r3, r3, #7
 80061c0:	440b      	add	r3, r1
 80061c2:	33c8      	adds	r3, #200	; 0xc8
 80061c4:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80061c6:	2310      	movs	r3, #16
 80061c8:	61bb      	str	r3, [r7, #24]
      break;
 80061ca:	e000      	b.n	80061ce <HRTIM_OutputConfig+0x122>
    }

  default:
    break;
 80061cc:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80061ce:	22fe      	movs	r2, #254	; 0xfe
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	4013      	ands	r3, r2
 80061dc:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	4313      	orrs	r3, r2
 800620c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695a      	ldr	r2, [r3, #20]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	4313      	orrs	r3, r2
 800621c:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	4313      	orrs	r3, r2
 800622c:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b08      	cmp	r3, #8
 8006234:	d111      	bne.n	800625a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10c      	bne.n	800625a <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006246:	2b00      	cmp	r3, #0
 8006248:	d107      	bne.n	800625a <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	4313      	orrs	r3, r2
 8006258:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	01db      	lsls	r3, r3, #7
 8006262:	4413      	add	r3, r2
 8006264:	33e4      	adds	r3, #228	; 0xe4
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	601a      	str	r2, [r3, #0]
}
 800626a:	bf00      	nop
 800626c:	3724      	adds	r7, #36	; 0x24
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40000041 	.word	0x40000041

0800627c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b06      	cmp	r3, #6
 800628a:	d85e      	bhi.n	800634a <HRTIM_ForceRegistersUpdate+0xce>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <HRTIM_ForceRegistersUpdate+0x18>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062c7 	.word	0x080062c7
 8006298:	080062dd 	.word	0x080062dd
 800629c:	080062f3 	.word	0x080062f3
 80062a0:	08006309 	.word	0x08006309
 80062a4:	0800631f 	.word	0x0800631f
 80062a8:	08006335 	.word	0x08006335
 80062ac:	080062b1 	.word	0x080062b1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80062c4:	e042      	b.n	800634c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0202 	orr.w	r2, r2, #2
 80062d6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80062da:	e037      	b.n	800634c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0204 	orr.w	r2, r2, #4
 80062ec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80062f0:	e02c      	b.n	800634c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0208 	orr.w	r2, r2, #8
 8006302:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006306:	e021      	b.n	800634c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0210 	orr.w	r2, r2, #16
 8006318:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800631c:	e016      	b.n	800634c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0220 	orr.w	r2, r2, #32
 800632e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006332:	e00b      	b.n	800634c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006344:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006348:	e000      	b.n	800634c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 800634a:	bf00      	nop
  }
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d141      	bne.n	80063ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006366:	4b4b      	ldr	r3, [pc, #300]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006372:	d131      	bne.n	80063d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006374:	4b47      	ldr	r3, [pc, #284]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637a:	4a46      	ldr	r2, [pc, #280]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006384:	4b43      	ldr	r3, [pc, #268]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800638c:	4a41      	ldr	r2, [pc, #260]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006392:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006394:	4b40      	ldr	r3, [pc, #256]	; (8006498 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2232      	movs	r2, #50	; 0x32
 800639a:	fb02 f303 	mul.w	r3, r2, r3
 800639e:	4a3f      	ldr	r2, [pc, #252]	; (800649c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	0c9b      	lsrs	r3, r3, #18
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063aa:	e002      	b.n	80063b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063b2:	4b38      	ldr	r3, [pc, #224]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063be:	d102      	bne.n	80063c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f2      	bne.n	80063ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063c6:	4b33      	ldr	r3, [pc, #204]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d2:	d158      	bne.n	8006486 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e057      	b.n	8006488 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063d8:	4b2e      	ldr	r3, [pc, #184]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063e8:	e04d      	b.n	8006486 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f0:	d141      	bne.n	8006476 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063f2:	4b28      	ldr	r3, [pc, #160]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fe:	d131      	bne.n	8006464 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006400:	4b24      	ldr	r3, [pc, #144]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006406:	4a23      	ldr	r2, [pc, #140]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800640c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006410:	4b20      	ldr	r3, [pc, #128]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006418:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800641a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800641e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006420:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2232      	movs	r2, #50	; 0x32
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	4a1c      	ldr	r2, [pc, #112]	; (800649c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800642c:	fba2 2303 	umull	r2, r3, r2, r3
 8006430:	0c9b      	lsrs	r3, r3, #18
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006436:	e002      	b.n	800643e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3b01      	subs	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644a:	d102      	bne.n	8006452 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f2      	bne.n	8006438 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800645a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645e:	d112      	bne.n	8006486 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e011      	b.n	8006488 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006464:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646a:	4a0a      	ldr	r2, [pc, #40]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006474:	e007      	b.n	8006486 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800647e:	4a05      	ldr	r2, [pc, #20]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006484:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40007000 	.word	0x40007000
 8006498:	20000008 	.word	0x20000008
 800649c:	431bde83 	.word	0x431bde83

080064a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a04      	ldr	r2, [pc, #16]	; (80064bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ae:	6093      	str	r3, [r2, #8]
}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40007000 	.word	0x40007000

080064c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e2fe      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d075      	beq.n	80065ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064de:	4b97      	ldr	r3, [pc, #604]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 030c 	and.w	r3, r3, #12
 80064e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064e8:	4b94      	ldr	r3, [pc, #592]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b0c      	cmp	r3, #12
 80064f6:	d102      	bne.n	80064fe <HAL_RCC_OscConfig+0x3e>
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d002      	beq.n	8006504 <HAL_RCC_OscConfig+0x44>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d10b      	bne.n	800651c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006504:	4b8d      	ldr	r3, [pc, #564]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05b      	beq.n	80065c8 <HAL_RCC_OscConfig+0x108>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d157      	bne.n	80065c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e2d9      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006524:	d106      	bne.n	8006534 <HAL_RCC_OscConfig+0x74>
 8006526:	4b85      	ldr	r3, [pc, #532]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a84      	ldr	r2, [pc, #528]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e01d      	b.n	8006570 <HAL_RCC_OscConfig+0xb0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800653c:	d10c      	bne.n	8006558 <HAL_RCC_OscConfig+0x98>
 800653e:	4b7f      	ldr	r3, [pc, #508]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a7e      	ldr	r2, [pc, #504]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	4b7c      	ldr	r3, [pc, #496]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a7b      	ldr	r2, [pc, #492]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e00b      	b.n	8006570 <HAL_RCC_OscConfig+0xb0>
 8006558:	4b78      	ldr	r3, [pc, #480]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a77      	ldr	r2, [pc, #476]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800655e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	4b75      	ldr	r3, [pc, #468]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a74      	ldr	r2, [pc, #464]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800656a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800656e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d013      	beq.n	80065a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fb fe52 	bl	8002220 <HAL_GetTick>
 800657c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006580:	f7fb fe4e 	bl	8002220 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b64      	cmp	r3, #100	; 0x64
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e29e      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006592:	4b6a      	ldr	r3, [pc, #424]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0xc0>
 800659e:	e014      	b.n	80065ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fb fe3e 	bl	8002220 <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065a8:	f7fb fe3a 	bl	8002220 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b64      	cmp	r3, #100	; 0x64
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e28a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065ba:	4b60      	ldr	r3, [pc, #384]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0xe8>
 80065c6:	e000      	b.n	80065ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d075      	beq.n	80066c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d6:	4b59      	ldr	r3, [pc, #356]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065e0:	4b56      	ldr	r3, [pc, #344]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b0c      	cmp	r3, #12
 80065ee:	d102      	bne.n	80065f6 <HAL_RCC_OscConfig+0x136>
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d002      	beq.n	80065fc <HAL_RCC_OscConfig+0x13c>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d11f      	bne.n	800663c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065fc:	4b4f      	ldr	r3, [pc, #316]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <HAL_RCC_OscConfig+0x154>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e25d      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006614:	4b49      	ldr	r3, [pc, #292]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	061b      	lsls	r3, r3, #24
 8006622:	4946      	ldr	r1, [pc, #280]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006624:	4313      	orrs	r3, r2
 8006626:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006628:	4b45      	ldr	r3, [pc, #276]	; (8006740 <HAL_RCC_OscConfig+0x280>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7fb fb81 	bl	8001d34 <HAL_InitTick>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d043      	beq.n	80066c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e249      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d023      	beq.n	800668c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006644:	4b3d      	ldr	r3, [pc, #244]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a3c      	ldr	r2, [pc, #240]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800664a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fb fde6 	bl	8002220 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006658:	f7fb fde2 	bl	8002220 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e232      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800666a:	4b34      	ldr	r3, [pc, #208]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006676:	4b31      	ldr	r3, [pc, #196]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	492d      	ldr	r1, [pc, #180]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006686:	4313      	orrs	r3, r2
 8006688:	604b      	str	r3, [r1, #4]
 800668a:	e01a      	b.n	80066c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800668c:	4b2b      	ldr	r3, [pc, #172]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2a      	ldr	r2, [pc, #168]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fb fdc2 	bl	8002220 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066a0:	f7fb fdbe 	bl	8002220 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e20e      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066b2:	4b22      	ldr	r3, [pc, #136]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1f0      	bne.n	80066a0 <HAL_RCC_OscConfig+0x1e0>
 80066be:	e000      	b.n	80066c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d041      	beq.n	8006752 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01c      	beq.n	8006710 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066d6:	4b19      	ldr	r3, [pc, #100]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80066d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066dc:	4a17      	ldr	r2, [pc, #92]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e6:	f7fb fd9b 	bl	8002220 <HAL_GetTick>
 80066ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066ec:	e008      	b.n	8006700 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ee:	f7fb fd97 	bl	8002220 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d901      	bls.n	8006700 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e1e7      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006700:	4b0e      	ldr	r3, [pc, #56]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0ef      	beq.n	80066ee <HAL_RCC_OscConfig+0x22e>
 800670e:	e020      	b.n	8006752 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006716:	4a09      	ldr	r2, [pc, #36]	; (800673c <HAL_RCC_OscConfig+0x27c>)
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006720:	f7fb fd7e 	bl	8002220 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006726:	e00d      	b.n	8006744 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006728:	f7fb fd7a 	bl	8002220 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d906      	bls.n	8006744 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e1ca      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000
 8006740:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006744:	4b8c      	ldr	r3, [pc, #560]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1ea      	bne.n	8006728 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 80a6 	beq.w	80068ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006760:	2300      	movs	r3, #0
 8006762:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006764:	4b84      	ldr	r3, [pc, #528]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d101      	bne.n	8006774 <HAL_RCC_OscConfig+0x2b4>
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <HAL_RCC_OscConfig+0x2b6>
 8006774:	2300      	movs	r3, #0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677a:	4b7f      	ldr	r3, [pc, #508]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	4a7e      	ldr	r2, [pc, #504]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6593      	str	r3, [r2, #88]	; 0x58
 8006786:	4b7c      	ldr	r3, [pc, #496]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006792:	2301      	movs	r3, #1
 8006794:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006796:	4b79      	ldr	r3, [pc, #484]	; (800697c <HAL_RCC_OscConfig+0x4bc>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d118      	bne.n	80067d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067a2:	4b76      	ldr	r3, [pc, #472]	; (800697c <HAL_RCC_OscConfig+0x4bc>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a75      	ldr	r2, [pc, #468]	; (800697c <HAL_RCC_OscConfig+0x4bc>)
 80067a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ae:	f7fb fd37 	bl	8002220 <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067b6:	f7fb fd33 	bl	8002220 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e183      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067c8:	4b6c      	ldr	r3, [pc, #432]	; (800697c <HAL_RCC_OscConfig+0x4bc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0f0      	beq.n	80067b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d108      	bne.n	80067ee <HAL_RCC_OscConfig+0x32e>
 80067dc:	4b66      	ldr	r3, [pc, #408]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e2:	4a65      	ldr	r2, [pc, #404]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067ec:	e024      	b.n	8006838 <HAL_RCC_OscConfig+0x378>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d110      	bne.n	8006818 <HAL_RCC_OscConfig+0x358>
 80067f6:	4b60      	ldr	r3, [pc, #384]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fc:	4a5e      	ldr	r2, [pc, #376]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80067fe:	f043 0304 	orr.w	r3, r3, #4
 8006802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006806:	4b5c      	ldr	r3, [pc, #368]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	4a5a      	ldr	r2, [pc, #360]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 800680e:	f043 0301 	orr.w	r3, r3, #1
 8006812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006816:	e00f      	b.n	8006838 <HAL_RCC_OscConfig+0x378>
 8006818:	4b57      	ldr	r3, [pc, #348]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 800681a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681e:	4a56      	ldr	r2, [pc, #344]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006820:	f023 0301 	bic.w	r3, r3, #1
 8006824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006828:	4b53      	ldr	r3, [pc, #332]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	4a52      	ldr	r2, [pc, #328]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006830:	f023 0304 	bic.w	r3, r3, #4
 8006834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d016      	beq.n	800686e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006840:	f7fb fcee 	bl	8002220 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006846:	e00a      	b.n	800685e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006848:	f7fb fcea 	bl	8002220 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	f241 3288 	movw	r2, #5000	; 0x1388
 8006856:	4293      	cmp	r3, r2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e138      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800685e:	4b46      	ldr	r3, [pc, #280]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0ed      	beq.n	8006848 <HAL_RCC_OscConfig+0x388>
 800686c:	e015      	b.n	800689a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686e:	f7fb fcd7 	bl	8002220 <HAL_GetTick>
 8006872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006874:	e00a      	b.n	800688c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006876:	f7fb fcd3 	bl	8002220 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f241 3288 	movw	r2, #5000	; 0x1388
 8006884:	4293      	cmp	r3, r2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e121      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800688c:	4b3a      	ldr	r3, [pc, #232]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 800688e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ed      	bne.n	8006876 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800689a:	7ffb      	ldrb	r3, [r7, #31]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d105      	bne.n	80068ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80068a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a4:	4a34      	ldr	r2, [pc, #208]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80068a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d03c      	beq.n	8006932 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01c      	beq.n	80068fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068c0:	4b2d      	ldr	r3, [pc, #180]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80068c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c6:	4a2c      	ldr	r2, [pc, #176]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80068c8:	f043 0301 	orr.w	r3, r3, #1
 80068cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d0:	f7fb fca6 	bl	8002220 <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068d8:	f7fb fca2 	bl	8002220 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e0f2      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80068ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0ef      	beq.n	80068d8 <HAL_RCC_OscConfig+0x418>
 80068f8:	e01b      	b.n	8006932 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068fa:	4b1f      	ldr	r3, [pc, #124]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 80068fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006900:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006902:	f023 0301 	bic.w	r3, r3, #1
 8006906:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690a:	f7fb fc89 	bl	8002220 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006910:	e008      	b.n	8006924 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006912:	f7fb fc85 	bl	8002220 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d901      	bls.n	8006924 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e0d5      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006924:	4b14      	ldr	r3, [pc, #80]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1ef      	bne.n	8006912 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 80c9 	beq.w	8006ace <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800693c:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 030c 	and.w	r3, r3, #12
 8006944:	2b0c      	cmp	r3, #12
 8006946:	f000 8083 	beq.w	8006a50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d15e      	bne.n	8006a10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006952:	4b09      	ldr	r3, [pc, #36]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <HAL_RCC_OscConfig+0x4b8>)
 8006958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fb fc5f 	bl	8002220 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006964:	e00c      	b.n	8006980 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006966:	f7fb fc5b 	bl	8002220 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d905      	bls.n	8006980 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e0ab      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
 8006978:	40021000 	.word	0x40021000
 800697c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006980:	4b55      	ldr	r3, [pc, #340]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ec      	bne.n	8006966 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800698c:	4b52      	ldr	r3, [pc, #328]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	4b52      	ldr	r3, [pc, #328]	; (8006adc <HAL_RCC_OscConfig+0x61c>)
 8006992:	4013      	ands	r3, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6a11      	ldr	r1, [r2, #32]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800699c:	3a01      	subs	r2, #1
 800699e:	0112      	lsls	r2, r2, #4
 80069a0:	4311      	orrs	r1, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80069a6:	0212      	lsls	r2, r2, #8
 80069a8:	4311      	orrs	r1, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069ae:	0852      	lsrs	r2, r2, #1
 80069b0:	3a01      	subs	r2, #1
 80069b2:	0552      	lsls	r2, r2, #21
 80069b4:	4311      	orrs	r1, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069ba:	0852      	lsrs	r2, r2, #1
 80069bc:	3a01      	subs	r2, #1
 80069be:	0652      	lsls	r2, r2, #25
 80069c0:	4311      	orrs	r1, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069c6:	06d2      	lsls	r2, r2, #27
 80069c8:	430a      	orrs	r2, r1
 80069ca:	4943      	ldr	r1, [pc, #268]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d0:	4b41      	ldr	r3, [pc, #260]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 80069d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069dc:	4b3e      	ldr	r3, [pc, #248]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4a3d      	ldr	r2, [pc, #244]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 80069e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fb fc1a 	bl	8002220 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f0:	f7fb fc16 	bl	8002220 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e066      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a02:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x530>
 8006a0e:	e05e      	b.n	8006ace <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a10:	4b31      	ldr	r3, [pc, #196]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a30      	ldr	r2, [pc, #192]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1c:	f7fb fc00 	bl	8002220 <HAL_GetTick>
 8006a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a24:	f7fb fbfc 	bl	8002220 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e04c      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a36:	4b28      	ldr	r3, [pc, #160]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f0      	bne.n	8006a24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a42:	4b25      	ldr	r3, [pc, #148]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	4924      	ldr	r1, [pc, #144]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <HAL_RCC_OscConfig+0x620>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	60cb      	str	r3, [r1, #12]
 8006a4e:	e03e      	b.n	8006ace <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e039      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_RCC_OscConfig+0x618>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 0203 	and.w	r2, r3, #3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d12c      	bne.n	8006aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d123      	bne.n	8006aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d11b      	bne.n	8006aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d113      	bne.n	8006aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d109      	bne.n	8006aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d001      	beq.n	8006ace <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	019f800c 	.word	0x019f800c
 8006ae0:	feeefffc 	.word	0xfeeefffc

08006ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e11e      	b.n	8006d3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006afc:	4b91      	ldr	r3, [pc, #580]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d910      	bls.n	8006b2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b8e      	ldr	r3, [pc, #568]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 020f 	bic.w	r2, r3, #15
 8006b12:	498c      	ldr	r1, [pc, #560]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b8a      	ldr	r3, [pc, #552]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e106      	b.n	8006d3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d073      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	2b03      	cmp	r3, #3
 8006b3e:	d129      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b40:	4b81      	ldr	r3, [pc, #516]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0f4      	b.n	8006d3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b50:	f000 f9d0 	bl	8006ef4 <RCC_GetSysClockFreqFromPLLSource>
 8006b54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	4a7c      	ldr	r2, [pc, #496]	; (8006d4c <HAL_RCC_ClockConfig+0x268>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d93f      	bls.n	8006bde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b5e:	4b7a      	ldr	r3, [pc, #488]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d033      	beq.n	8006bde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d12f      	bne.n	8006bde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b7e:	4b72      	ldr	r3, [pc, #456]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b86:	4a70      	ldr	r2, [pc, #448]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b8e:	2380      	movs	r3, #128	; 0x80
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e024      	b.n	8006bde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d107      	bne.n	8006bac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b9c:	4b6a      	ldr	r3, [pc, #424]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0c6      	b.n	8006d3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bac:	4b66      	ldr	r3, [pc, #408]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0be      	b.n	8006d3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bbc:	f000 f8ce 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4a61      	ldr	r2, [pc, #388]	; (8006d4c <HAL_RCC_ClockConfig+0x268>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d909      	bls.n	8006bde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bca:	4b5f      	ldr	r3, [pc, #380]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd2:	4a5d      	ldr	r2, [pc, #372]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bda:	2380      	movs	r3, #128	; 0x80
 8006bdc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bde:	4b5a      	ldr	r3, [pc, #360]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f023 0203 	bic.w	r2, r3, #3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	4957      	ldr	r1, [pc, #348]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf0:	f7fb fb16 	bl	8002220 <HAL_GetTick>
 8006bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf6:	e00a      	b.n	8006c0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf8:	f7fb fb12 	bl	8002220 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e095      	b.n	8006d3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0e:	4b4e      	ldr	r3, [pc, #312]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 020c 	and.w	r2, r3, #12
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d1eb      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d023      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c38:	4b43      	ldr	r3, [pc, #268]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	4a42      	ldr	r2, [pc, #264]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c50:	4b3d      	ldr	r3, [pc, #244]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c58:	4a3b      	ldr	r2, [pc, #236]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c60:	4b39      	ldr	r3, [pc, #228]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4936      	ldr	r1, [pc, #216]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2b80      	cmp	r3, #128	; 0x80
 8006c78:	d105      	bne.n	8006c86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c7a:	4b33      	ldr	r3, [pc, #204]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	4a32      	ldr	r2, [pc, #200]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c86:	4b2f      	ldr	r3, [pc, #188]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d21d      	bcs.n	8006cd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c94:	4b2b      	ldr	r3, [pc, #172]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f023 020f 	bic.w	r2, r3, #15
 8006c9c:	4929      	ldr	r1, [pc, #164]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ca4:	f7fb fabc 	bl	8002220 <HAL_GetTick>
 8006ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cac:	f7fb fab8 	bl	8002220 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e03b      	b.n	8006d3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc2:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d1ed      	bne.n	8006cac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cdc:	4b1a      	ldr	r3, [pc, #104]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4917      	ldr	r1, [pc, #92]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cfa:	4b13      	ldr	r3, [pc, #76]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	490f      	ldr	r1, [pc, #60]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d0e:	f000 f825 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 8006d12:	4602      	mov	r2, r0
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <HAL_RCC_ClockConfig+0x264>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	490c      	ldr	r1, [pc, #48]	; (8006d50 <HAL_RCC_ClockConfig+0x26c>)
 8006d20:	5ccb      	ldrb	r3, [r1, r3]
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <HAL_RCC_ClockConfig+0x270>)
 8006d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <HAL_RCC_ClockConfig+0x274>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fa fffe 	bl	8001d34 <HAL_InitTick>
 8006d38:	4603      	mov	r3, r0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40022000 	.word	0x40022000
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	04c4b400 	.word	0x04c4b400
 8006d50:	0800ccf0 	.word	0x0800ccf0
 8006d54:	20000008 	.word	0x20000008
 8006d58:	2000000c 	.word	0x2000000c

08006d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d62:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 030c 	and.w	r3, r3, #12
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d102      	bne.n	8006d74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d6e:	4b2a      	ldr	r3, [pc, #168]	; (8006e18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	e047      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 030c 	and.w	r3, r3, #12
 8006d7c:	2b08      	cmp	r3, #8
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d80:	4b26      	ldr	r3, [pc, #152]	; (8006e1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	e03e      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d86:	4b23      	ldr	r3, [pc, #140]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
 8006d8e:	2b0c      	cmp	r3, #12
 8006d90:	d136      	bne.n	8006e00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d92:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	3301      	adds	r3, #1
 8006da8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d10c      	bne.n	8006dca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006db0:	4a1a      	ldr	r2, [pc, #104]	; (8006e1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dba:	68d2      	ldr	r2, [r2, #12]
 8006dbc:	0a12      	lsrs	r2, r2, #8
 8006dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	617b      	str	r3, [r7, #20]
      break;
 8006dc8:	e00c      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dca:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dd4:	68d2      	ldr	r2, [r2, #12]
 8006dd6:	0a12      	lsrs	r2, r2, #8
 8006dd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006ddc:	fb02 f303 	mul.w	r3, r2, r3
 8006de0:	617b      	str	r3, [r7, #20]
      break;
 8006de2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	0e5b      	lsrs	r3, r3, #25
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	3301      	adds	r3, #1
 8006df0:	005b      	lsls	r3, r3, #1
 8006df2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	e001      	b.n	8006e04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e04:	693b      	ldr	r3, [r7, #16]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40021000 	.word	0x40021000
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	016e3600 	.word	0x016e3600

08006e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e24:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000008 	.word	0x20000008

08006e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e3c:	f7ff fff0 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	4904      	ldr	r1, [pc, #16]	; (8006e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e4e:	5ccb      	ldrb	r3, [r1, r3]
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	0800cd00 	.word	0x0800cd00

08006e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e68:	f7ff ffda 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	0adb      	lsrs	r3, r3, #11
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4904      	ldr	r1, [pc, #16]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	0800cd00 	.word	0x0800cd00

08006e90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	220f      	movs	r2, #15
 8006e9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <HAL_RCC_GetClockConfig+0x5c>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 0203 	and.w	r2, r3, #3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <HAL_RCC_GetClockConfig+0x5c>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <HAL_RCC_GetClockConfig+0x5c>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8006ec4:	4b09      	ldr	r3, [pc, #36]	; (8006eec <HAL_RCC_GetClockConfig+0x5c>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	08db      	lsrs	r3, r3, #3
 8006eca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006ed2:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <HAL_RCC_GetClockConfig+0x60>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 020f 	and.w	r2, r3, #15
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	601a      	str	r2, [r3, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	40022000 	.word	0x40022000

08006ef4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006efa:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f04:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d10c      	bne.n	8006f32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f18:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f20:	4a14      	ldr	r2, [pc, #80]	; (8006f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f22:	68d2      	ldr	r2, [r2, #12]
 8006f24:	0a12      	lsrs	r2, r2, #8
 8006f26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
 8006f2e:	617b      	str	r3, [r7, #20]
    break;
 8006f30:	e00c      	b.n	8006f4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f32:	4a12      	ldr	r2, [pc, #72]	; (8006f7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3a:	4a0e      	ldr	r2, [pc, #56]	; (8006f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f3c:	68d2      	ldr	r2, [r2, #12]
 8006f3e:	0a12      	lsrs	r2, r2, #8
 8006f40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
 8006f48:	617b      	str	r3, [r7, #20]
    break;
 8006f4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f4c:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	0e5b      	lsrs	r3, r3, #25
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	3301      	adds	r3, #1
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f66:	687b      	ldr	r3, [r7, #4]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	40021000 	.word	0x40021000
 8006f78:	016e3600 	.word	0x016e3600
 8006f7c:	00f42400 	.word	0x00f42400

08006f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f88:	2300      	movs	r3, #0
 8006f8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8098 	beq.w	80070ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa2:	4b43      	ldr	r3, [pc, #268]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10d      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fae:	4b40      	ldr	r3, [pc, #256]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	4a3f      	ldr	r2, [pc, #252]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8006fba:	4b3d      	ldr	r3, [pc, #244]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fca:	4b3a      	ldr	r3, [pc, #232]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a39      	ldr	r2, [pc, #228]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fd6:	f7fb f923 	bl	8002220 <HAL_GetTick>
 8006fda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fdc:	e009      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fde:	f7fb f91f 	bl	8002220 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d902      	bls.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	74fb      	strb	r3, [r7, #19]
        break;
 8006ff0:	e005      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ff2:	4b30      	ldr	r3, [pc, #192]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0ef      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ffe:	7cfb      	ldrb	r3, [r7, #19]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d159      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007004:	4b2a      	ldr	r3, [pc, #168]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800700e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d01e      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	429a      	cmp	r2, r3
 800701e:	d019      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007020:	4b23      	ldr	r3, [pc, #140]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800702c:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007032:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800703c:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800703e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007042:	4a1b      	ldr	r2, [pc, #108]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800704c:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d016      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705e:	f7fb f8df 	bl	8002220 <HAL_GetTick>
 8007062:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007064:	e00b      	b.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007066:	f7fb f8db 	bl	8002220 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f241 3288 	movw	r2, #5000	; 0x1388
 8007074:	4293      	cmp	r3, r2
 8007076:	d902      	bls.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	74fb      	strb	r3, [r7, #19]
            break;
 800707c:	e006      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0ec      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800708c:	7cfb      	ldrb	r3, [r7, #19]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a0:	4903      	ldr	r1, [pc, #12]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80070a8:	e008      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070aa:	7cfb      	ldrb	r3, [r7, #19]
 80070ac:	74bb      	strb	r3, [r7, #18]
 80070ae:	e005      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070b0:	40021000 	.word	0x40021000
 80070b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070bc:	7c7b      	ldrb	r3, [r7, #17]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d105      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070c2:	4ba7      	ldr	r3, [pc, #668]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	4aa6      	ldr	r2, [pc, #664]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070da:	4ba1      	ldr	r3, [pc, #644]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	f023 0203 	bic.w	r2, r3, #3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	499d      	ldr	r1, [pc, #628]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070fc:	4b98      	ldr	r3, [pc, #608]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007102:	f023 020c 	bic.w	r2, r3, #12
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	4995      	ldr	r1, [pc, #596]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800711e:	4b90      	ldr	r3, [pc, #576]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007124:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	498c      	ldr	r1, [pc, #560]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007140:	4b87      	ldr	r3, [pc, #540]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	4984      	ldr	r1, [pc, #528]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007162:	4b7f      	ldr	r3, [pc, #508]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	497b      	ldr	r1, [pc, #492]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007184:	4b76      	ldr	r3, [pc, #472]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	4973      	ldr	r1, [pc, #460]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071a6:	4b6e      	ldr	r3, [pc, #440]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	496a      	ldr	r1, [pc, #424]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071c8:	4b65      	ldr	r3, [pc, #404]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	4962      	ldr	r1, [pc, #392]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071ea:	4b5d      	ldr	r3, [pc, #372]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	4959      	ldr	r1, [pc, #356]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800720c:	4b54      	ldr	r3, [pc, #336]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007212:	f023 0203 	bic.w	r2, r3, #3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	4951      	ldr	r1, [pc, #324]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721c:	4313      	orrs	r3, r2
 800721e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800722e:	4b4c      	ldr	r3, [pc, #304]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007234:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	4948      	ldr	r1, [pc, #288]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800724c:	2b00      	cmp	r3, #0
 800724e:	d015      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007250:	4b43      	ldr	r3, [pc, #268]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007256:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	4940      	ldr	r1, [pc, #256]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007260:	4313      	orrs	r3, r2
 8007262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800726e:	d105      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007270:	4b3b      	ldr	r3, [pc, #236]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	4a3a      	ldr	r2, [pc, #232]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800727a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007284:	2b00      	cmp	r3, #0
 8007286:	d015      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007288:	4b35      	ldr	r3, [pc, #212]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	4932      	ldr	r1, [pc, #200]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007298:	4313      	orrs	r3, r2
 800729a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072a6:	d105      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072a8:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072b2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d015      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072c0:	4b27      	ldr	r3, [pc, #156]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	4924      	ldr	r1, [pc, #144]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072de:	d105      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072e0:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d015      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072f8:	4b19      	ldr	r3, [pc, #100]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	4916      	ldr	r1, [pc, #88]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007316:	d105      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007318:	4b11      	ldr	r3, [pc, #68]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	4a10      	ldr	r2, [pc, #64]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007322:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d019      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007330:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007336:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	4908      	ldr	r1, [pc, #32]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007340:	4313      	orrs	r3, r2
 8007342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800734e:	d109      	bne.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4a02      	ldr	r2, [pc, #8]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800735a:	60d3      	str	r3, [r2, #12]
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800735e:	bf00      	nop
 8007360:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d015      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007370:	4b29      	ldr	r3, [pc, #164]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	4926      	ldr	r1, [pc, #152]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800738e:	d105      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007390:	4b21      	ldr	r3, [pc, #132]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4a20      	ldr	r2, [pc, #128]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80073a8:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b6:	4918      	ldr	r1, [pc, #96]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d105      	bne.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073c8:	4b13      	ldr	r3, [pc, #76]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	4a12      	ldr	r2, [pc, #72]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d015      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073e0:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ee:	490a      	ldr	r1, [pc, #40]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073fe:	d105      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4a04      	ldr	r2, [pc, #16]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800740a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800740c:	7cbb      	ldrb	r3, [r7, #18]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	40021000 	.word	0x40021000

0800741c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e049      	b.n	80074c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f841 	bl	80074ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f000 fa30 	bl	80078c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d001      	beq.n	80074f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e054      	b.n	80075a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a26      	ldr	r2, [pc, #152]	; (80075b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d022      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007522:	d01d      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a22      	ldr	r2, [pc, #136]	; (80075b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d018      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a21      	ldr	r2, [pc, #132]	; (80075b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1f      	ldr	r2, [pc, #124]	; (80075bc <HAL_TIM_Base_Start_IT+0xdc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00e      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1e      	ldr	r2, [pc, #120]	; (80075c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d009      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <HAL_TIM_Base_Start_IT+0x80>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1b      	ldr	r2, [pc, #108]	; (80075c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d115      	bne.n	800758c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	4b19      	ldr	r3, [pc, #100]	; (80075cc <HAL_TIM_Base_Start_IT+0xec>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b06      	cmp	r3, #6
 8007570:	d015      	beq.n	800759e <HAL_TIM_Base_Start_IT+0xbe>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007578:	d011      	beq.n	800759e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f042 0201 	orr.w	r2, r2, #1
 8007588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758a:	e008      	b.n	800759e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0201 	orr.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e000      	b.n	80075a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40013400 	.word	0x40013400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40015000 	.word	0x40015000
 80075cc:	00010007 	.word	0x00010007

080075d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d020      	beq.n	8007634 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01b      	beq.n	8007634 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f06f 0202 	mvn.w	r2, #2
 8007604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f931 	bl	8007882 <HAL_TIM_IC_CaptureCallback>
 8007620:	e005      	b.n	800762e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f923 	bl	800786e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f934 	bl	8007896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d020      	beq.n	8007680 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01b      	beq.n	8007680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0204 	mvn.w	r2, #4
 8007650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f90b 	bl	8007882 <HAL_TIM_IC_CaptureCallback>
 800766c:	e005      	b.n	800767a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f8fd 	bl	800786e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f90e 	bl	8007896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d020      	beq.n	80076cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d01b      	beq.n	80076cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0208 	mvn.w	r2, #8
 800769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2204      	movs	r2, #4
 80076a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f8e5 	bl	8007882 <HAL_TIM_IC_CaptureCallback>
 80076b8:	e005      	b.n	80076c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8d7 	bl	800786e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f8e8 	bl	8007896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d020      	beq.n	8007718 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 0310 	and.w	r3, r3, #16
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01b      	beq.n	8007718 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0210 	mvn.w	r2, #16
 80076e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2208      	movs	r2, #8
 80076ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f8bf 	bl	8007882 <HAL_TIM_IC_CaptureCallback>
 8007704:	e005      	b.n	8007712 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8b1 	bl	800786e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f8c2 	bl	8007896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00c      	beq.n	800773c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0201 	mvn.w	r2, #1
 8007734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fa fab2 	bl	8001ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007742:	2b00      	cmp	r3, #0
 8007744:	d104      	bne.n	8007750 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00c      	beq.n	800776a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f969 	bl	8007a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f961 	bl	8007a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f87c 	bl	80078aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f003 0320 	and.w	r3, r3, #32
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00c      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d007      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f06f 0220 	mvn.w	r2, #32
 80077ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f929 	bl	8007a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00c      	beq.n	80077fa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80077f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f935 	bl	8007a64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00c      	beq.n	800781e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f92d 	bl	8007a78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00c      	beq.n	8007842 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800783a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f925 	bl	8007a8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00c      	beq.n	8007866 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800785e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f91d 	bl	8007aa0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800788a:	bf00      	nop
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007896:	b480      	push	{r7}
 8007898:	b083      	sub	sp, #12
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a4c      	ldr	r2, [pc, #304]	; (8007a04 <TIM_Base_SetConfig+0x144>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d017      	beq.n	8007908 <TIM_Base_SetConfig+0x48>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078de:	d013      	beq.n	8007908 <TIM_Base_SetConfig+0x48>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a49      	ldr	r2, [pc, #292]	; (8007a08 <TIM_Base_SetConfig+0x148>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0x48>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a48      	ldr	r2, [pc, #288]	; (8007a0c <TIM_Base_SetConfig+0x14c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0x48>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a47      	ldr	r2, [pc, #284]	; (8007a10 <TIM_Base_SetConfig+0x150>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0x48>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a46      	ldr	r2, [pc, #280]	; (8007a14 <TIM_Base_SetConfig+0x154>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0x48>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a45      	ldr	r2, [pc, #276]	; (8007a18 <TIM_Base_SetConfig+0x158>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d108      	bne.n	800791a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a39      	ldr	r2, [pc, #228]	; (8007a04 <TIM_Base_SetConfig+0x144>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d023      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007928:	d01f      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a36      	ldr	r2, [pc, #216]	; (8007a08 <TIM_Base_SetConfig+0x148>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d01b      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a35      	ldr	r2, [pc, #212]	; (8007a0c <TIM_Base_SetConfig+0x14c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d017      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a34      	ldr	r2, [pc, #208]	; (8007a10 <TIM_Base_SetConfig+0x150>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a33      	ldr	r2, [pc, #204]	; (8007a14 <TIM_Base_SetConfig+0x154>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d00f      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a33      	ldr	r2, [pc, #204]	; (8007a1c <TIM_Base_SetConfig+0x15c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00b      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a32      	ldr	r2, [pc, #200]	; (8007a20 <TIM_Base_SetConfig+0x160>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a31      	ldr	r2, [pc, #196]	; (8007a24 <TIM_Base_SetConfig+0x164>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d003      	beq.n	800796a <TIM_Base_SetConfig+0xaa>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2c      	ldr	r2, [pc, #176]	; (8007a18 <TIM_Base_SetConfig+0x158>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d108      	bne.n	800797c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <TIM_Base_SetConfig+0x144>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d013      	beq.n	80079d0 <TIM_Base_SetConfig+0x110>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <TIM_Base_SetConfig+0x154>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00f      	beq.n	80079d0 <TIM_Base_SetConfig+0x110>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a1a      	ldr	r2, [pc, #104]	; (8007a1c <TIM_Base_SetConfig+0x15c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00b      	beq.n	80079d0 <TIM_Base_SetConfig+0x110>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a19      	ldr	r2, [pc, #100]	; (8007a20 <TIM_Base_SetConfig+0x160>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d007      	beq.n	80079d0 <TIM_Base_SetConfig+0x110>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a18      	ldr	r2, [pc, #96]	; (8007a24 <TIM_Base_SetConfig+0x164>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d003      	beq.n	80079d0 <TIM_Base_SetConfig+0x110>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a13      	ldr	r2, [pc, #76]	; (8007a18 <TIM_Base_SetConfig+0x158>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d103      	bne.n	80079d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d105      	bne.n	80079f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	f023 0201 	bic.w	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	611a      	str	r2, [r3, #16]
  }
}
 80079f6:	bf00      	nop
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40012c00 	.word	0x40012c00
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40013400 	.word	0x40013400
 8007a18:	40015000 	.word	0x40015000
 8007a1c:	40014000 	.word	0x40014000
 8007a20:	40014400 	.word	0x40014400
 8007a24:	40014800 	.word	0x40014800

08007a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e042      	b.n	8007b4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d106      	bne.n	8007ade <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7fa faf5 	bl	80020c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2224      	movs	r2, #36	; 0x24
 8007ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0201 	bic.w	r2, r2, #1
 8007af4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fbb2 	bl	8008268 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f8b3 	bl	8007c70 <UART_SetConfig>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e01b      	b.n	8007b4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f042 0201 	orr.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fc31 	bl	80083ac <UART_CheckIdleState>
 8007b4a:	4603      	mov	r3, r0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	; 0x28
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	4613      	mov	r3, r2
 8007b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d17b      	bne.n	8007c66 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <HAL_UART_Transmit+0x26>
 8007b74:	88fb      	ldrh	r3, [r7, #6]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e074      	b.n	8007c68 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2221      	movs	r2, #33	; 0x21
 8007b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b8e:	f7fa fb47 	bl	8002220 <HAL_GetTick>
 8007b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	88fa      	ldrh	r2, [r7, #6]
 8007b98:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	88fa      	ldrh	r2, [r7, #6]
 8007ba0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bac:	d108      	bne.n	8007bc0 <HAL_UART_Transmit+0x6c>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	e003      	b.n	8007bc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bc8:	e030      	b.n	8007c2c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fc93 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d005      	beq.n	8007bec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e03d      	b.n	8007c68 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	3302      	adds	r3, #2
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e007      	b.n	8007c1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3301      	adds	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1c8      	bne.n	8007bca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2140      	movs	r1, #64	; 0x40
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 fc5c 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e006      	b.n	8007c68 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e000      	b.n	8007c68 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007c66:	2302      	movs	r3, #2
  }
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3720      	adds	r7, #32
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c74:	b08c      	sub	sp, #48	; 0x30
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	691b      	ldr	r3, [r3, #16]
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4baa      	ldr	r3, [pc, #680]	; (8007f48 <UART_SetConfig+0x2d8>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	68da      	ldr	r2, [r3, #12]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a9f      	ldr	r2, [pc, #636]	; (8007f4c <UART_SetConfig+0x2dc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d004      	beq.n	8007cdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ce6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	6812      	ldr	r2, [r2, #0]
 8007cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cf0:	430b      	orrs	r3, r1
 8007cf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f023 010f 	bic.w	r1, r3, #15
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	430a      	orrs	r2, r1
 8007d08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a90      	ldr	r2, [pc, #576]	; (8007f50 <UART_SetConfig+0x2e0>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d125      	bne.n	8007d60 <UART_SetConfig+0xf0>
 8007d14:	4b8f      	ldr	r3, [pc, #572]	; (8007f54 <UART_SetConfig+0x2e4>)
 8007d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d81a      	bhi.n	8007d58 <UART_SetConfig+0xe8>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <UART_SetConfig+0xb8>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d39 	.word	0x08007d39
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d51 	.word	0x08007d51
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3e:	e116      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d46:	e112      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4e:	e10e      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e10a      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e106      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a7c      	ldr	r2, [pc, #496]	; (8007f58 <UART_SetConfig+0x2e8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d138      	bne.n	8007ddc <UART_SetConfig+0x16c>
 8007d6a:	4b7a      	ldr	r3, [pc, #488]	; (8007f54 <UART_SetConfig+0x2e4>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	f003 030c 	and.w	r3, r3, #12
 8007d74:	2b0c      	cmp	r3, #12
 8007d76:	d82d      	bhi.n	8007dd4 <UART_SetConfig+0x164>
 8007d78:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <UART_SetConfig+0x110>)
 8007d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7e:	bf00      	nop
 8007d80:	08007db5 	.word	0x08007db5
 8007d84:	08007dd5 	.word	0x08007dd5
 8007d88:	08007dd5 	.word	0x08007dd5
 8007d8c:	08007dd5 	.word	0x08007dd5
 8007d90:	08007dc5 	.word	0x08007dc5
 8007d94:	08007dd5 	.word	0x08007dd5
 8007d98:	08007dd5 	.word	0x08007dd5
 8007d9c:	08007dd5 	.word	0x08007dd5
 8007da0:	08007dbd 	.word	0x08007dbd
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007dd5 	.word	0x08007dd5
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dba:	e0d8      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc2:	e0d4      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dca:	e0d0      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd2:	e0cc      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dda:	e0c8      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a5e      	ldr	r2, [pc, #376]	; (8007f5c <UART_SetConfig+0x2ec>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d125      	bne.n	8007e32 <UART_SetConfig+0x1c2>
 8007de6:	4b5b      	ldr	r3, [pc, #364]	; (8007f54 <UART_SetConfig+0x2e4>)
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007df0:	2b30      	cmp	r3, #48	; 0x30
 8007df2:	d016      	beq.n	8007e22 <UART_SetConfig+0x1b2>
 8007df4:	2b30      	cmp	r3, #48	; 0x30
 8007df6:	d818      	bhi.n	8007e2a <UART_SetConfig+0x1ba>
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d00a      	beq.n	8007e12 <UART_SetConfig+0x1a2>
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d814      	bhi.n	8007e2a <UART_SetConfig+0x1ba>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <UART_SetConfig+0x19a>
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d008      	beq.n	8007e1a <UART_SetConfig+0x1aa>
 8007e08:	e00f      	b.n	8007e2a <UART_SetConfig+0x1ba>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e10:	e0ad      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e12:	2302      	movs	r3, #2
 8007e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e18:	e0a9      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e1a:	2304      	movs	r3, #4
 8007e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e20:	e0a5      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e22:	2308      	movs	r3, #8
 8007e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e28:	e0a1      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e30:	e09d      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a4a      	ldr	r2, [pc, #296]	; (8007f60 <UART_SetConfig+0x2f0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d125      	bne.n	8007e88 <UART_SetConfig+0x218>
 8007e3c:	4b45      	ldr	r3, [pc, #276]	; (8007f54 <UART_SetConfig+0x2e4>)
 8007e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e46:	2bc0      	cmp	r3, #192	; 0xc0
 8007e48:	d016      	beq.n	8007e78 <UART_SetConfig+0x208>
 8007e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e4c:	d818      	bhi.n	8007e80 <UART_SetConfig+0x210>
 8007e4e:	2b80      	cmp	r3, #128	; 0x80
 8007e50:	d00a      	beq.n	8007e68 <UART_SetConfig+0x1f8>
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d814      	bhi.n	8007e80 <UART_SetConfig+0x210>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <UART_SetConfig+0x1f0>
 8007e5a:	2b40      	cmp	r3, #64	; 0x40
 8007e5c:	d008      	beq.n	8007e70 <UART_SetConfig+0x200>
 8007e5e:	e00f      	b.n	8007e80 <UART_SetConfig+0x210>
 8007e60:	2300      	movs	r3, #0
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e66:	e082      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e6e:	e07e      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e70:	2304      	movs	r3, #4
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e76:	e07a      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e78:	2308      	movs	r3, #8
 8007e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e7e:	e076      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e80:	2310      	movs	r3, #16
 8007e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e86:	e072      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a35      	ldr	r2, [pc, #212]	; (8007f64 <UART_SetConfig+0x2f4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d12a      	bne.n	8007ee8 <UART_SetConfig+0x278>
 8007e92:	4b30      	ldr	r3, [pc, #192]	; (8007f54 <UART_SetConfig+0x2e4>)
 8007e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea0:	d01a      	beq.n	8007ed8 <UART_SetConfig+0x268>
 8007ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea6:	d81b      	bhi.n	8007ee0 <UART_SetConfig+0x270>
 8007ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eac:	d00c      	beq.n	8007ec8 <UART_SetConfig+0x258>
 8007eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb2:	d815      	bhi.n	8007ee0 <UART_SetConfig+0x270>
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <UART_SetConfig+0x250>
 8007eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ebc:	d008      	beq.n	8007ed0 <UART_SetConfig+0x260>
 8007ebe:	e00f      	b.n	8007ee0 <UART_SetConfig+0x270>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ec6:	e052      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ece:	e04e      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ed6:	e04a      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ede:	e046      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ee6:	e042      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a17      	ldr	r2, [pc, #92]	; (8007f4c <UART_SetConfig+0x2dc>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d13a      	bne.n	8007f68 <UART_SetConfig+0x2f8>
 8007ef2:	4b18      	ldr	r3, [pc, #96]	; (8007f54 <UART_SetConfig+0x2e4>)
 8007ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f00:	d01a      	beq.n	8007f38 <UART_SetConfig+0x2c8>
 8007f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f06:	d81b      	bhi.n	8007f40 <UART_SetConfig+0x2d0>
 8007f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0c:	d00c      	beq.n	8007f28 <UART_SetConfig+0x2b8>
 8007f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f12:	d815      	bhi.n	8007f40 <UART_SetConfig+0x2d0>
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <UART_SetConfig+0x2b0>
 8007f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1c:	d008      	beq.n	8007f30 <UART_SetConfig+0x2c0>
 8007f1e:	e00f      	b.n	8007f40 <UART_SetConfig+0x2d0>
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f26:	e022      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2e:	e01e      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007f30:	2304      	movs	r3, #4
 8007f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f36:	e01a      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007f38:	2308      	movs	r3, #8
 8007f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f3e:	e016      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007f40:	2310      	movs	r3, #16
 8007f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f46:	e012      	b.n	8007f6e <UART_SetConfig+0x2fe>
 8007f48:	cfff69f3 	.word	0xcfff69f3
 8007f4c:	40008000 	.word	0x40008000
 8007f50:	40013800 	.word	0x40013800
 8007f54:	40021000 	.word	0x40021000
 8007f58:	40004400 	.word	0x40004400
 8007f5c:	40004800 	.word	0x40004800
 8007f60:	40004c00 	.word	0x40004c00
 8007f64:	40005000 	.word	0x40005000
 8007f68:	2310      	movs	r3, #16
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4aae      	ldr	r2, [pc, #696]	; (800822c <UART_SetConfig+0x5bc>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	f040 8097 	bne.w	80080a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f7e:	2b08      	cmp	r3, #8
 8007f80:	d823      	bhi.n	8007fca <UART_SetConfig+0x35a>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x318>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fcb 	.word	0x08007fcb
 8007f90:	08007fb5 	.word	0x08007fb5
 8007f94:	08007fcb 	.word	0x08007fcb
 8007f98:	08007fbb 	.word	0x08007fbb
 8007f9c:	08007fcb 	.word	0x08007fcb
 8007fa0:	08007fcb 	.word	0x08007fcb
 8007fa4:	08007fcb 	.word	0x08007fcb
 8007fa8:	08007fc3 	.word	0x08007fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fac:	f7fe ff44 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8007fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fb2:	e010      	b.n	8007fd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb4:	4b9e      	ldr	r3, [pc, #632]	; (8008230 <UART_SetConfig+0x5c0>)
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fb8:	e00d      	b.n	8007fd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fba:	f7fe fecf 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 8007fbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fc0:	e009      	b.n	8007fd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fc8:	e005      	b.n	8007fd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8130 	beq.w	800823e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	4a94      	ldr	r2, [pc, #592]	; (8008234 <UART_SetConfig+0x5c4>)
 8007fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	4413      	add	r3, r2
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d305      	bcc.n	800800e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	429a      	cmp	r2, r3
 800800c:	d903      	bls.n	8008016 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008014:	e113      	b.n	800823e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	2200      	movs	r2, #0
 800801a:	60bb      	str	r3, [r7, #8]
 800801c:	60fa      	str	r2, [r7, #12]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	4a84      	ldr	r2, [pc, #528]	; (8008234 <UART_SetConfig+0x5c4>)
 8008024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008028:	b29b      	uxth	r3, r3
 800802a:	2200      	movs	r2, #0
 800802c:	603b      	str	r3, [r7, #0]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008038:	f7f8 fdde 	bl	8000bf8 <__aeabi_uldivmod>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	4610      	mov	r0, r2
 8008042:	4619      	mov	r1, r3
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	020b      	lsls	r3, r1, #8
 800804e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008052:	0202      	lsls	r2, r0, #8
 8008054:	6979      	ldr	r1, [r7, #20]
 8008056:	6849      	ldr	r1, [r1, #4]
 8008058:	0849      	lsrs	r1, r1, #1
 800805a:	2000      	movs	r0, #0
 800805c:	460c      	mov	r4, r1
 800805e:	4605      	mov	r5, r0
 8008060:	eb12 0804 	adds.w	r8, r2, r4
 8008064:	eb43 0905 	adc.w	r9, r3, r5
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	469a      	mov	sl, r3
 8008070:	4693      	mov	fp, r2
 8008072:	4652      	mov	r2, sl
 8008074:	465b      	mov	r3, fp
 8008076:	4640      	mov	r0, r8
 8008078:	4649      	mov	r1, r9
 800807a:	f7f8 fdbd 	bl	8000bf8 <__aeabi_uldivmod>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4613      	mov	r3, r2
 8008084:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808c:	d308      	bcc.n	80080a0 <UART_SetConfig+0x430>
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008094:	d204      	bcs.n	80080a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6a3a      	ldr	r2, [r7, #32]
 800809c:	60da      	str	r2, [r3, #12]
 800809e:	e0ce      	b.n	800823e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080a6:	e0ca      	b.n	800823e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	69db      	ldr	r3, [r3, #28]
 80080ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b0:	d166      	bne.n	8008180 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80080b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d827      	bhi.n	800810a <UART_SetConfig+0x49a>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <UART_SetConfig+0x450>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080e5 	.word	0x080080e5
 80080c4:	080080ed 	.word	0x080080ed
 80080c8:	080080f5 	.word	0x080080f5
 80080cc:	0800810b 	.word	0x0800810b
 80080d0:	080080fb 	.word	0x080080fb
 80080d4:	0800810b 	.word	0x0800810b
 80080d8:	0800810b 	.word	0x0800810b
 80080dc:	0800810b 	.word	0x0800810b
 80080e0:	08008103 	.word	0x08008103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080e4:	f7fe fea8 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 80080e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080ea:	e014      	b.n	8008116 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ec:	f7fe feba 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 80080f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080f2:	e010      	b.n	8008116 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080f4:	4b4e      	ldr	r3, [pc, #312]	; (8008230 <UART_SetConfig+0x5c0>)
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080f8:	e00d      	b.n	8008116 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080fa:	f7fe fe2f 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 80080fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008100:	e009      	b.n	8008116 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008108:	e005      	b.n	8008116 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8090 	beq.w	800823e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	4a44      	ldr	r2, [pc, #272]	; (8008234 <UART_SetConfig+0x5c4>)
 8008124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008128:	461a      	mov	r2, r3
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008130:	005a      	lsls	r2, r3, #1
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	085b      	lsrs	r3, r3, #1
 8008138:	441a      	add	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008142:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	2b0f      	cmp	r3, #15
 8008148:	d916      	bls.n	8008178 <UART_SetConfig+0x508>
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008150:	d212      	bcs.n	8008178 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	b29b      	uxth	r3, r3
 8008156:	f023 030f 	bic.w	r3, r3, #15
 800815a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	b29a      	uxth	r2, r3
 8008168:	8bfb      	ldrh	r3, [r7, #30]
 800816a:	4313      	orrs	r3, r2
 800816c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	8bfa      	ldrh	r2, [r7, #30]
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	e062      	b.n	800823e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800817e:	e05e      	b.n	800823e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008184:	2b08      	cmp	r3, #8
 8008186:	d828      	bhi.n	80081da <UART_SetConfig+0x56a>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <UART_SetConfig+0x520>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081b5 	.word	0x080081b5
 8008194:	080081bd 	.word	0x080081bd
 8008198:	080081c5 	.word	0x080081c5
 800819c:	080081db 	.word	0x080081db
 80081a0:	080081cb 	.word	0x080081cb
 80081a4:	080081db 	.word	0x080081db
 80081a8:	080081db 	.word	0x080081db
 80081ac:	080081db 	.word	0x080081db
 80081b0:	080081d3 	.word	0x080081d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b4:	f7fe fe40 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 80081b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081ba:	e014      	b.n	80081e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081bc:	f7fe fe52 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 80081c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081c2:	e010      	b.n	80081e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081c4:	4b1a      	ldr	r3, [pc, #104]	; (8008230 <UART_SetConfig+0x5c0>)
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081c8:	e00d      	b.n	80081e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ca:	f7fe fdc7 	bl	8006d5c <HAL_RCC_GetSysClockFreq>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081d0:	e009      	b.n	80081e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081d8:	e005      	b.n	80081e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081e4:	bf00      	nop
    }

    if (pclk != 0U)
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d028      	beq.n	800823e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	4a10      	ldr	r2, [pc, #64]	; (8008234 <UART_SetConfig+0x5c4>)
 80081f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	441a      	add	r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	fbb2 f3f3 	udiv	r3, r2, r3
 800820e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	2b0f      	cmp	r3, #15
 8008214:	d910      	bls.n	8008238 <UART_SetConfig+0x5c8>
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800821c:	d20c      	bcs.n	8008238 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	b29a      	uxth	r2, r3
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	60da      	str	r2, [r3, #12]
 8008228:	e009      	b.n	800823e <UART_SetConfig+0x5ce>
 800822a:	bf00      	nop
 800822c:	40008000 	.word	0x40008000
 8008230:	00f42400 	.word	0x00f42400
 8008234:	0800cd08 	.word	0x0800cd08
      }
      else
      {
        ret = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2201      	movs	r2, #1
 8008242:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2201      	movs	r2, #1
 800824a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2200      	movs	r2, #0
 8008252:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2200      	movs	r2, #0
 8008258:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800825a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800825e:	4618      	mov	r0, r3
 8008260:	3730      	adds	r7, #48	; 0x30
 8008262:	46bd      	mov	sp, r7
 8008264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01a      	beq.n	800837e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008366:	d10a      	bne.n	800837e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]
  }
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b098      	sub	sp, #96	; 0x60
 80083b0:	af02      	add	r7, sp, #8
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083bc:	f7f9 ff30 	bl	8002220 <HAL_GetTick>
 80083c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d12f      	bne.n	8008430 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d8:	2200      	movs	r2, #0
 80083da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f88e 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d022      	beq.n	8008430 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008408:	647b      	str	r3, [r7, #68]	; 0x44
 800840a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800840e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e6      	bne.n	80083ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e063      	b.n	80084f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0304 	and.w	r3, r3, #4
 800843a:	2b04      	cmp	r3, #4
 800843c:	d149      	bne.n	80084d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800843e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008446:	2200      	movs	r2, #0
 8008448:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f857 	bl	8008500 <UART_WaitOnFlagUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03c      	beq.n	80084d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	623b      	str	r3, [r7, #32]
   return(result);
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800846c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008476:	633b      	str	r3, [r7, #48]	; 0x30
 8008478:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800847c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e6      	bne.n	8008458 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	60fb      	str	r3, [r7, #12]
   return(result);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084aa:	61fa      	str	r2, [r7, #28]
 80084ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	69b9      	ldr	r1, [r7, #24]
 80084b0:	69fa      	ldr	r2, [r7, #28]
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	617b      	str	r3, [r7, #20]
   return(result);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e012      	b.n	80084f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2220      	movs	r2, #32
 80084de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3758      	adds	r7, #88	; 0x58
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	603b      	str	r3, [r7, #0]
 800850c:	4613      	mov	r3, r2
 800850e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008510:	e04f      	b.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d04b      	beq.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851a:	f7f9 fe81 	bl	8002220 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	429a      	cmp	r2, r3
 8008528:	d302      	bcc.n	8008530 <UART_WaitOnFlagUntilTimeout+0x30>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e04e      	b.n	80085d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0304 	and.w	r3, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	d037      	beq.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b80      	cmp	r3, #128	; 0x80
 8008546:	d034      	beq.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b40      	cmp	r3, #64	; 0x40
 800854c:	d031      	beq.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b08      	cmp	r3, #8
 800855a:	d110      	bne.n	800857e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2208      	movs	r2, #8
 8008562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f838 	bl	80085da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2208      	movs	r2, #8
 800856e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e029      	b.n	80085d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800858c:	d111      	bne.n	80085b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f81e 	bl	80085da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e00f      	b.n	80085d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69da      	ldr	r2, [r3, #28]
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4013      	ands	r3, r2
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	429a      	cmp	r2, r3
 80085c0:	bf0c      	ite	eq
 80085c2:	2301      	moveq	r3, #1
 80085c4:	2300      	movne	r3, #0
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	461a      	mov	r2, r3
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d0a0      	beq.n	8008512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085da:	b480      	push	{r7}
 80085dc:	b095      	sub	sp, #84	; 0x54
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008600:	643b      	str	r3, [r7, #64]	; 0x40
 8008602:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e6      	bne.n	80085e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	61fb      	str	r3, [r7, #28]
   return(result);
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800862a:	f023 0301 	bic.w	r3, r3, #1
 800862e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3308      	adds	r3, #8
 8008636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800863e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008640:	e841 2300 	strex	r3, r2, [r1]
 8008644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e3      	bne.n	8008614 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d118      	bne.n	8008686 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	60bb      	str	r3, [r7, #8]
   return(result);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f023 0310 	bic.w	r3, r3, #16
 8008668:	647b      	str	r3, [r7, #68]	; 0x44
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6979      	ldr	r1, [r7, #20]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	613b      	str	r3, [r7, #16]
   return(result);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	675a      	str	r2, [r3, #116]	; 0x74
}
 800869a:	bf00      	nop
 800869c:	3754      	adds	r7, #84	; 0x54
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_UARTEx_DisableFifoMode+0x16>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e027      	b.n	800870c <HAL_UARTEx_DisableFifoMode+0x66>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2224      	movs	r2, #36	; 0x24
 80086c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008728:	2b01      	cmp	r3, #1
 800872a:	d101      	bne.n	8008730 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800872c:	2302      	movs	r3, #2
 800872e:	e02d      	b.n	800878c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2224      	movs	r2, #36	; 0x24
 800873c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0201 	bic.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f84f 	bl	8008810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d101      	bne.n	80087ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e02d      	b.n	8008808 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2224      	movs	r2, #36	; 0x24
 80087b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0201 	bic.w	r2, r2, #1
 80087d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f811 	bl	8008810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881c:	2b00      	cmp	r3, #0
 800881e:	d108      	bne.n	8008832 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008830:	e031      	b.n	8008896 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008832:	2308      	movs	r3, #8
 8008834:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008836:	2308      	movs	r3, #8
 8008838:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	0e5b      	lsrs	r3, r3, #25
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	0f5b      	lsrs	r3, r3, #29
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 0307 	and.w	r3, r3, #7
 8008858:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	7b3a      	ldrb	r2, [r7, #12]
 800885e:	4911      	ldr	r1, [pc, #68]	; (80088a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008860:	5c8a      	ldrb	r2, [r1, r2]
 8008862:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008866:	7b3a      	ldrb	r2, [r7, #12]
 8008868:	490f      	ldr	r1, [pc, #60]	; (80088a8 <UARTEx_SetNbDataToProcess+0x98>)
 800886a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800886c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008870:	b29a      	uxth	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	7b7a      	ldrb	r2, [r7, #13]
 800887c:	4909      	ldr	r1, [pc, #36]	; (80088a4 <UARTEx_SetNbDataToProcess+0x94>)
 800887e:	5c8a      	ldrb	r2, [r1, r2]
 8008880:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008884:	7b7a      	ldrb	r2, [r7, #13]
 8008886:	4908      	ldr	r1, [pc, #32]	; (80088a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008888:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800888a:	fb93 f3f2 	sdiv	r3, r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	0800cd20 	.word	0x0800cd20
 80088a8:	0800cd28 	.word	0x0800cd28

080088ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80088ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088be:	2b84      	cmp	r3, #132	; 0x84
 80088c0:	d005      	beq.n	80088ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80088c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	3303      	adds	r3, #3
 80088cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80088e0:	f000 fb3e 	bl	8008f60 <vTaskStartScheduler>
  
  return osOK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	bd80      	pop	{r7, pc}

080088ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80088ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ec:	b087      	sub	sp, #28
 80088ee:	af02      	add	r7, sp, #8
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685c      	ldr	r4, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008900:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff ffcf 	bl	80088ac <makeFreeRtosPriority>
 800890e:	4602      	mov	r2, r0
 8008910:	f107 030c 	add.w	r3, r7, #12
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	9200      	str	r2, [sp, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	4632      	mov	r2, r6
 800891c:	4629      	mov	r1, r5
 800891e:	4620      	mov	r0, r4
 8008920:	f000 f9a1 	bl	8008c66 <xTaskCreate>
 8008924:	4603      	mov	r3, r0
 8008926:	2b01      	cmp	r3, #1
 8008928:	d001      	beq.n	800892e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	e000      	b.n	8008930 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800892e:	68fb      	ldr	r3, [r7, #12]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008938 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <osDelay+0x16>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	e000      	b.n	8008950 <osDelay+0x18>
 800894e:	2301      	movs	r3, #1
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fad1 	bl	8008ef8 <vTaskDelay>
  
  return osOK;
 8008956:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	4619      	mov	r1, r3
 8008976:	f000 f921 	bl	8008bbc <xQueueGenericCreate>
 800897a:	4603      	mov	r3, r0
#endif
}
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f103 0208 	add.w	r2, r3, #8
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f04f 32ff 	mov.w	r2, #4294967295
 800899c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f103 0208 	add.w	r2, r3, #8
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f103 0208 	add.w	r2, r3, #8
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80089d2:	bf00      	nop
 80089d4:	370c      	adds	r7, #12
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089de:	b480      	push	{r7}
 80089e0:	b085      	sub	sp, #20
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	601a      	str	r2, [r3, #0]
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a26:	b480      	push	{r7}
 8008a28:	b085      	sub	sp, #20
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3c:	d103      	bne.n	8008a46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e00c      	b.n	8008a60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e002      	b.n	8008a54 <vListInsert+0x2e>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d2f6      	bcs.n	8008a4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	685a      	ldr	r2, [r3, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	601a      	str	r2, [r3, #0]
}
 8008a8c:	bf00      	nop
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6892      	ldr	r2, [r2, #8]
 8008aae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6852      	ldr	r2, [r2, #4]
 8008ab8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d103      	bne.n	8008acc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1e5a      	subs	r2, r3, #1
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10a      	bne.n	8008b16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b16:	f000 fee5 	bl	80098e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	68f9      	ldr	r1, [r7, #12]
 8008b24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	441a      	add	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b46:	3b01      	subs	r3, #1
 8008b48:	68f9      	ldr	r1, [r7, #12]
 8008b4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b4c:	fb01 f303 	mul.w	r3, r1, r3
 8008b50:	441a      	add	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	22ff      	movs	r2, #255	; 0xff
 8008b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	22ff      	movs	r2, #255	; 0xff
 8008b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d114      	bne.n	8008b96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01a      	beq.n	8008baa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3310      	adds	r3, #16
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fc05 	bl	8009388 <xTaskRemoveFromEventList>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d012      	beq.n	8008baa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <xQueueGenericReset+0xcc>)
 8008b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	e009      	b.n	8008baa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3310      	adds	r3, #16
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fef2 	bl	8008984 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3324      	adds	r3, #36	; 0x24
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff feed 	bl	8008984 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008baa:	f000 fecb 	bl	8009944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bae:	2301      	movs	r3, #1
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	; 0x28
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10a      	bne.n	8008be6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	613b      	str	r3, [r7, #16]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	fb02 f303 	mul.w	r3, r2, r3
 8008bee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	3348      	adds	r3, #72	; 0x48
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 ff57 	bl	8009aa8 <pvPortMalloc>
 8008bfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00d      	beq.n	8008c1e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	3348      	adds	r3, #72	; 0x48
 8008c0a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c0c:	79fa      	ldrb	r2, [r7, #7]
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	4613      	mov	r3, r2
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 f805 	bl	8008c28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	e002      	b.n	8008c4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c56:	2101      	movs	r1, #1
 8008c58:	69b8      	ldr	r0, [r7, #24]
 8008c5a:	f7ff ff47 	bl	8008aec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008c5e:	bf00      	nop
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b08c      	sub	sp, #48	; 0x30
 8008c6a:	af04      	add	r7, sp, #16
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	603b      	str	r3, [r7, #0]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c76:	88fb      	ldrh	r3, [r7, #6]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 ff14 	bl	8009aa8 <pvPortMalloc>
 8008c80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00e      	beq.n	8008ca6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c88:	20a0      	movs	r0, #160	; 0xa0
 8008c8a:	f000 ff0d 	bl	8009aa8 <pvPortMalloc>
 8008c8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008c9c:	e005      	b.n	8008caa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c9e:	6978      	ldr	r0, [r7, #20]
 8008ca0:	f000 ffce 	bl	8009c40 <vPortFree>
 8008ca4:	e001      	b.n	8008caa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d013      	beq.n	8008cd8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cb0:	88fa      	ldrh	r2, [r7, #6]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f80e 	bl	8008ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ccc:	69f8      	ldr	r0, [r7, #28]
 8008cce:	f000 f8a9 	bl	8008e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	e002      	b.n	8008cde <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cde:	69bb      	ldr	r3, [r7, #24]
	}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d00:	3b01      	subs	r3, #1
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	f023 0307 	bic.w	r3, r3, #7
 8008d0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	617b      	str	r3, [r7, #20]
}
 8008d2c:	bf00      	nop
 8008d2e:	e7fe      	b.n	8008d2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01f      	beq.n	8008d76 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d36:	2300      	movs	r3, #0
 8008d38:	61fb      	str	r3, [r7, #28]
 8008d3a:	e012      	b.n	8008d62 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	7819      	ldrb	r1, [r3, #0]
 8008d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	3334      	adds	r3, #52	; 0x34
 8008d4c:	460a      	mov	r2, r1
 8008d4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d006      	beq.n	8008d6a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	2b0f      	cmp	r3, #15
 8008d66:	d9e9      	bls.n	8008d3c <prvInitialiseNewTask+0x54>
 8008d68:	e000      	b.n	8008d6c <prvInitialiseNewTask+0x84>
			{
				break;
 8008d6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d74:	e003      	b.n	8008d7e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	2b06      	cmp	r3, #6
 8008d82:	d901      	bls.n	8008d88 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d84:	2306      	movs	r3, #6
 8008d86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d92:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d96:	2200      	movs	r2, #0
 8008d98:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fe10 	bl	80089c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da6:	3318      	adds	r3, #24
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff fe0b 	bl	80089c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	f1c3 0207 	rsb	r2, r3, #7
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	334c      	adds	r3, #76	; 0x4c
 8008dd8:	224c      	movs	r2, #76	; 0x4c
 8008dda:	2100      	movs	r1, #0
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f001 fdec 	bl	800a9ba <memset>
 8008de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de4:	4a0c      	ldr	r2, [pc, #48]	; (8008e18 <prvInitialiseNewTask+0x130>)
 8008de6:	651a      	str	r2, [r3, #80]	; 0x50
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <prvInitialiseNewTask+0x134>)
 8008dec:	655a      	str	r2, [r3, #84]	; 0x54
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	4a0b      	ldr	r2, [pc, #44]	; (8008e20 <prvInitialiseNewTask+0x138>)
 8008df2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	69b8      	ldr	r0, [r7, #24]
 8008dfa:	f000 fc49 	bl	8009690 <pxPortInitialiseStack>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e10:	bf00      	nop
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20001294 	.word	0x20001294
 8008e1c:	200012fc 	.word	0x200012fc
 8008e20:	20001364 	.word	0x20001364

08008e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e2c:	f000 fd5a 	bl	80098e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e30:	4b2a      	ldr	r3, [pc, #168]	; (8008edc <prvAddNewTaskToReadyList+0xb8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	4a29      	ldr	r2, [pc, #164]	; (8008edc <prvAddNewTaskToReadyList+0xb8>)
 8008e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e3a:	4b29      	ldr	r3, [pc, #164]	; (8008ee0 <prvAddNewTaskToReadyList+0xbc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d109      	bne.n	8008e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e42:	4a27      	ldr	r2, [pc, #156]	; (8008ee0 <prvAddNewTaskToReadyList+0xbc>)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e48:	4b24      	ldr	r3, [pc, #144]	; (8008edc <prvAddNewTaskToReadyList+0xb8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d110      	bne.n	8008e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e50:	f000 fb14 	bl	800947c <prvInitialiseTaskLists>
 8008e54:	e00d      	b.n	8008e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e56:	4b23      	ldr	r3, [pc, #140]	; (8008ee4 <prvAddNewTaskToReadyList+0xc0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d109      	bne.n	8008e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e5e:	4b20      	ldr	r3, [pc, #128]	; (8008ee0 <prvAddNewTaskToReadyList+0xbc>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d802      	bhi.n	8008e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ee0 <prvAddNewTaskToReadyList+0xbc>)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e72:	4b1d      	ldr	r3, [pc, #116]	; (8008ee8 <prvAddNewTaskToReadyList+0xc4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3301      	adds	r3, #1
 8008e78:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <prvAddNewTaskToReadyList+0xc4>)
 8008e7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e80:	2201      	movs	r2, #1
 8008e82:	409a      	lsls	r2, r3
 8008e84:	4b19      	ldr	r3, [pc, #100]	; (8008eec <prvAddNewTaskToReadyList+0xc8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	4a18      	ldr	r2, [pc, #96]	; (8008eec <prvAddNewTaskToReadyList+0xc8>)
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <prvAddNewTaskToReadyList+0xcc>)
 8008e9c:	441a      	add	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	3304      	adds	r3, #4
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	f7ff fd9a 	bl	80089de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eaa:	f000 fd4b 	bl	8009944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008eae:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <prvAddNewTaskToReadyList+0xc0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00e      	beq.n	8008ed4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <prvAddNewTaskToReadyList+0xbc>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d207      	bcs.n	8008ed4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <prvAddNewTaskToReadyList+0xd0>)
 8008ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000640 	.word	0x20000640
 8008ee0:	20000540 	.word	0x20000540
 8008ee4:	2000064c 	.word	0x2000064c
 8008ee8:	2000065c 	.word	0x2000065c
 8008eec:	20000648 	.word	0x20000648
 8008ef0:	20000544 	.word	0x20000544
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d017      	beq.n	8008f3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f0a:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <vTaskDelay+0x60>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00a      	beq.n	8008f28 <vTaskDelay+0x30>
	__asm volatile
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	60bb      	str	r3, [r7, #8]
}
 8008f24:	bf00      	nop
 8008f26:	e7fe      	b.n	8008f26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f28:	f000 f86a 	bl	8009000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fb48 	bl	80095c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f34:	f000 f872 	bl	800901c <xTaskResumeAll>
 8008f38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d107      	bne.n	8008f50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f40:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <vTaskDelay+0x64>)
 8008f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20000668 	.word	0x20000668
 8008f5c:	e000ed04 	.word	0xe000ed04

08008f60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008f66:	4b1e      	ldr	r3, [pc, #120]	; (8008fe0 <vTaskStartScheduler+0x80>)
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	2280      	movs	r2, #128	; 0x80
 8008f72:	491c      	ldr	r1, [pc, #112]	; (8008fe4 <vTaskStartScheduler+0x84>)
 8008f74:	481c      	ldr	r0, [pc, #112]	; (8008fe8 <vTaskStartScheduler+0x88>)
 8008f76:	f7ff fe76 	bl	8008c66 <xTaskCreate>
 8008f7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d11b      	bne.n	8008fba <vTaskStartScheduler+0x5a>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60bb      	str	r3, [r7, #8]
}
 8008f94:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f96:	4b15      	ldr	r3, [pc, #84]	; (8008fec <vTaskStartScheduler+0x8c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	334c      	adds	r3, #76	; 0x4c
 8008f9c:	4a14      	ldr	r2, [pc, #80]	; (8008ff0 <vTaskStartScheduler+0x90>)
 8008f9e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa0:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <vTaskStartScheduler+0x94>)
 8008fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fa8:	4b13      	ldr	r3, [pc, #76]	; (8008ff8 <vTaskStartScheduler+0x98>)
 8008faa:	2201      	movs	r2, #1
 8008fac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <vTaskStartScheduler+0x9c>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fb4:	f000 fbf4 	bl	80097a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fb8:	e00e      	b.n	8008fd8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d10a      	bne.n	8008fd8 <vTaskStartScheduler+0x78>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	607b      	str	r3, [r7, #4]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <vTaskStartScheduler+0x76>
}
 8008fd8:	bf00      	nop
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000664 	.word	0x20000664
 8008fe4:	0800cce8 	.word	0x0800cce8
 8008fe8:	0800944d 	.word	0x0800944d
 8008fec:	20000540 	.word	0x20000540
 8008ff0:	20000070 	.word	0x20000070
 8008ff4:	20000660 	.word	0x20000660
 8008ff8:	2000064c 	.word	0x2000064c
 8008ffc:	20000644 	.word	0x20000644

08009000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009004:	4b04      	ldr	r3, [pc, #16]	; (8009018 <vTaskSuspendAll+0x18>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3301      	adds	r3, #1
 800900a:	4a03      	ldr	r2, [pc, #12]	; (8009018 <vTaskSuspendAll+0x18>)
 800900c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800900e:	bf00      	nop
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	20000668 	.word	0x20000668

0800901c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800902a:	4b41      	ldr	r3, [pc, #260]	; (8009130 <xTaskResumeAll+0x114>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <xTaskResumeAll+0x2c>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	603b      	str	r3, [r7, #0]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009048:	f000 fc4c 	bl	80098e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800904c:	4b38      	ldr	r3, [pc, #224]	; (8009130 <xTaskResumeAll+0x114>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3b01      	subs	r3, #1
 8009052:	4a37      	ldr	r2, [pc, #220]	; (8009130 <xTaskResumeAll+0x114>)
 8009054:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009056:	4b36      	ldr	r3, [pc, #216]	; (8009130 <xTaskResumeAll+0x114>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d161      	bne.n	8009122 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800905e:	4b35      	ldr	r3, [pc, #212]	; (8009134 <xTaskResumeAll+0x118>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d05d      	beq.n	8009122 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009066:	e02e      	b.n	80090c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009068:	4b33      	ldr	r3, [pc, #204]	; (8009138 <xTaskResumeAll+0x11c>)
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3318      	adds	r3, #24
 8009074:	4618      	mov	r0, r3
 8009076:	f7ff fd0f 	bl	8008a98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fd0a 	bl	8008a98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	2201      	movs	r2, #1
 800908a:	409a      	lsls	r2, r3
 800908c:	4b2b      	ldr	r3, [pc, #172]	; (800913c <xTaskResumeAll+0x120>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4313      	orrs	r3, r2
 8009092:	4a2a      	ldr	r2, [pc, #168]	; (800913c <xTaskResumeAll+0x120>)
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4a27      	ldr	r2, [pc, #156]	; (8009140 <xTaskResumeAll+0x124>)
 80090a4:	441a      	add	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3304      	adds	r3, #4
 80090aa:	4619      	mov	r1, r3
 80090ac:	4610      	mov	r0, r2
 80090ae:	f7ff fc96 	bl	80089de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	4b23      	ldr	r3, [pc, #140]	; (8009144 <xTaskResumeAll+0x128>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80090c0:	4b21      	ldr	r3, [pc, #132]	; (8009148 <xTaskResumeAll+0x12c>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090c6:	4b1c      	ldr	r3, [pc, #112]	; (8009138 <xTaskResumeAll+0x11c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1cc      	bne.n	8009068 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090d4:	f000 fa56 	bl	8009584 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090d8:	4b1c      	ldr	r3, [pc, #112]	; (800914c <xTaskResumeAll+0x130>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d010      	beq.n	8009106 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090e4:	f000 f836 	bl	8009154 <xTaskIncrementTick>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80090ee:	4b16      	ldr	r3, [pc, #88]	; (8009148 <xTaskResumeAll+0x12c>)
 80090f0:	2201      	movs	r2, #1
 80090f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1f1      	bne.n	80090e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009100:	4b12      	ldr	r3, [pc, #72]	; (800914c <xTaskResumeAll+0x130>)
 8009102:	2200      	movs	r2, #0
 8009104:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009106:	4b10      	ldr	r3, [pc, #64]	; (8009148 <xTaskResumeAll+0x12c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800910e:	2301      	movs	r3, #1
 8009110:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009112:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <xTaskResumeAll+0x134>)
 8009114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009122:	f000 fc0f 	bl	8009944 <vPortExitCritical>

	return xAlreadyYielded;
 8009126:	68bb      	ldr	r3, [r7, #8]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20000668 	.word	0x20000668
 8009134:	20000640 	.word	0x20000640
 8009138:	20000600 	.word	0x20000600
 800913c:	20000648 	.word	0x20000648
 8009140:	20000544 	.word	0x20000544
 8009144:	20000540 	.word	0x20000540
 8009148:	20000654 	.word	0x20000654
 800914c:	20000650 	.word	0x20000650
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800915a:	2300      	movs	r3, #0
 800915c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800915e:	4b4e      	ldr	r3, [pc, #312]	; (8009298 <xTaskIncrementTick+0x144>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f040 808e 	bne.w	8009284 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009168:	4b4c      	ldr	r3, [pc, #304]	; (800929c <xTaskIncrementTick+0x148>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3301      	adds	r3, #1
 800916e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009170:	4a4a      	ldr	r2, [pc, #296]	; (800929c <xTaskIncrementTick+0x148>)
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d120      	bne.n	80091be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800917c:	4b48      	ldr	r3, [pc, #288]	; (80092a0 <xTaskIncrementTick+0x14c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <xTaskIncrementTick+0x48>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	603b      	str	r3, [r7, #0]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <xTaskIncrementTick+0x46>
 800919c:	4b40      	ldr	r3, [pc, #256]	; (80092a0 <xTaskIncrementTick+0x14c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	4b40      	ldr	r3, [pc, #256]	; (80092a4 <xTaskIncrementTick+0x150>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a3e      	ldr	r2, [pc, #248]	; (80092a0 <xTaskIncrementTick+0x14c>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	4a3e      	ldr	r2, [pc, #248]	; (80092a4 <xTaskIncrementTick+0x150>)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	4b3d      	ldr	r3, [pc, #244]	; (80092a8 <xTaskIncrementTick+0x154>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	4a3c      	ldr	r2, [pc, #240]	; (80092a8 <xTaskIncrementTick+0x154>)
 80091b8:	6013      	str	r3, [r2, #0]
 80091ba:	f000 f9e3 	bl	8009584 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091be:	4b3b      	ldr	r3, [pc, #236]	; (80092ac <xTaskIncrementTick+0x158>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d348      	bcc.n	800925a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091c8:	4b35      	ldr	r3, [pc, #212]	; (80092a0 <xTaskIncrementTick+0x14c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d104      	bne.n	80091dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091d2:	4b36      	ldr	r3, [pc, #216]	; (80092ac <xTaskIncrementTick+0x158>)
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295
 80091d8:	601a      	str	r2, [r3, #0]
					break;
 80091da:	e03e      	b.n	800925a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091dc:	4b30      	ldr	r3, [pc, #192]	; (80092a0 <xTaskIncrementTick+0x14c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d203      	bcs.n	80091fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091f4:	4a2d      	ldr	r2, [pc, #180]	; (80092ac <xTaskIncrementTick+0x158>)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091fa:	e02e      	b.n	800925a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	3304      	adds	r3, #4
 8009200:	4618      	mov	r0, r3
 8009202:	f7ff fc49 	bl	8008a98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	3318      	adds	r3, #24
 8009212:	4618      	mov	r0, r3
 8009214:	f7ff fc40 	bl	8008a98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	2201      	movs	r2, #1
 800921e:	409a      	lsls	r2, r3
 8009220:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <xTaskIncrementTick+0x15c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4313      	orrs	r3, r2
 8009226:	4a22      	ldr	r2, [pc, #136]	; (80092b0 <xTaskIncrementTick+0x15c>)
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800922e:	4613      	mov	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	4a1f      	ldr	r2, [pc, #124]	; (80092b4 <xTaskIncrementTick+0x160>)
 8009238:	441a      	add	r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	3304      	adds	r3, #4
 800923e:	4619      	mov	r1, r3
 8009240:	4610      	mov	r0, r2
 8009242:	f7ff fbcc 	bl	80089de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800924a:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <xTaskIncrementTick+0x164>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	429a      	cmp	r2, r3
 8009252:	d3b9      	bcc.n	80091c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009258:	e7b6      	b.n	80091c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800925a:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <xTaskIncrementTick+0x164>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009260:	4914      	ldr	r1, [pc, #80]	; (80092b4 <xTaskIncrementTick+0x160>)
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	440b      	add	r3, r1
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d901      	bls.n	8009276 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009272:	2301      	movs	r3, #1
 8009274:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009276:	4b11      	ldr	r3, [pc, #68]	; (80092bc <xTaskIncrementTick+0x168>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d007      	beq.n	800928e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800927e:	2301      	movs	r3, #1
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	e004      	b.n	800928e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009284:	4b0e      	ldr	r3, [pc, #56]	; (80092c0 <xTaskIncrementTick+0x16c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	4a0d      	ldr	r2, [pc, #52]	; (80092c0 <xTaskIncrementTick+0x16c>)
 800928c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800928e:	697b      	ldr	r3, [r7, #20]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	20000668 	.word	0x20000668
 800929c:	20000644 	.word	0x20000644
 80092a0:	200005f8 	.word	0x200005f8
 80092a4:	200005fc 	.word	0x200005fc
 80092a8:	20000658 	.word	0x20000658
 80092ac:	20000660 	.word	0x20000660
 80092b0:	20000648 	.word	0x20000648
 80092b4:	20000544 	.word	0x20000544
 80092b8:	20000540 	.word	0x20000540
 80092bc:	20000654 	.word	0x20000654
 80092c0:	20000650 	.word	0x20000650

080092c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092ca:	4b29      	ldr	r3, [pc, #164]	; (8009370 <vTaskSwitchContext+0xac>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092d2:	4b28      	ldr	r3, [pc, #160]	; (8009374 <vTaskSwitchContext+0xb0>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092d8:	e044      	b.n	8009364 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80092da:	4b26      	ldr	r3, [pc, #152]	; (8009374 <vTaskSwitchContext+0xb0>)
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e0:	4b25      	ldr	r3, [pc, #148]	; (8009378 <vTaskSwitchContext+0xb4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	fab3 f383 	clz	r3, r3
 80092ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092ee:	7afb      	ldrb	r3, [r7, #11]
 80092f0:	f1c3 031f 	rsb	r3, r3, #31
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	4921      	ldr	r1, [pc, #132]	; (800937c <vTaskSwitchContext+0xb8>)
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	4613      	mov	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	440b      	add	r3, r1
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10a      	bne.n	8009320 <vTaskSwitchContext+0x5c>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	607b      	str	r3, [r7, #4]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <vTaskSwitchContext+0x5a>
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4613      	mov	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4a14      	ldr	r2, [pc, #80]	; (800937c <vTaskSwitchContext+0xb8>)
 800932c:	4413      	add	r3, r2
 800932e:	613b      	str	r3, [r7, #16]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	3308      	adds	r3, #8
 8009342:	429a      	cmp	r2, r3
 8009344:	d104      	bne.n	8009350 <vTaskSwitchContext+0x8c>
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	605a      	str	r2, [r3, #4]
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	4a0a      	ldr	r2, [pc, #40]	; (8009380 <vTaskSwitchContext+0xbc>)
 8009358:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <vTaskSwitchContext+0xbc>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	334c      	adds	r3, #76	; 0x4c
 8009360:	4a08      	ldr	r2, [pc, #32]	; (8009384 <vTaskSwitchContext+0xc0>)
 8009362:	6013      	str	r3, [r2, #0]
}
 8009364:	bf00      	nop
 8009366:	371c      	adds	r7, #28
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	20000668 	.word	0x20000668
 8009374:	20000654 	.word	0x20000654
 8009378:	20000648 	.word	0x20000648
 800937c:	20000544 	.word	0x20000544
 8009380:	20000540 	.word	0x20000540
 8009384:	20000070 	.word	0x20000070

08009388 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	60fb      	str	r3, [r7, #12]
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	3318      	adds	r3, #24
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff fb6d 	bl	8008a98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093be:	4b1d      	ldr	r3, [pc, #116]	; (8009434 <xTaskRemoveFromEventList+0xac>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d11c      	bne.n	8009400 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff fb64 	bl	8008a98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	2201      	movs	r2, #1
 80093d6:	409a      	lsls	r2, r3
 80093d8:	4b17      	ldr	r3, [pc, #92]	; (8009438 <xTaskRemoveFromEventList+0xb0>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4313      	orrs	r3, r2
 80093de:	4a16      	ldr	r2, [pc, #88]	; (8009438 <xTaskRemoveFromEventList+0xb0>)
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4a13      	ldr	r2, [pc, #76]	; (800943c <xTaskRemoveFromEventList+0xb4>)
 80093f0:	441a      	add	r2, r3
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4619      	mov	r1, r3
 80093f8:	4610      	mov	r0, r2
 80093fa:	f7ff faf0 	bl	80089de <vListInsertEnd>
 80093fe:	e005      	b.n	800940c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	3318      	adds	r3, #24
 8009404:	4619      	mov	r1, r3
 8009406:	480e      	ldr	r0, [pc, #56]	; (8009440 <xTaskRemoveFromEventList+0xb8>)
 8009408:	f7ff fae9 	bl	80089de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <xTaskRemoveFromEventList+0xbc>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	429a      	cmp	r2, r3
 8009418:	d905      	bls.n	8009426 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800941a:	2301      	movs	r3, #1
 800941c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800941e:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <xTaskRemoveFromEventList+0xc0>)
 8009420:	2201      	movs	r2, #1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e001      	b.n	800942a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800942a:	697b      	ldr	r3, [r7, #20]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20000668 	.word	0x20000668
 8009438:	20000648 	.word	0x20000648
 800943c:	20000544 	.word	0x20000544
 8009440:	20000600 	.word	0x20000600
 8009444:	20000540 	.word	0x20000540
 8009448:	20000654 	.word	0x20000654

0800944c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009454:	f000 f852 	bl	80094fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <prvIdleTask+0x28>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d9f9      	bls.n	8009454 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009460:	4b05      	ldr	r3, [pc, #20]	; (8009478 <prvIdleTask+0x2c>)
 8009462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009470:	e7f0      	b.n	8009454 <prvIdleTask+0x8>
 8009472:	bf00      	nop
 8009474:	20000544 	.word	0x20000544
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009482:	2300      	movs	r3, #0
 8009484:	607b      	str	r3, [r7, #4]
 8009486:	e00c      	b.n	80094a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4a12      	ldr	r2, [pc, #72]	; (80094dc <prvInitialiseTaskLists+0x60>)
 8009494:	4413      	add	r3, r2
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff fa74 	bl	8008984 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3301      	adds	r3, #1
 80094a0:	607b      	str	r3, [r7, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b06      	cmp	r3, #6
 80094a6:	d9ef      	bls.n	8009488 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094a8:	480d      	ldr	r0, [pc, #52]	; (80094e0 <prvInitialiseTaskLists+0x64>)
 80094aa:	f7ff fa6b 	bl	8008984 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094ae:	480d      	ldr	r0, [pc, #52]	; (80094e4 <prvInitialiseTaskLists+0x68>)
 80094b0:	f7ff fa68 	bl	8008984 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094b4:	480c      	ldr	r0, [pc, #48]	; (80094e8 <prvInitialiseTaskLists+0x6c>)
 80094b6:	f7ff fa65 	bl	8008984 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094ba:	480c      	ldr	r0, [pc, #48]	; (80094ec <prvInitialiseTaskLists+0x70>)
 80094bc:	f7ff fa62 	bl	8008984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094c0:	480b      	ldr	r0, [pc, #44]	; (80094f0 <prvInitialiseTaskLists+0x74>)
 80094c2:	f7ff fa5f 	bl	8008984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80094c6:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <prvInitialiseTaskLists+0x78>)
 80094c8:	4a05      	ldr	r2, [pc, #20]	; (80094e0 <prvInitialiseTaskLists+0x64>)
 80094ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094cc:	4b0a      	ldr	r3, [pc, #40]	; (80094f8 <prvInitialiseTaskLists+0x7c>)
 80094ce:	4a05      	ldr	r2, [pc, #20]	; (80094e4 <prvInitialiseTaskLists+0x68>)
 80094d0:	601a      	str	r2, [r3, #0]
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20000544 	.word	0x20000544
 80094e0:	200005d0 	.word	0x200005d0
 80094e4:	200005e4 	.word	0x200005e4
 80094e8:	20000600 	.word	0x20000600
 80094ec:	20000614 	.word	0x20000614
 80094f0:	2000062c 	.word	0x2000062c
 80094f4:	200005f8 	.word	0x200005f8
 80094f8:	200005fc 	.word	0x200005fc

080094fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009502:	e019      	b.n	8009538 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009504:	f000 f9ee 	bl	80098e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009508:	4b10      	ldr	r3, [pc, #64]	; (800954c <prvCheckTasksWaitingTermination+0x50>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3304      	adds	r3, #4
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff fabf 	bl	8008a98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800951a:	4b0d      	ldr	r3, [pc, #52]	; (8009550 <prvCheckTasksWaitingTermination+0x54>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3b01      	subs	r3, #1
 8009520:	4a0b      	ldr	r2, [pc, #44]	; (8009550 <prvCheckTasksWaitingTermination+0x54>)
 8009522:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009524:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <prvCheckTasksWaitingTermination+0x58>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3b01      	subs	r3, #1
 800952a:	4a0a      	ldr	r2, [pc, #40]	; (8009554 <prvCheckTasksWaitingTermination+0x58>)
 800952c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800952e:	f000 fa09 	bl	8009944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f810 	bl	8009558 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009538:	4b06      	ldr	r3, [pc, #24]	; (8009554 <prvCheckTasksWaitingTermination+0x58>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e1      	bne.n	8009504 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000614 	.word	0x20000614
 8009550:	20000640 	.word	0x20000640
 8009554:	20000628 	.word	0x20000628

08009558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	334c      	adds	r3, #76	; 0x4c
 8009564:	4618      	mov	r0, r3
 8009566:	f001 fa45 	bl	800a9f4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fb66 	bl	8009c40 <vPortFree>
			vPortFree( pxTCB );
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fb63 	bl	8009c40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800958a:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <prvResetNextTaskUnblockTime+0x38>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d104      	bne.n	800959e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009594:	4b0a      	ldr	r3, [pc, #40]	; (80095c0 <prvResetNextTaskUnblockTime+0x3c>)
 8009596:	f04f 32ff 	mov.w	r2, #4294967295
 800959a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800959c:	e008      	b.n	80095b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959e:	4b07      	ldr	r3, [pc, #28]	; (80095bc <prvResetNextTaskUnblockTime+0x38>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	4a04      	ldr	r2, [pc, #16]	; (80095c0 <prvResetNextTaskUnblockTime+0x3c>)
 80095ae:	6013      	str	r3, [r2, #0]
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	200005f8 	.word	0x200005f8
 80095c0:	20000660 	.word	0x20000660

080095c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095ce:	4b29      	ldr	r3, [pc, #164]	; (8009674 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095d4:	4b28      	ldr	r3, [pc, #160]	; (8009678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3304      	adds	r3, #4
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff fa5c 	bl	8008a98 <uxListRemove>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10b      	bne.n	80095fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095e6:	4b24      	ldr	r3, [pc, #144]	; (8009678 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	2201      	movs	r2, #1
 80095ee:	fa02 f303 	lsl.w	r3, r2, r3
 80095f2:	43da      	mvns	r2, r3
 80095f4:	4b21      	ldr	r3, [pc, #132]	; (800967c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4013      	ands	r3, r2
 80095fa:	4a20      	ldr	r2, [pc, #128]	; (800967c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d10a      	bne.n	800961c <prvAddCurrentTaskToDelayedList+0x58>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800960c:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3304      	adds	r3, #4
 8009612:	4619      	mov	r1, r3
 8009614:	481a      	ldr	r0, [pc, #104]	; (8009680 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009616:	f7ff f9e2 	bl	80089de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800961a:	e026      	b.n	800966a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4413      	add	r3, r2
 8009622:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009624:	4b14      	ldr	r3, [pc, #80]	; (8009678 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	429a      	cmp	r2, r3
 8009632:	d209      	bcs.n	8009648 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009634:	4b13      	ldr	r3, [pc, #76]	; (8009684 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	4b0f      	ldr	r3, [pc, #60]	; (8009678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3304      	adds	r3, #4
 800963e:	4619      	mov	r1, r3
 8009640:	4610      	mov	r0, r2
 8009642:	f7ff f9f0 	bl	8008a26 <vListInsert>
}
 8009646:	e010      	b.n	800966a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009648:	4b0f      	ldr	r3, [pc, #60]	; (8009688 <prvAddCurrentTaskToDelayedList+0xc4>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <prvAddCurrentTaskToDelayedList+0xb4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3304      	adds	r3, #4
 8009652:	4619      	mov	r1, r3
 8009654:	4610      	mov	r0, r2
 8009656:	f7ff f9e6 	bl	8008a26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800965a:	4b0c      	ldr	r3, [pc, #48]	; (800968c <prvAddCurrentTaskToDelayedList+0xc8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	429a      	cmp	r2, r3
 8009662:	d202      	bcs.n	800966a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009664:	4a09      	ldr	r2, [pc, #36]	; (800968c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6013      	str	r3, [r2, #0]
}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000644 	.word	0x20000644
 8009678:	20000540 	.word	0x20000540
 800967c:	20000648 	.word	0x20000648
 8009680:	2000062c 	.word	0x2000062c
 8009684:	200005fc 	.word	0x200005fc
 8009688:	200005f8 	.word	0x200005f8
 800968c:	20000660 	.word	0x20000660

08009690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3b04      	subs	r3, #4
 80096a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80096a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3b04      	subs	r3, #4
 80096ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f023 0201 	bic.w	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3b04      	subs	r3, #4
 80096be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096c0:	4a0c      	ldr	r2, [pc, #48]	; (80096f4 <pxPortInitialiseStack+0x64>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3b14      	subs	r3, #20
 80096ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3b04      	subs	r3, #4
 80096d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f06f 0202 	mvn.w	r2, #2
 80096de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3b20      	subs	r3, #32
 80096e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3714      	adds	r7, #20
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	080096f9 	.word	0x080096f9

080096f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009702:	4b12      	ldr	r3, [pc, #72]	; (800974c <prvTaskExitError+0x54>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970a:	d00a      	beq.n	8009722 <prvTaskExitError+0x2a>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	60fb      	str	r3, [r7, #12]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <prvTaskExitError+0x28>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60bb      	str	r3, [r7, #8]
}
 8009734:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009736:	bf00      	nop
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0fc      	beq.n	8009738 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr
 800974c:	20000014 	.word	0x20000014

08009750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009750:	4b07      	ldr	r3, [pc, #28]	; (8009770 <pxCurrentTCBConst2>)
 8009752:	6819      	ldr	r1, [r3, #0]
 8009754:	6808      	ldr	r0, [r1, #0]
 8009756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	f380 8809 	msr	PSP, r0
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f04f 0000 	mov.w	r0, #0
 8009766:	f380 8811 	msr	BASEPRI, r0
 800976a:	4770      	bx	lr
 800976c:	f3af 8000 	nop.w

08009770 <pxCurrentTCBConst2>:
 8009770:	20000540 	.word	0x20000540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop

08009778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009778:	4808      	ldr	r0, [pc, #32]	; (800979c <prvPortStartFirstTask+0x24>)
 800977a:	6800      	ldr	r0, [r0, #0]
 800977c:	6800      	ldr	r0, [r0, #0]
 800977e:	f380 8808 	msr	MSP, r0
 8009782:	f04f 0000 	mov.w	r0, #0
 8009786:	f380 8814 	msr	CONTROL, r0
 800978a:	b662      	cpsie	i
 800978c:	b661      	cpsie	f
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	df00      	svc	0
 8009798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800979a:	bf00      	nop
 800979c:	e000ed08 	.word	0xe000ed08

080097a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097a6:	4b46      	ldr	r3, [pc, #280]	; (80098c0 <xPortStartScheduler+0x120>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a46      	ldr	r2, [pc, #280]	; (80098c4 <xPortStartScheduler+0x124>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d10a      	bne.n	80097c6 <xPortStartScheduler+0x26>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	613b      	str	r3, [r7, #16]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097c6:	4b3e      	ldr	r3, [pc, #248]	; (80098c0 <xPortStartScheduler+0x120>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a3f      	ldr	r2, [pc, #252]	; (80098c8 <xPortStartScheduler+0x128>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d10a      	bne.n	80097e6 <xPortStartScheduler+0x46>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	60fb      	str	r3, [r7, #12]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097e6:	4b39      	ldr	r3, [pc, #228]	; (80098cc <xPortStartScheduler+0x12c>)
 80097e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	22ff      	movs	r2, #255	; 0xff
 80097f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	b2db      	uxtb	r3, r3
 8009804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009808:	b2da      	uxtb	r2, r3
 800980a:	4b31      	ldr	r3, [pc, #196]	; (80098d0 <xPortStartScheduler+0x130>)
 800980c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800980e:	4b31      	ldr	r3, [pc, #196]	; (80098d4 <xPortStartScheduler+0x134>)
 8009810:	2207      	movs	r2, #7
 8009812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009814:	e009      	b.n	800982a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009816:	4b2f      	ldr	r3, [pc, #188]	; (80098d4 <xPortStartScheduler+0x134>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3b01      	subs	r3, #1
 800981c:	4a2d      	ldr	r2, [pc, #180]	; (80098d4 <xPortStartScheduler+0x134>)
 800981e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	005b      	lsls	r3, r3, #1
 8009826:	b2db      	uxtb	r3, r3
 8009828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009832:	2b80      	cmp	r3, #128	; 0x80
 8009834:	d0ef      	beq.n	8009816 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009836:	4b27      	ldr	r3, [pc, #156]	; (80098d4 <xPortStartScheduler+0x134>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f1c3 0307 	rsb	r3, r3, #7
 800983e:	2b04      	cmp	r3, #4
 8009840:	d00a      	beq.n	8009858 <xPortStartScheduler+0xb8>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	60bb      	str	r3, [r7, #8]
}
 8009854:	bf00      	nop
 8009856:	e7fe      	b.n	8009856 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009858:	4b1e      	ldr	r3, [pc, #120]	; (80098d4 <xPortStartScheduler+0x134>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	021b      	lsls	r3, r3, #8
 800985e:	4a1d      	ldr	r2, [pc, #116]	; (80098d4 <xPortStartScheduler+0x134>)
 8009860:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009862:	4b1c      	ldr	r3, [pc, #112]	; (80098d4 <xPortStartScheduler+0x134>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800986a:	4a1a      	ldr	r2, [pc, #104]	; (80098d4 <xPortStartScheduler+0x134>)
 800986c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	b2da      	uxtb	r2, r3
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009876:	4b18      	ldr	r3, [pc, #96]	; (80098d8 <xPortStartScheduler+0x138>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a17      	ldr	r2, [pc, #92]	; (80098d8 <xPortStartScheduler+0x138>)
 800987c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <xPortStartScheduler+0x138>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a14      	ldr	r2, [pc, #80]	; (80098d8 <xPortStartScheduler+0x138>)
 8009888:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800988c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800988e:	f000 f8dd 	bl	8009a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009892:	4b12      	ldr	r3, [pc, #72]	; (80098dc <xPortStartScheduler+0x13c>)
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009898:	f000 f8fc 	bl	8009a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800989c:	4b10      	ldr	r3, [pc, #64]	; (80098e0 <xPortStartScheduler+0x140>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a0f      	ldr	r2, [pc, #60]	; (80098e0 <xPortStartScheduler+0x140>)
 80098a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098a8:	f7ff ff66 	bl	8009778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098ac:	f7ff fd0a 	bl	80092c4 <vTaskSwitchContext>
	prvTaskExitError();
 80098b0:	f7ff ff22 	bl	80096f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	e000ed00 	.word	0xe000ed00
 80098c4:	410fc271 	.word	0x410fc271
 80098c8:	410fc270 	.word	0x410fc270
 80098cc:	e000e400 	.word	0xe000e400
 80098d0:	2000066c 	.word	0x2000066c
 80098d4:	20000670 	.word	0x20000670
 80098d8:	e000ed20 	.word	0xe000ed20
 80098dc:	20000014 	.word	0x20000014
 80098e0:	e000ef34 	.word	0xe000ef34

080098e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	607b      	str	r3, [r7, #4]
}
 80098fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098fe:	4b0f      	ldr	r3, [pc, #60]	; (800993c <vPortEnterCritical+0x58>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3301      	adds	r3, #1
 8009904:	4a0d      	ldr	r2, [pc, #52]	; (800993c <vPortEnterCritical+0x58>)
 8009906:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <vPortEnterCritical+0x58>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d10f      	bne.n	8009930 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009910:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <vPortEnterCritical+0x5c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <vPortEnterCritical+0x4c>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	603b      	str	r3, [r7, #0]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <vPortEnterCritical+0x4a>
	}
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	20000014 	.word	0x20000014
 8009940:	e000ed04 	.word	0xe000ed04

08009944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800994a:	4b12      	ldr	r3, [pc, #72]	; (8009994 <vPortExitCritical+0x50>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <vPortExitCritical+0x24>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	607b      	str	r3, [r7, #4]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009968:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <vPortExitCritical+0x50>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3b01      	subs	r3, #1
 800996e:	4a09      	ldr	r2, [pc, #36]	; (8009994 <vPortExitCritical+0x50>)
 8009970:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009972:	4b08      	ldr	r3, [pc, #32]	; (8009994 <vPortExitCritical+0x50>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d105      	bne.n	8009986 <vPortExitCritical+0x42>
 800997a:	2300      	movs	r3, #0
 800997c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009984:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000014 	.word	0x20000014
	...

080099a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099a0:	f3ef 8009 	mrs	r0, PSP
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <pxCurrentTCBConst>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	f01e 0f10 	tst.w	lr, #16
 80099b0:	bf08      	it	eq
 80099b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	6010      	str	r0, [r2, #0]
 80099bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099c4:	f380 8811 	msr	BASEPRI, r0
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	f3bf 8f6f 	isb	sy
 80099d0:	f7ff fc78 	bl	80092c4 <vTaskSwitchContext>
 80099d4:	f04f 0000 	mov.w	r0, #0
 80099d8:	f380 8811 	msr	BASEPRI, r0
 80099dc:	bc09      	pop	{r0, r3}
 80099de:	6819      	ldr	r1, [r3, #0]
 80099e0:	6808      	ldr	r0, [r1, #0]
 80099e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e6:	f01e 0f10 	tst.w	lr, #16
 80099ea:	bf08      	it	eq
 80099ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099f0:	f380 8809 	msr	PSP, r0
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	f3af 8000 	nop.w

08009a00 <pxCurrentTCBConst>:
 8009a00:	20000540 	.word	0x20000540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop

08009a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	607b      	str	r3, [r7, #4]
}
 8009a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a22:	f7ff fb97 	bl	8009154 <xTaskIncrementTick>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a2c:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <SysTick_Handler+0x40>)
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	2300      	movs	r3, #0
 8009a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	f383 8811 	msr	BASEPRI, r3
}
 8009a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	e000ed04 	.word	0xe000ed04

08009a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a50:	4b0b      	ldr	r3, [pc, #44]	; (8009a80 <vPortSetupTimerInterrupt+0x34>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a56:	4b0b      	ldr	r3, [pc, #44]	; (8009a84 <vPortSetupTimerInterrupt+0x38>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a5c:	4b0a      	ldr	r3, [pc, #40]	; (8009a88 <vPortSetupTimerInterrupt+0x3c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a0a      	ldr	r2, [pc, #40]	; (8009a8c <vPortSetupTimerInterrupt+0x40>)
 8009a62:	fba2 2303 	umull	r2, r3, r2, r3
 8009a66:	099b      	lsrs	r3, r3, #6
 8009a68:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <vPortSetupTimerInterrupt+0x44>)
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a6e:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <vPortSetupTimerInterrupt+0x34>)
 8009a70:	2207      	movs	r2, #7
 8009a72:	601a      	str	r2, [r3, #0]
}
 8009a74:	bf00      	nop
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	e000e010 	.word	0xe000e010
 8009a84:	e000e018 	.word	0xe000e018
 8009a88:	20000008 	.word	0x20000008
 8009a8c:	10624dd3 	.word	0x10624dd3
 8009a90:	e000e014 	.word	0xe000e014

08009a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009aa4 <vPortEnableVFP+0x10>
 8009a98:	6801      	ldr	r1, [r0, #0]
 8009a9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a9e:	6001      	str	r1, [r0, #0]
 8009aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009aa2:	bf00      	nop
 8009aa4:	e000ed88 	.word	0xe000ed88

08009aa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08a      	sub	sp, #40	; 0x28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ab4:	f7ff faa4 	bl	8009000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ab8:	4b5b      	ldr	r3, [pc, #364]	; (8009c28 <pvPortMalloc+0x180>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ac0:	f000 f920 	bl	8009d04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ac4:	4b59      	ldr	r3, [pc, #356]	; (8009c2c <pvPortMalloc+0x184>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f040 8093 	bne.w	8009bf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01d      	beq.n	8009b14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ad8:	2208      	movs	r2, #8
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f003 0307 	and.w	r3, r3, #7
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d014      	beq.n	8009b14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f023 0307 	bic.w	r3, r3, #7
 8009af0:	3308      	adds	r3, #8
 8009af2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <pvPortMalloc+0x6c>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	617b      	str	r3, [r7, #20]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d06e      	beq.n	8009bf8 <pvPortMalloc+0x150>
 8009b1a:	4b45      	ldr	r3, [pc, #276]	; (8009c30 <pvPortMalloc+0x188>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d869      	bhi.n	8009bf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b24:	4b43      	ldr	r3, [pc, #268]	; (8009c34 <pvPortMalloc+0x18c>)
 8009b26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b28:	4b42      	ldr	r3, [pc, #264]	; (8009c34 <pvPortMalloc+0x18c>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b2e:	e004      	b.n	8009b3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d903      	bls.n	8009b4c <pvPortMalloc+0xa4>
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1f1      	bne.n	8009b30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b4c:	4b36      	ldr	r3, [pc, #216]	; (8009c28 <pvPortMalloc+0x180>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d050      	beq.n	8009bf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2208      	movs	r2, #8
 8009b5c:	4413      	add	r3, r2
 8009b5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	2308      	movs	r3, #8
 8009b72:	005b      	lsls	r3, r3, #1
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d91f      	bls.n	8009bb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	f003 0307 	and.w	r3, r3, #7
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <pvPortMalloc+0xf8>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	613b      	str	r3, [r7, #16]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	1ad2      	subs	r2, r2, r3
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bb2:	69b8      	ldr	r0, [r7, #24]
 8009bb4:	f000 f908 	bl	8009dc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bb8:	4b1d      	ldr	r3, [pc, #116]	; (8009c30 <pvPortMalloc+0x188>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	4a1b      	ldr	r2, [pc, #108]	; (8009c30 <pvPortMalloc+0x188>)
 8009bc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bc6:	4b1a      	ldr	r3, [pc, #104]	; (8009c30 <pvPortMalloc+0x188>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	4b1b      	ldr	r3, [pc, #108]	; (8009c38 <pvPortMalloc+0x190>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d203      	bcs.n	8009bda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bd2:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <pvPortMalloc+0x188>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <pvPortMalloc+0x190>)
 8009bd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	4b13      	ldr	r3, [pc, #76]	; (8009c2c <pvPortMalloc+0x184>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <pvPortMalloc+0x194>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	4a11      	ldr	r2, [pc, #68]	; (8009c3c <pvPortMalloc+0x194>)
 8009bf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bf8:	f7ff fa10 	bl	800901c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f003 0307 	and.w	r3, r3, #7
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <pvPortMalloc+0x174>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60fb      	str	r3, [r7, #12]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <pvPortMalloc+0x172>
	return pvReturn;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3728      	adds	r7, #40	; 0x28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	2000127c 	.word	0x2000127c
 8009c2c:	20001290 	.word	0x20001290
 8009c30:	20001280 	.word	0x20001280
 8009c34:	20001274 	.word	0x20001274
 8009c38:	20001284 	.word	0x20001284
 8009c3c:	20001288 	.word	0x20001288

08009c40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d04d      	beq.n	8009cee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c52:	2308      	movs	r3, #8
 8009c54:	425b      	negs	r3, r3
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4413      	add	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <vPortFree+0xb8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <vPortFree+0x44>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	60fb      	str	r3, [r7, #12]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <vPortFree+0x62>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	60bb      	str	r3, [r7, #8]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	4b14      	ldr	r3, [pc, #80]	; (8009cf8 <vPortFree+0xb8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01e      	beq.n	8009cee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11a      	bne.n	8009cee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	4b0e      	ldr	r3, [pc, #56]	; (8009cf8 <vPortFree+0xb8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	401a      	ands	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc8:	f7ff f99a 	bl	8009000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <vPortFree+0xbc>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	4a09      	ldr	r2, [pc, #36]	; (8009cfc <vPortFree+0xbc>)
 8009cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f000 f874 	bl	8009dc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ce0:	4b07      	ldr	r3, [pc, #28]	; (8009d00 <vPortFree+0xc0>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	4a06      	ldr	r2, [pc, #24]	; (8009d00 <vPortFree+0xc0>)
 8009ce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cea:	f7ff f997 	bl	800901c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cee:	bf00      	nop
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20001290 	.word	0x20001290
 8009cfc:	20001280 	.word	0x20001280
 8009d00:	2000128c 	.word	0x2000128c

08009d04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009d0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d10:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <prvHeapInit+0xac>)
 8009d12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0307 	and.w	r3, r3, #7
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3307      	adds	r3, #7
 8009d22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	4a1f      	ldr	r2, [pc, #124]	; (8009db0 <prvHeapInit+0xac>)
 8009d34:	4413      	add	r3, r2
 8009d36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d3c:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <prvHeapInit+0xb0>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d42:	4b1c      	ldr	r3, [pc, #112]	; (8009db4 <prvHeapInit+0xb0>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d50:	2208      	movs	r2, #8
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0307 	bic.w	r3, r3, #7
 8009d5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4a15      	ldr	r2, [pc, #84]	; (8009db8 <prvHeapInit+0xb4>)
 8009d64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d66:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <prvHeapInit+0xb4>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d6e:	4b12      	ldr	r3, [pc, #72]	; (8009db8 <prvHeapInit+0xb4>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d84:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <prvHeapInit+0xb4>)
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	4a0a      	ldr	r2, [pc, #40]	; (8009dbc <prvHeapInit+0xb8>)
 8009d92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	4a09      	ldr	r2, [pc, #36]	; (8009dc0 <prvHeapInit+0xbc>)
 8009d9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d9c:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <prvHeapInit+0xc0>)
 8009d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009da2:	601a      	str	r2, [r3, #0]
}
 8009da4:	bf00      	nop
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	20000674 	.word	0x20000674
 8009db4:	20001274 	.word	0x20001274
 8009db8:	2000127c 	.word	0x2000127c
 8009dbc:	20001284 	.word	0x20001284
 8009dc0:	20001280 	.word	0x20001280
 8009dc4:	20001290 	.word	0x20001290

08009dc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dd0:	4b28      	ldr	r3, [pc, #160]	; (8009e74 <prvInsertBlockIntoFreeList+0xac>)
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e002      	b.n	8009ddc <prvInsertBlockIntoFreeList+0x14>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d8f7      	bhi.n	8009dd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	4413      	add	r3, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d108      	bne.n	8009e0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	441a      	add	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	441a      	add	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d118      	bne.n	8009e50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <prvInsertBlockIntoFreeList+0xb0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d00d      	beq.n	8009e46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	441a      	add	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	e008      	b.n	8009e58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <prvInsertBlockIntoFreeList+0xb0>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e003      	b.n	8009e58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d002      	beq.n	8009e66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e66:	bf00      	nop
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20001274 	.word	0x20001274
 8009e78:	2000127c 	.word	0x2000127c

08009e7c <__cvt>:
 8009e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	ec55 4b10 	vmov	r4, r5, d0
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	460e      	mov	r6, r1
 8009e88:	4619      	mov	r1, r3
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	bfbb      	ittet	lt
 8009e8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e92:	461d      	movlt	r5, r3
 8009e94:	2300      	movge	r3, #0
 8009e96:	232d      	movlt	r3, #45	; 0x2d
 8009e98:	700b      	strb	r3, [r1, #0]
 8009e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ea0:	4691      	mov	r9, r2
 8009ea2:	f023 0820 	bic.w	r8, r3, #32
 8009ea6:	bfbc      	itt	lt
 8009ea8:	4622      	movlt	r2, r4
 8009eaa:	4614      	movlt	r4, r2
 8009eac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009eb0:	d005      	beq.n	8009ebe <__cvt+0x42>
 8009eb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eb6:	d100      	bne.n	8009eba <__cvt+0x3e>
 8009eb8:	3601      	adds	r6, #1
 8009eba:	2102      	movs	r1, #2
 8009ebc:	e000      	b.n	8009ec0 <__cvt+0x44>
 8009ebe:	2103      	movs	r1, #3
 8009ec0:	ab03      	add	r3, sp, #12
 8009ec2:	9301      	str	r3, [sp, #4]
 8009ec4:	ab02      	add	r3, sp, #8
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	ec45 4b10 	vmov	d0, r4, r5
 8009ecc:	4653      	mov	r3, sl
 8009ece:	4632      	mov	r2, r6
 8009ed0:	f000 fee2 	bl	800ac98 <_dtoa_r>
 8009ed4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ed8:	4607      	mov	r7, r0
 8009eda:	d102      	bne.n	8009ee2 <__cvt+0x66>
 8009edc:	f019 0f01 	tst.w	r9, #1
 8009ee0:	d022      	beq.n	8009f28 <__cvt+0xac>
 8009ee2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ee6:	eb07 0906 	add.w	r9, r7, r6
 8009eea:	d110      	bne.n	8009f0e <__cvt+0x92>
 8009eec:	783b      	ldrb	r3, [r7, #0]
 8009eee:	2b30      	cmp	r3, #48	; 0x30
 8009ef0:	d10a      	bne.n	8009f08 <__cvt+0x8c>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	4629      	mov	r1, r5
 8009efa:	f7f6 fe0d 	bl	8000b18 <__aeabi_dcmpeq>
 8009efe:	b918      	cbnz	r0, 8009f08 <__cvt+0x8c>
 8009f00:	f1c6 0601 	rsb	r6, r6, #1
 8009f04:	f8ca 6000 	str.w	r6, [sl]
 8009f08:	f8da 3000 	ldr.w	r3, [sl]
 8009f0c:	4499      	add	r9, r3
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2300      	movs	r3, #0
 8009f12:	4620      	mov	r0, r4
 8009f14:	4629      	mov	r1, r5
 8009f16:	f7f6 fdff 	bl	8000b18 <__aeabi_dcmpeq>
 8009f1a:	b108      	cbz	r0, 8009f20 <__cvt+0xa4>
 8009f1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f20:	2230      	movs	r2, #48	; 0x30
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	454b      	cmp	r3, r9
 8009f26:	d307      	bcc.n	8009f38 <__cvt+0xbc>
 8009f28:	9b03      	ldr	r3, [sp, #12]
 8009f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f2c:	1bdb      	subs	r3, r3, r7
 8009f2e:	4638      	mov	r0, r7
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	b004      	add	sp, #16
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	1c59      	adds	r1, r3, #1
 8009f3a:	9103      	str	r1, [sp, #12]
 8009f3c:	701a      	strb	r2, [r3, #0]
 8009f3e:	e7f0      	b.n	8009f22 <__cvt+0xa6>

08009f40 <__exponent>:
 8009f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f42:	4603      	mov	r3, r0
 8009f44:	2900      	cmp	r1, #0
 8009f46:	bfb8      	it	lt
 8009f48:	4249      	neglt	r1, r1
 8009f4a:	f803 2b02 	strb.w	r2, [r3], #2
 8009f4e:	bfb4      	ite	lt
 8009f50:	222d      	movlt	r2, #45	; 0x2d
 8009f52:	222b      	movge	r2, #43	; 0x2b
 8009f54:	2909      	cmp	r1, #9
 8009f56:	7042      	strb	r2, [r0, #1]
 8009f58:	dd2a      	ble.n	8009fb0 <__exponent+0x70>
 8009f5a:	f10d 0207 	add.w	r2, sp, #7
 8009f5e:	4617      	mov	r7, r2
 8009f60:	260a      	movs	r6, #10
 8009f62:	4694      	mov	ip, r2
 8009f64:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f68:	fb06 1415 	mls	r4, r6, r5, r1
 8009f6c:	3430      	adds	r4, #48	; 0x30
 8009f6e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009f72:	460c      	mov	r4, r1
 8009f74:	2c63      	cmp	r4, #99	; 0x63
 8009f76:	f102 32ff 	add.w	r2, r2, #4294967295
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	dcf1      	bgt.n	8009f62 <__exponent+0x22>
 8009f7e:	3130      	adds	r1, #48	; 0x30
 8009f80:	f1ac 0402 	sub.w	r4, ip, #2
 8009f84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f88:	1c41      	adds	r1, r0, #1
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	42ba      	cmp	r2, r7
 8009f8e:	d30a      	bcc.n	8009fa6 <__exponent+0x66>
 8009f90:	f10d 0209 	add.w	r2, sp, #9
 8009f94:	eba2 020c 	sub.w	r2, r2, ip
 8009f98:	42bc      	cmp	r4, r7
 8009f9a:	bf88      	it	hi
 8009f9c:	2200      	movhi	r2, #0
 8009f9e:	4413      	add	r3, r2
 8009fa0:	1a18      	subs	r0, r3, r0
 8009fa2:	b003      	add	sp, #12
 8009fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009faa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009fae:	e7ed      	b.n	8009f8c <__exponent+0x4c>
 8009fb0:	2330      	movs	r3, #48	; 0x30
 8009fb2:	3130      	adds	r1, #48	; 0x30
 8009fb4:	7083      	strb	r3, [r0, #2]
 8009fb6:	70c1      	strb	r1, [r0, #3]
 8009fb8:	1d03      	adds	r3, r0, #4
 8009fba:	e7f1      	b.n	8009fa0 <__exponent+0x60>

08009fbc <_printf_float>:
 8009fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc0:	ed2d 8b02 	vpush	{d8}
 8009fc4:	b08d      	sub	sp, #52	; 0x34
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009fcc:	4616      	mov	r6, r2
 8009fce:	461f      	mov	r7, r3
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	f000 fcfb 	bl	800a9cc <_localeconv_r>
 8009fd6:	f8d0 a000 	ldr.w	sl, [r0]
 8009fda:	4650      	mov	r0, sl
 8009fdc:	f7f6 f970 	bl	80002c0 <strlen>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8009fec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	f023 0307 	bic.w	r3, r3, #7
 8009ff6:	f103 0208 	add.w	r2, r3, #8
 8009ffa:	f8c8 2000 	str.w	r2, [r8]
 8009ffe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a002:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	f8cd 8018 	str.w	r8, [sp, #24]
 800a00c:	ee08 0a10 	vmov	s16, r0
 800a010:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a018:	4b9e      	ldr	r3, [pc, #632]	; (800a294 <_printf_float+0x2d8>)
 800a01a:	f04f 32ff 	mov.w	r2, #4294967295
 800a01e:	f7f6 fdad 	bl	8000b7c <__aeabi_dcmpun>
 800a022:	bb88      	cbnz	r0, 800a088 <_printf_float+0xcc>
 800a024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a028:	4b9a      	ldr	r3, [pc, #616]	; (800a294 <_printf_float+0x2d8>)
 800a02a:	f04f 32ff 	mov.w	r2, #4294967295
 800a02e:	f7f6 fd87 	bl	8000b40 <__aeabi_dcmple>
 800a032:	bb48      	cbnz	r0, 800a088 <_printf_float+0xcc>
 800a034:	2200      	movs	r2, #0
 800a036:	2300      	movs	r3, #0
 800a038:	4640      	mov	r0, r8
 800a03a:	4649      	mov	r1, r9
 800a03c:	f7f6 fd76 	bl	8000b2c <__aeabi_dcmplt>
 800a040:	b110      	cbz	r0, 800a048 <_printf_float+0x8c>
 800a042:	232d      	movs	r3, #45	; 0x2d
 800a044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a048:	4a93      	ldr	r2, [pc, #588]	; (800a298 <_printf_float+0x2dc>)
 800a04a:	4b94      	ldr	r3, [pc, #592]	; (800a29c <_printf_float+0x2e0>)
 800a04c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a050:	bf94      	ite	ls
 800a052:	4690      	movls	r8, r2
 800a054:	4698      	movhi	r8, r3
 800a056:	2303      	movs	r3, #3
 800a058:	6123      	str	r3, [r4, #16]
 800a05a:	9b05      	ldr	r3, [sp, #20]
 800a05c:	f023 0304 	bic.w	r3, r3, #4
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	f04f 0900 	mov.w	r9, #0
 800a066:	9700      	str	r7, [sp, #0]
 800a068:	4633      	mov	r3, r6
 800a06a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a06c:	4621      	mov	r1, r4
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 f9da 	bl	800a428 <_printf_common>
 800a074:	3001      	adds	r0, #1
 800a076:	f040 8090 	bne.w	800a19a <_printf_float+0x1de>
 800a07a:	f04f 30ff 	mov.w	r0, #4294967295
 800a07e:	b00d      	add	sp, #52	; 0x34
 800a080:	ecbd 8b02 	vpop	{d8}
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	4642      	mov	r2, r8
 800a08a:	464b      	mov	r3, r9
 800a08c:	4640      	mov	r0, r8
 800a08e:	4649      	mov	r1, r9
 800a090:	f7f6 fd74 	bl	8000b7c <__aeabi_dcmpun>
 800a094:	b140      	cbz	r0, 800a0a8 <_printf_float+0xec>
 800a096:	464b      	mov	r3, r9
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bfbc      	itt	lt
 800a09c:	232d      	movlt	r3, #45	; 0x2d
 800a09e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0a2:	4a7f      	ldr	r2, [pc, #508]	; (800a2a0 <_printf_float+0x2e4>)
 800a0a4:	4b7f      	ldr	r3, [pc, #508]	; (800a2a4 <_printf_float+0x2e8>)
 800a0a6:	e7d1      	b.n	800a04c <_printf_float+0x90>
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0ae:	9206      	str	r2, [sp, #24]
 800a0b0:	1c5a      	adds	r2, r3, #1
 800a0b2:	d13f      	bne.n	800a134 <_printf_float+0x178>
 800a0b4:	2306      	movs	r3, #6
 800a0b6:	6063      	str	r3, [r4, #4]
 800a0b8:	9b05      	ldr	r3, [sp, #20]
 800a0ba:	6861      	ldr	r1, [r4, #4]
 800a0bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9303      	str	r3, [sp, #12]
 800a0c4:	ab0a      	add	r3, sp, #40	; 0x28
 800a0c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a0ca:	ab09      	add	r3, sp, #36	; 0x24
 800a0cc:	ec49 8b10 	vmov	d0, r8, r9
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f7ff fecf 	bl	8009e7c <__cvt>
 800a0de:	9b06      	ldr	r3, [sp, #24]
 800a0e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0e2:	2b47      	cmp	r3, #71	; 0x47
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	d108      	bne.n	800a0fa <_printf_float+0x13e>
 800a0e8:	1cc8      	adds	r0, r1, #3
 800a0ea:	db02      	blt.n	800a0f2 <_printf_float+0x136>
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	dd41      	ble.n	800a176 <_printf_float+0x1ba>
 800a0f2:	f1ab 0302 	sub.w	r3, fp, #2
 800a0f6:	fa5f fb83 	uxtb.w	fp, r3
 800a0fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a0fe:	d820      	bhi.n	800a142 <_printf_float+0x186>
 800a100:	3901      	subs	r1, #1
 800a102:	465a      	mov	r2, fp
 800a104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a108:	9109      	str	r1, [sp, #36]	; 0x24
 800a10a:	f7ff ff19 	bl	8009f40 <__exponent>
 800a10e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a110:	1813      	adds	r3, r2, r0
 800a112:	2a01      	cmp	r2, #1
 800a114:	4681      	mov	r9, r0
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	dc02      	bgt.n	800a120 <_printf_float+0x164>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	07d2      	lsls	r2, r2, #31
 800a11e:	d501      	bpl.n	800a124 <_printf_float+0x168>
 800a120:	3301      	adds	r3, #1
 800a122:	6123      	str	r3, [r4, #16]
 800a124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d09c      	beq.n	800a066 <_printf_float+0xaa>
 800a12c:	232d      	movs	r3, #45	; 0x2d
 800a12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a132:	e798      	b.n	800a066 <_printf_float+0xaa>
 800a134:	9a06      	ldr	r2, [sp, #24]
 800a136:	2a47      	cmp	r2, #71	; 0x47
 800a138:	d1be      	bne.n	800a0b8 <_printf_float+0xfc>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1bc      	bne.n	800a0b8 <_printf_float+0xfc>
 800a13e:	2301      	movs	r3, #1
 800a140:	e7b9      	b.n	800a0b6 <_printf_float+0xfa>
 800a142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a146:	d118      	bne.n	800a17a <_printf_float+0x1be>
 800a148:	2900      	cmp	r1, #0
 800a14a:	6863      	ldr	r3, [r4, #4]
 800a14c:	dd0b      	ble.n	800a166 <_printf_float+0x1aa>
 800a14e:	6121      	str	r1, [r4, #16]
 800a150:	b913      	cbnz	r3, 800a158 <_printf_float+0x19c>
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	07d0      	lsls	r0, r2, #31
 800a156:	d502      	bpl.n	800a15e <_printf_float+0x1a2>
 800a158:	3301      	adds	r3, #1
 800a15a:	440b      	add	r3, r1
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a160:	f04f 0900 	mov.w	r9, #0
 800a164:	e7de      	b.n	800a124 <_printf_float+0x168>
 800a166:	b913      	cbnz	r3, 800a16e <_printf_float+0x1b2>
 800a168:	6822      	ldr	r2, [r4, #0]
 800a16a:	07d2      	lsls	r2, r2, #31
 800a16c:	d501      	bpl.n	800a172 <_printf_float+0x1b6>
 800a16e:	3302      	adds	r3, #2
 800a170:	e7f4      	b.n	800a15c <_printf_float+0x1a0>
 800a172:	2301      	movs	r3, #1
 800a174:	e7f2      	b.n	800a15c <_printf_float+0x1a0>
 800a176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a17c:	4299      	cmp	r1, r3
 800a17e:	db05      	blt.n	800a18c <_printf_float+0x1d0>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	6121      	str	r1, [r4, #16]
 800a184:	07d8      	lsls	r0, r3, #31
 800a186:	d5ea      	bpl.n	800a15e <_printf_float+0x1a2>
 800a188:	1c4b      	adds	r3, r1, #1
 800a18a:	e7e7      	b.n	800a15c <_printf_float+0x1a0>
 800a18c:	2900      	cmp	r1, #0
 800a18e:	bfd4      	ite	le
 800a190:	f1c1 0202 	rsble	r2, r1, #2
 800a194:	2201      	movgt	r2, #1
 800a196:	4413      	add	r3, r2
 800a198:	e7e0      	b.n	800a15c <_printf_float+0x1a0>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	055a      	lsls	r2, r3, #21
 800a19e:	d407      	bmi.n	800a1b0 <_printf_float+0x1f4>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	4642      	mov	r2, r8
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b8      	blx	r7
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d12c      	bne.n	800a208 <_printf_float+0x24c>
 800a1ae:	e764      	b.n	800a07a <_printf_float+0xbe>
 800a1b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1b4:	f240 80e0 	bls.w	800a378 <_printf_float+0x3bc>
 800a1b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f7f6 fcaa 	bl	8000b18 <__aeabi_dcmpeq>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d034      	beq.n	800a232 <_printf_float+0x276>
 800a1c8:	4a37      	ldr	r2, [pc, #220]	; (800a2a8 <_printf_float+0x2ec>)
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4631      	mov	r1, r6
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b8      	blx	r7
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	f43f af51 	beq.w	800a07a <_printf_float+0xbe>
 800a1d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	db02      	blt.n	800a1e6 <_printf_float+0x22a>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	07d8      	lsls	r0, r3, #31
 800a1e4:	d510      	bpl.n	800a208 <_printf_float+0x24c>
 800a1e6:	ee18 3a10 	vmov	r3, s16
 800a1ea:	4652      	mov	r2, sl
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	47b8      	blx	r7
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	f43f af41 	beq.w	800a07a <_printf_float+0xbe>
 800a1f8:	f04f 0800 	mov.w	r8, #0
 800a1fc:	f104 091a 	add.w	r9, r4, #26
 800a200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a202:	3b01      	subs	r3, #1
 800a204:	4543      	cmp	r3, r8
 800a206:	dc09      	bgt.n	800a21c <_printf_float+0x260>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	079b      	lsls	r3, r3, #30
 800a20c:	f100 8107 	bmi.w	800a41e <_printf_float+0x462>
 800a210:	68e0      	ldr	r0, [r4, #12]
 800a212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a214:	4298      	cmp	r0, r3
 800a216:	bfb8      	it	lt
 800a218:	4618      	movlt	r0, r3
 800a21a:	e730      	b.n	800a07e <_printf_float+0xc2>
 800a21c:	2301      	movs	r3, #1
 800a21e:	464a      	mov	r2, r9
 800a220:	4631      	mov	r1, r6
 800a222:	4628      	mov	r0, r5
 800a224:	47b8      	blx	r7
 800a226:	3001      	adds	r0, #1
 800a228:	f43f af27 	beq.w	800a07a <_printf_float+0xbe>
 800a22c:	f108 0801 	add.w	r8, r8, #1
 800a230:	e7e6      	b.n	800a200 <_printf_float+0x244>
 800a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	dc39      	bgt.n	800a2ac <_printf_float+0x2f0>
 800a238:	4a1b      	ldr	r2, [pc, #108]	; (800a2a8 <_printf_float+0x2ec>)
 800a23a:	2301      	movs	r3, #1
 800a23c:	4631      	mov	r1, r6
 800a23e:	4628      	mov	r0, r5
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	f43f af19 	beq.w	800a07a <_printf_float+0xbe>
 800a248:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a24c:	4313      	orrs	r3, r2
 800a24e:	d102      	bne.n	800a256 <_printf_float+0x29a>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	07d9      	lsls	r1, r3, #31
 800a254:	d5d8      	bpl.n	800a208 <_printf_float+0x24c>
 800a256:	ee18 3a10 	vmov	r3, s16
 800a25a:	4652      	mov	r2, sl
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f af09 	beq.w	800a07a <_printf_float+0xbe>
 800a268:	f04f 0900 	mov.w	r9, #0
 800a26c:	f104 0a1a 	add.w	sl, r4, #26
 800a270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a272:	425b      	negs	r3, r3
 800a274:	454b      	cmp	r3, r9
 800a276:	dc01      	bgt.n	800a27c <_printf_float+0x2c0>
 800a278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27a:	e792      	b.n	800a1a2 <_printf_float+0x1e6>
 800a27c:	2301      	movs	r3, #1
 800a27e:	4652      	mov	r2, sl
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f aef7 	beq.w	800a07a <_printf_float+0xbe>
 800a28c:	f109 0901 	add.w	r9, r9, #1
 800a290:	e7ee      	b.n	800a270 <_printf_float+0x2b4>
 800a292:	bf00      	nop
 800a294:	7fefffff 	.word	0x7fefffff
 800a298:	0800cd30 	.word	0x0800cd30
 800a29c:	0800cd34 	.word	0x0800cd34
 800a2a0:	0800cd38 	.word	0x0800cd38
 800a2a4:	0800cd3c 	.word	0x0800cd3c
 800a2a8:	0800cd40 	.word	0x0800cd40
 800a2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	bfa8      	it	ge
 800a2b4:	461a      	movge	r2, r3
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	4691      	mov	r9, r2
 800a2ba:	dc37      	bgt.n	800a32c <_printf_float+0x370>
 800a2bc:	f04f 0b00 	mov.w	fp, #0
 800a2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2c4:	f104 021a 	add.w	r2, r4, #26
 800a2c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2ca:	9305      	str	r3, [sp, #20]
 800a2cc:	eba3 0309 	sub.w	r3, r3, r9
 800a2d0:	455b      	cmp	r3, fp
 800a2d2:	dc33      	bgt.n	800a33c <_printf_float+0x380>
 800a2d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	db3b      	blt.n	800a354 <_printf_float+0x398>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	07da      	lsls	r2, r3, #31
 800a2e0:	d438      	bmi.n	800a354 <_printf_float+0x398>
 800a2e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a2e6:	eba2 0903 	sub.w	r9, r2, r3
 800a2ea:	9b05      	ldr	r3, [sp, #20]
 800a2ec:	1ad2      	subs	r2, r2, r3
 800a2ee:	4591      	cmp	r9, r2
 800a2f0:	bfa8      	it	ge
 800a2f2:	4691      	movge	r9, r2
 800a2f4:	f1b9 0f00 	cmp.w	r9, #0
 800a2f8:	dc35      	bgt.n	800a366 <_printf_float+0x3aa>
 800a2fa:	f04f 0800 	mov.w	r8, #0
 800a2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a302:	f104 0a1a 	add.w	sl, r4, #26
 800a306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	eba3 0309 	sub.w	r3, r3, r9
 800a310:	4543      	cmp	r3, r8
 800a312:	f77f af79 	ble.w	800a208 <_printf_float+0x24c>
 800a316:	2301      	movs	r3, #1
 800a318:	4652      	mov	r2, sl
 800a31a:	4631      	mov	r1, r6
 800a31c:	4628      	mov	r0, r5
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f aeaa 	beq.w	800a07a <_printf_float+0xbe>
 800a326:	f108 0801 	add.w	r8, r8, #1
 800a32a:	e7ec      	b.n	800a306 <_printf_float+0x34a>
 800a32c:	4613      	mov	r3, r2
 800a32e:	4631      	mov	r1, r6
 800a330:	4642      	mov	r2, r8
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	d1c0      	bne.n	800a2bc <_printf_float+0x300>
 800a33a:	e69e      	b.n	800a07a <_printf_float+0xbe>
 800a33c:	2301      	movs	r3, #1
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	9205      	str	r2, [sp, #20]
 800a344:	47b8      	blx	r7
 800a346:	3001      	adds	r0, #1
 800a348:	f43f ae97 	beq.w	800a07a <_printf_float+0xbe>
 800a34c:	9a05      	ldr	r2, [sp, #20]
 800a34e:	f10b 0b01 	add.w	fp, fp, #1
 800a352:	e7b9      	b.n	800a2c8 <_printf_float+0x30c>
 800a354:	ee18 3a10 	vmov	r3, s16
 800a358:	4652      	mov	r2, sl
 800a35a:	4631      	mov	r1, r6
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	d1be      	bne.n	800a2e2 <_printf_float+0x326>
 800a364:	e689      	b.n	800a07a <_printf_float+0xbe>
 800a366:	9a05      	ldr	r2, [sp, #20]
 800a368:	464b      	mov	r3, r9
 800a36a:	4442      	add	r2, r8
 800a36c:	4631      	mov	r1, r6
 800a36e:	4628      	mov	r0, r5
 800a370:	47b8      	blx	r7
 800a372:	3001      	adds	r0, #1
 800a374:	d1c1      	bne.n	800a2fa <_printf_float+0x33e>
 800a376:	e680      	b.n	800a07a <_printf_float+0xbe>
 800a378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a37a:	2a01      	cmp	r2, #1
 800a37c:	dc01      	bgt.n	800a382 <_printf_float+0x3c6>
 800a37e:	07db      	lsls	r3, r3, #31
 800a380:	d53a      	bpl.n	800a3f8 <_printf_float+0x43c>
 800a382:	2301      	movs	r3, #1
 800a384:	4642      	mov	r2, r8
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	47b8      	blx	r7
 800a38c:	3001      	adds	r0, #1
 800a38e:	f43f ae74 	beq.w	800a07a <_printf_float+0xbe>
 800a392:	ee18 3a10 	vmov	r3, s16
 800a396:	4652      	mov	r2, sl
 800a398:	4631      	mov	r1, r6
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b8      	blx	r7
 800a39e:	3001      	adds	r0, #1
 800a3a0:	f43f ae6b 	beq.w	800a07a <_printf_float+0xbe>
 800a3a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a3b0:	f7f6 fbb2 	bl	8000b18 <__aeabi_dcmpeq>
 800a3b4:	b9d8      	cbnz	r0, 800a3ee <_printf_float+0x432>
 800a3b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a3ba:	f108 0201 	add.w	r2, r8, #1
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d10e      	bne.n	800a3e6 <_printf_float+0x42a>
 800a3c8:	e657      	b.n	800a07a <_printf_float+0xbe>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	4652      	mov	r2, sl
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f43f ae50 	beq.w	800a07a <_printf_float+0xbe>
 800a3da:	f108 0801 	add.w	r8, r8, #1
 800a3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e0:	3b01      	subs	r3, #1
 800a3e2:	4543      	cmp	r3, r8
 800a3e4:	dcf1      	bgt.n	800a3ca <_printf_float+0x40e>
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a3ec:	e6da      	b.n	800a1a4 <_printf_float+0x1e8>
 800a3ee:	f04f 0800 	mov.w	r8, #0
 800a3f2:	f104 0a1a 	add.w	sl, r4, #26
 800a3f6:	e7f2      	b.n	800a3de <_printf_float+0x422>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	e7df      	b.n	800a3be <_printf_float+0x402>
 800a3fe:	2301      	movs	r3, #1
 800a400:	464a      	mov	r2, r9
 800a402:	4631      	mov	r1, r6
 800a404:	4628      	mov	r0, r5
 800a406:	47b8      	blx	r7
 800a408:	3001      	adds	r0, #1
 800a40a:	f43f ae36 	beq.w	800a07a <_printf_float+0xbe>
 800a40e:	f108 0801 	add.w	r8, r8, #1
 800a412:	68e3      	ldr	r3, [r4, #12]
 800a414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a416:	1a5b      	subs	r3, r3, r1
 800a418:	4543      	cmp	r3, r8
 800a41a:	dcf0      	bgt.n	800a3fe <_printf_float+0x442>
 800a41c:	e6f8      	b.n	800a210 <_printf_float+0x254>
 800a41e:	f04f 0800 	mov.w	r8, #0
 800a422:	f104 0919 	add.w	r9, r4, #25
 800a426:	e7f4      	b.n	800a412 <_printf_float+0x456>

0800a428 <_printf_common>:
 800a428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42c:	4616      	mov	r6, r2
 800a42e:	4699      	mov	r9, r3
 800a430:	688a      	ldr	r2, [r1, #8]
 800a432:	690b      	ldr	r3, [r1, #16]
 800a434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a438:	4293      	cmp	r3, r2
 800a43a:	bfb8      	it	lt
 800a43c:	4613      	movlt	r3, r2
 800a43e:	6033      	str	r3, [r6, #0]
 800a440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a444:	4607      	mov	r7, r0
 800a446:	460c      	mov	r4, r1
 800a448:	b10a      	cbz	r2, 800a44e <_printf_common+0x26>
 800a44a:	3301      	adds	r3, #1
 800a44c:	6033      	str	r3, [r6, #0]
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	0699      	lsls	r1, r3, #26
 800a452:	bf42      	ittt	mi
 800a454:	6833      	ldrmi	r3, [r6, #0]
 800a456:	3302      	addmi	r3, #2
 800a458:	6033      	strmi	r3, [r6, #0]
 800a45a:	6825      	ldr	r5, [r4, #0]
 800a45c:	f015 0506 	ands.w	r5, r5, #6
 800a460:	d106      	bne.n	800a470 <_printf_common+0x48>
 800a462:	f104 0a19 	add.w	sl, r4, #25
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	6832      	ldr	r2, [r6, #0]
 800a46a:	1a9b      	subs	r3, r3, r2
 800a46c:	42ab      	cmp	r3, r5
 800a46e:	dc26      	bgt.n	800a4be <_printf_common+0x96>
 800a470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a474:	1e13      	subs	r3, r2, #0
 800a476:	6822      	ldr	r2, [r4, #0]
 800a478:	bf18      	it	ne
 800a47a:	2301      	movne	r3, #1
 800a47c:	0692      	lsls	r2, r2, #26
 800a47e:	d42b      	bmi.n	800a4d8 <_printf_common+0xb0>
 800a480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a484:	4649      	mov	r1, r9
 800a486:	4638      	mov	r0, r7
 800a488:	47c0      	blx	r8
 800a48a:	3001      	adds	r0, #1
 800a48c:	d01e      	beq.n	800a4cc <_printf_common+0xa4>
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	6922      	ldr	r2, [r4, #16]
 800a492:	f003 0306 	and.w	r3, r3, #6
 800a496:	2b04      	cmp	r3, #4
 800a498:	bf02      	ittt	eq
 800a49a:	68e5      	ldreq	r5, [r4, #12]
 800a49c:	6833      	ldreq	r3, [r6, #0]
 800a49e:	1aed      	subeq	r5, r5, r3
 800a4a0:	68a3      	ldr	r3, [r4, #8]
 800a4a2:	bf0c      	ite	eq
 800a4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4a8:	2500      	movne	r5, #0
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	bfc4      	itt	gt
 800a4ae:	1a9b      	subgt	r3, r3, r2
 800a4b0:	18ed      	addgt	r5, r5, r3
 800a4b2:	2600      	movs	r6, #0
 800a4b4:	341a      	adds	r4, #26
 800a4b6:	42b5      	cmp	r5, r6
 800a4b8:	d11a      	bne.n	800a4f0 <_printf_common+0xc8>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e008      	b.n	800a4d0 <_printf_common+0xa8>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	4649      	mov	r1, r9
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	47c0      	blx	r8
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d103      	bne.n	800a4d4 <_printf_common+0xac>
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	e7c6      	b.n	800a466 <_printf_common+0x3e>
 800a4d8:	18e1      	adds	r1, r4, r3
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	2030      	movs	r0, #48	; 0x30
 800a4de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4e2:	4422      	add	r2, r4
 800a4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4ec:	3302      	adds	r3, #2
 800a4ee:	e7c7      	b.n	800a480 <_printf_common+0x58>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c0      	blx	r8
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d0e6      	beq.n	800a4cc <_printf_common+0xa4>
 800a4fe:	3601      	adds	r6, #1
 800a500:	e7d9      	b.n	800a4b6 <_printf_common+0x8e>
	...

0800a504 <_printf_i>:
 800a504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	7e0f      	ldrb	r7, [r1, #24]
 800a50a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a50c:	2f78      	cmp	r7, #120	; 0x78
 800a50e:	4691      	mov	r9, r2
 800a510:	4680      	mov	r8, r0
 800a512:	460c      	mov	r4, r1
 800a514:	469a      	mov	sl, r3
 800a516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a51a:	d807      	bhi.n	800a52c <_printf_i+0x28>
 800a51c:	2f62      	cmp	r7, #98	; 0x62
 800a51e:	d80a      	bhi.n	800a536 <_printf_i+0x32>
 800a520:	2f00      	cmp	r7, #0
 800a522:	f000 80d4 	beq.w	800a6ce <_printf_i+0x1ca>
 800a526:	2f58      	cmp	r7, #88	; 0x58
 800a528:	f000 80c0 	beq.w	800a6ac <_printf_i+0x1a8>
 800a52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a534:	e03a      	b.n	800a5ac <_printf_i+0xa8>
 800a536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a53a:	2b15      	cmp	r3, #21
 800a53c:	d8f6      	bhi.n	800a52c <_printf_i+0x28>
 800a53e:	a101      	add	r1, pc, #4	; (adr r1, 800a544 <_printf_i+0x40>)
 800a540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a544:	0800a59d 	.word	0x0800a59d
 800a548:	0800a5b1 	.word	0x0800a5b1
 800a54c:	0800a52d 	.word	0x0800a52d
 800a550:	0800a52d 	.word	0x0800a52d
 800a554:	0800a52d 	.word	0x0800a52d
 800a558:	0800a52d 	.word	0x0800a52d
 800a55c:	0800a5b1 	.word	0x0800a5b1
 800a560:	0800a52d 	.word	0x0800a52d
 800a564:	0800a52d 	.word	0x0800a52d
 800a568:	0800a52d 	.word	0x0800a52d
 800a56c:	0800a52d 	.word	0x0800a52d
 800a570:	0800a6b5 	.word	0x0800a6b5
 800a574:	0800a5dd 	.word	0x0800a5dd
 800a578:	0800a66f 	.word	0x0800a66f
 800a57c:	0800a52d 	.word	0x0800a52d
 800a580:	0800a52d 	.word	0x0800a52d
 800a584:	0800a6d7 	.word	0x0800a6d7
 800a588:	0800a52d 	.word	0x0800a52d
 800a58c:	0800a5dd 	.word	0x0800a5dd
 800a590:	0800a52d 	.word	0x0800a52d
 800a594:	0800a52d 	.word	0x0800a52d
 800a598:	0800a677 	.word	0x0800a677
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	1d1a      	adds	r2, r3, #4
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	602a      	str	r2, [r5, #0]
 800a5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e09f      	b.n	800a6f0 <_printf_i+0x1ec>
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	0607      	lsls	r7, r0, #24
 800a5b6:	f103 0104 	add.w	r1, r3, #4
 800a5ba:	6029      	str	r1, [r5, #0]
 800a5bc:	d501      	bpl.n	800a5c2 <_printf_i+0xbe>
 800a5be:	681e      	ldr	r6, [r3, #0]
 800a5c0:	e003      	b.n	800a5ca <_printf_i+0xc6>
 800a5c2:	0646      	lsls	r6, r0, #25
 800a5c4:	d5fb      	bpl.n	800a5be <_printf_i+0xba>
 800a5c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	da03      	bge.n	800a5d6 <_printf_i+0xd2>
 800a5ce:	232d      	movs	r3, #45	; 0x2d
 800a5d0:	4276      	negs	r6, r6
 800a5d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d6:	485a      	ldr	r0, [pc, #360]	; (800a740 <_printf_i+0x23c>)
 800a5d8:	230a      	movs	r3, #10
 800a5da:	e012      	b.n	800a602 <_printf_i+0xfe>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1d19      	adds	r1, r3, #4
 800a5e2:	6029      	str	r1, [r5, #0]
 800a5e4:	0605      	lsls	r5, r0, #24
 800a5e6:	d501      	bpl.n	800a5ec <_printf_i+0xe8>
 800a5e8:	681e      	ldr	r6, [r3, #0]
 800a5ea:	e002      	b.n	800a5f2 <_printf_i+0xee>
 800a5ec:	0641      	lsls	r1, r0, #25
 800a5ee:	d5fb      	bpl.n	800a5e8 <_printf_i+0xe4>
 800a5f0:	881e      	ldrh	r6, [r3, #0]
 800a5f2:	4853      	ldr	r0, [pc, #332]	; (800a740 <_printf_i+0x23c>)
 800a5f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2308      	moveq	r3, #8
 800a5fa:	230a      	movne	r3, #10
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a602:	6865      	ldr	r5, [r4, #4]
 800a604:	60a5      	str	r5, [r4, #8]
 800a606:	2d00      	cmp	r5, #0
 800a608:	bfa2      	ittt	ge
 800a60a:	6821      	ldrge	r1, [r4, #0]
 800a60c:	f021 0104 	bicge.w	r1, r1, #4
 800a610:	6021      	strge	r1, [r4, #0]
 800a612:	b90e      	cbnz	r6, 800a618 <_printf_i+0x114>
 800a614:	2d00      	cmp	r5, #0
 800a616:	d04b      	beq.n	800a6b0 <_printf_i+0x1ac>
 800a618:	4615      	mov	r5, r2
 800a61a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a61e:	fb03 6711 	mls	r7, r3, r1, r6
 800a622:	5dc7      	ldrb	r7, [r0, r7]
 800a624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a628:	4637      	mov	r7, r6
 800a62a:	42bb      	cmp	r3, r7
 800a62c:	460e      	mov	r6, r1
 800a62e:	d9f4      	bls.n	800a61a <_printf_i+0x116>
 800a630:	2b08      	cmp	r3, #8
 800a632:	d10b      	bne.n	800a64c <_printf_i+0x148>
 800a634:	6823      	ldr	r3, [r4, #0]
 800a636:	07de      	lsls	r6, r3, #31
 800a638:	d508      	bpl.n	800a64c <_printf_i+0x148>
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	6861      	ldr	r1, [r4, #4]
 800a63e:	4299      	cmp	r1, r3
 800a640:	bfde      	ittt	le
 800a642:	2330      	movle	r3, #48	; 0x30
 800a644:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a64c:	1b52      	subs	r2, r2, r5
 800a64e:	6122      	str	r2, [r4, #16]
 800a650:	f8cd a000 	str.w	sl, [sp]
 800a654:	464b      	mov	r3, r9
 800a656:	aa03      	add	r2, sp, #12
 800a658:	4621      	mov	r1, r4
 800a65a:	4640      	mov	r0, r8
 800a65c:	f7ff fee4 	bl	800a428 <_printf_common>
 800a660:	3001      	adds	r0, #1
 800a662:	d14a      	bne.n	800a6fa <_printf_i+0x1f6>
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	b004      	add	sp, #16
 800a66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	f043 0320 	orr.w	r3, r3, #32
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	4833      	ldr	r0, [pc, #204]	; (800a744 <_printf_i+0x240>)
 800a678:	2778      	movs	r7, #120	; 0x78
 800a67a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	6829      	ldr	r1, [r5, #0]
 800a682:	061f      	lsls	r7, r3, #24
 800a684:	f851 6b04 	ldr.w	r6, [r1], #4
 800a688:	d402      	bmi.n	800a690 <_printf_i+0x18c>
 800a68a:	065f      	lsls	r7, r3, #25
 800a68c:	bf48      	it	mi
 800a68e:	b2b6      	uxthmi	r6, r6
 800a690:	07df      	lsls	r7, r3, #31
 800a692:	bf48      	it	mi
 800a694:	f043 0320 	orrmi.w	r3, r3, #32
 800a698:	6029      	str	r1, [r5, #0]
 800a69a:	bf48      	it	mi
 800a69c:	6023      	strmi	r3, [r4, #0]
 800a69e:	b91e      	cbnz	r6, 800a6a8 <_printf_i+0x1a4>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	f023 0320 	bic.w	r3, r3, #32
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	2310      	movs	r3, #16
 800a6aa:	e7a7      	b.n	800a5fc <_printf_i+0xf8>
 800a6ac:	4824      	ldr	r0, [pc, #144]	; (800a740 <_printf_i+0x23c>)
 800a6ae:	e7e4      	b.n	800a67a <_printf_i+0x176>
 800a6b0:	4615      	mov	r5, r2
 800a6b2:	e7bd      	b.n	800a630 <_printf_i+0x12c>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	6826      	ldr	r6, [r4, #0]
 800a6b8:	6961      	ldr	r1, [r4, #20]
 800a6ba:	1d18      	adds	r0, r3, #4
 800a6bc:	6028      	str	r0, [r5, #0]
 800a6be:	0635      	lsls	r5, r6, #24
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	d501      	bpl.n	800a6c8 <_printf_i+0x1c4>
 800a6c4:	6019      	str	r1, [r3, #0]
 800a6c6:	e002      	b.n	800a6ce <_printf_i+0x1ca>
 800a6c8:	0670      	lsls	r0, r6, #25
 800a6ca:	d5fb      	bpl.n	800a6c4 <_printf_i+0x1c0>
 800a6cc:	8019      	strh	r1, [r3, #0]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	4615      	mov	r5, r2
 800a6d4:	e7bc      	b.n	800a650 <_printf_i+0x14c>
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	1d1a      	adds	r2, r3, #4
 800a6da:	602a      	str	r2, [r5, #0]
 800a6dc:	681d      	ldr	r5, [r3, #0]
 800a6de:	6862      	ldr	r2, [r4, #4]
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f7f5 fd9c 	bl	8000220 <memchr>
 800a6e8:	b108      	cbz	r0, 800a6ee <_printf_i+0x1ea>
 800a6ea:	1b40      	subs	r0, r0, r5
 800a6ec:	6060      	str	r0, [r4, #4]
 800a6ee:	6863      	ldr	r3, [r4, #4]
 800a6f0:	6123      	str	r3, [r4, #16]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f8:	e7aa      	b.n	800a650 <_printf_i+0x14c>
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	462a      	mov	r2, r5
 800a6fe:	4649      	mov	r1, r9
 800a700:	4640      	mov	r0, r8
 800a702:	47d0      	blx	sl
 800a704:	3001      	adds	r0, #1
 800a706:	d0ad      	beq.n	800a664 <_printf_i+0x160>
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	079b      	lsls	r3, r3, #30
 800a70c:	d413      	bmi.n	800a736 <_printf_i+0x232>
 800a70e:	68e0      	ldr	r0, [r4, #12]
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	4298      	cmp	r0, r3
 800a714:	bfb8      	it	lt
 800a716:	4618      	movlt	r0, r3
 800a718:	e7a6      	b.n	800a668 <_printf_i+0x164>
 800a71a:	2301      	movs	r3, #1
 800a71c:	4632      	mov	r2, r6
 800a71e:	4649      	mov	r1, r9
 800a720:	4640      	mov	r0, r8
 800a722:	47d0      	blx	sl
 800a724:	3001      	adds	r0, #1
 800a726:	d09d      	beq.n	800a664 <_printf_i+0x160>
 800a728:	3501      	adds	r5, #1
 800a72a:	68e3      	ldr	r3, [r4, #12]
 800a72c:	9903      	ldr	r1, [sp, #12]
 800a72e:	1a5b      	subs	r3, r3, r1
 800a730:	42ab      	cmp	r3, r5
 800a732:	dcf2      	bgt.n	800a71a <_printf_i+0x216>
 800a734:	e7eb      	b.n	800a70e <_printf_i+0x20a>
 800a736:	2500      	movs	r5, #0
 800a738:	f104 0619 	add.w	r6, r4, #25
 800a73c:	e7f5      	b.n	800a72a <_printf_i+0x226>
 800a73e:	bf00      	nop
 800a740:	0800cd42 	.word	0x0800cd42
 800a744:	0800cd53 	.word	0x0800cd53

0800a748 <std>:
 800a748:	2300      	movs	r3, #0
 800a74a:	b510      	push	{r4, lr}
 800a74c:	4604      	mov	r4, r0
 800a74e:	e9c0 3300 	strd	r3, r3, [r0]
 800a752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a756:	6083      	str	r3, [r0, #8]
 800a758:	8181      	strh	r1, [r0, #12]
 800a75a:	6643      	str	r3, [r0, #100]	; 0x64
 800a75c:	81c2      	strh	r2, [r0, #14]
 800a75e:	6183      	str	r3, [r0, #24]
 800a760:	4619      	mov	r1, r3
 800a762:	2208      	movs	r2, #8
 800a764:	305c      	adds	r0, #92	; 0x5c
 800a766:	f000 f928 	bl	800a9ba <memset>
 800a76a:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <std+0x58>)
 800a76c:	6263      	str	r3, [r4, #36]	; 0x24
 800a76e:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <std+0x5c>)
 800a770:	62a3      	str	r3, [r4, #40]	; 0x28
 800a772:	4b0d      	ldr	r3, [pc, #52]	; (800a7a8 <std+0x60>)
 800a774:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a776:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <std+0x64>)
 800a778:	6323      	str	r3, [r4, #48]	; 0x30
 800a77a:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <std+0x68>)
 800a77c:	6224      	str	r4, [r4, #32]
 800a77e:	429c      	cmp	r4, r3
 800a780:	d006      	beq.n	800a790 <std+0x48>
 800a782:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a786:	4294      	cmp	r4, r2
 800a788:	d002      	beq.n	800a790 <std+0x48>
 800a78a:	33d0      	adds	r3, #208	; 0xd0
 800a78c:	429c      	cmp	r4, r3
 800a78e:	d105      	bne.n	800a79c <std+0x54>
 800a790:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a798:	f000 b9e2 	b.w	800ab60 <__retarget_lock_init_recursive>
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800a935 	.word	0x0800a935
 800a7a4:	0800a957 	.word	0x0800a957
 800a7a8:	0800a98f 	.word	0x0800a98f
 800a7ac:	0800a9b3 	.word	0x0800a9b3
 800a7b0:	20001294 	.word	0x20001294

0800a7b4 <stdio_exit_handler>:
 800a7b4:	4a02      	ldr	r2, [pc, #8]	; (800a7c0 <stdio_exit_handler+0xc>)
 800a7b6:	4903      	ldr	r1, [pc, #12]	; (800a7c4 <stdio_exit_handler+0x10>)
 800a7b8:	4803      	ldr	r0, [pc, #12]	; (800a7c8 <stdio_exit_handler+0x14>)
 800a7ba:	f000 b869 	b.w	800a890 <_fwalk_sglue>
 800a7be:	bf00      	nop
 800a7c0:	20000018 	.word	0x20000018
 800a7c4:	0800c531 	.word	0x0800c531
 800a7c8:	20000024 	.word	0x20000024

0800a7cc <cleanup_stdio>:
 800a7cc:	6841      	ldr	r1, [r0, #4]
 800a7ce:	4b0c      	ldr	r3, [pc, #48]	; (800a800 <cleanup_stdio+0x34>)
 800a7d0:	4299      	cmp	r1, r3
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	d001      	beq.n	800a7dc <cleanup_stdio+0x10>
 800a7d8:	f001 feaa 	bl	800c530 <_fflush_r>
 800a7dc:	68a1      	ldr	r1, [r4, #8]
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <cleanup_stdio+0x38>)
 800a7e0:	4299      	cmp	r1, r3
 800a7e2:	d002      	beq.n	800a7ea <cleanup_stdio+0x1e>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f001 fea3 	bl	800c530 <_fflush_r>
 800a7ea:	68e1      	ldr	r1, [r4, #12]
 800a7ec:	4b06      	ldr	r3, [pc, #24]	; (800a808 <cleanup_stdio+0x3c>)
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	d004      	beq.n	800a7fc <cleanup_stdio+0x30>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f8:	f001 be9a 	b.w	800c530 <_fflush_r>
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	bf00      	nop
 800a800:	20001294 	.word	0x20001294
 800a804:	200012fc 	.word	0x200012fc
 800a808:	20001364 	.word	0x20001364

0800a80c <global_stdio_init.part.0>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <global_stdio_init.part.0+0x30>)
 800a810:	4c0b      	ldr	r4, [pc, #44]	; (800a840 <global_stdio_init.part.0+0x34>)
 800a812:	4a0c      	ldr	r2, [pc, #48]	; (800a844 <global_stdio_init.part.0+0x38>)
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	4620      	mov	r0, r4
 800a818:	2200      	movs	r2, #0
 800a81a:	2104      	movs	r1, #4
 800a81c:	f7ff ff94 	bl	800a748 <std>
 800a820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a824:	2201      	movs	r2, #1
 800a826:	2109      	movs	r1, #9
 800a828:	f7ff ff8e 	bl	800a748 <std>
 800a82c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a830:	2202      	movs	r2, #2
 800a832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a836:	2112      	movs	r1, #18
 800a838:	f7ff bf86 	b.w	800a748 <std>
 800a83c:	200013cc 	.word	0x200013cc
 800a840:	20001294 	.word	0x20001294
 800a844:	0800a7b5 	.word	0x0800a7b5

0800a848 <__sfp_lock_acquire>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <__sfp_lock_acquire+0x8>)
 800a84a:	f000 b98a 	b.w	800ab62 <__retarget_lock_acquire_recursive>
 800a84e:	bf00      	nop
 800a850:	200013d5 	.word	0x200013d5

0800a854 <__sfp_lock_release>:
 800a854:	4801      	ldr	r0, [pc, #4]	; (800a85c <__sfp_lock_release+0x8>)
 800a856:	f000 b985 	b.w	800ab64 <__retarget_lock_release_recursive>
 800a85a:	bf00      	nop
 800a85c:	200013d5 	.word	0x200013d5

0800a860 <__sinit>:
 800a860:	b510      	push	{r4, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	f7ff fff0 	bl	800a848 <__sfp_lock_acquire>
 800a868:	6a23      	ldr	r3, [r4, #32]
 800a86a:	b11b      	cbz	r3, 800a874 <__sinit+0x14>
 800a86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a870:	f7ff bff0 	b.w	800a854 <__sfp_lock_release>
 800a874:	4b04      	ldr	r3, [pc, #16]	; (800a888 <__sinit+0x28>)
 800a876:	6223      	str	r3, [r4, #32]
 800a878:	4b04      	ldr	r3, [pc, #16]	; (800a88c <__sinit+0x2c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1f5      	bne.n	800a86c <__sinit+0xc>
 800a880:	f7ff ffc4 	bl	800a80c <global_stdio_init.part.0>
 800a884:	e7f2      	b.n	800a86c <__sinit+0xc>
 800a886:	bf00      	nop
 800a888:	0800a7cd 	.word	0x0800a7cd
 800a88c:	200013cc 	.word	0x200013cc

0800a890 <_fwalk_sglue>:
 800a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a894:	4607      	mov	r7, r0
 800a896:	4688      	mov	r8, r1
 800a898:	4614      	mov	r4, r2
 800a89a:	2600      	movs	r6, #0
 800a89c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a4:	d505      	bpl.n	800a8b2 <_fwalk_sglue+0x22>
 800a8a6:	6824      	ldr	r4, [r4, #0]
 800a8a8:	2c00      	cmp	r4, #0
 800a8aa:	d1f7      	bne.n	800a89c <_fwalk_sglue+0xc>
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	89ab      	ldrh	r3, [r5, #12]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d907      	bls.n	800a8c8 <_fwalk_sglue+0x38>
 800a8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	d003      	beq.n	800a8c8 <_fwalk_sglue+0x38>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c0      	blx	r8
 800a8c6:	4306      	orrs	r6, r0
 800a8c8:	3568      	adds	r5, #104	; 0x68
 800a8ca:	e7e9      	b.n	800a8a0 <_fwalk_sglue+0x10>

0800a8cc <sniprintf>:
 800a8cc:	b40c      	push	{r2, r3}
 800a8ce:	b530      	push	{r4, r5, lr}
 800a8d0:	4b17      	ldr	r3, [pc, #92]	; (800a930 <sniprintf+0x64>)
 800a8d2:	1e0c      	subs	r4, r1, #0
 800a8d4:	681d      	ldr	r5, [r3, #0]
 800a8d6:	b09d      	sub	sp, #116	; 0x74
 800a8d8:	da08      	bge.n	800a8ec <sniprintf+0x20>
 800a8da:	238b      	movs	r3, #139	; 0x8b
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e2:	b01d      	add	sp, #116	; 0x74
 800a8e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e8:	b002      	add	sp, #8
 800a8ea:	4770      	bx	lr
 800a8ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8f4:	bf14      	ite	ne
 800a8f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8fa:	4623      	moveq	r3, r4
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	9307      	str	r3, [sp, #28]
 800a900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a904:	9002      	str	r0, [sp, #8]
 800a906:	9006      	str	r0, [sp, #24]
 800a908:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a90c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a90e:	ab21      	add	r3, sp, #132	; 0x84
 800a910:	a902      	add	r1, sp, #8
 800a912:	4628      	mov	r0, r5
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	f001 fc87 	bl	800c228 <_svfiprintf_r>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	bfbc      	itt	lt
 800a91e:	238b      	movlt	r3, #139	; 0x8b
 800a920:	602b      	strlt	r3, [r5, #0]
 800a922:	2c00      	cmp	r4, #0
 800a924:	d0dd      	beq.n	800a8e2 <sniprintf+0x16>
 800a926:	9b02      	ldr	r3, [sp, #8]
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
 800a92c:	e7d9      	b.n	800a8e2 <sniprintf+0x16>
 800a92e:	bf00      	nop
 800a930:	20000070 	.word	0x20000070

0800a934 <__sread>:
 800a934:	b510      	push	{r4, lr}
 800a936:	460c      	mov	r4, r1
 800a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93c:	f000 f8c2 	bl	800aac4 <_read_r>
 800a940:	2800      	cmp	r0, #0
 800a942:	bfab      	itete	ge
 800a944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a946:	89a3      	ldrhlt	r3, [r4, #12]
 800a948:	181b      	addge	r3, r3, r0
 800a94a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a94e:	bfac      	ite	ge
 800a950:	6563      	strge	r3, [r4, #84]	; 0x54
 800a952:	81a3      	strhlt	r3, [r4, #12]
 800a954:	bd10      	pop	{r4, pc}

0800a956 <__swrite>:
 800a956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	461f      	mov	r7, r3
 800a95c:	898b      	ldrh	r3, [r1, #12]
 800a95e:	05db      	lsls	r3, r3, #23
 800a960:	4605      	mov	r5, r0
 800a962:	460c      	mov	r4, r1
 800a964:	4616      	mov	r6, r2
 800a966:	d505      	bpl.n	800a974 <__swrite+0x1e>
 800a968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96c:	2302      	movs	r3, #2
 800a96e:	2200      	movs	r2, #0
 800a970:	f000 f896 	bl	800aaa0 <_lseek_r>
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a97e:	81a3      	strh	r3, [r4, #12]
 800a980:	4632      	mov	r2, r6
 800a982:	463b      	mov	r3, r7
 800a984:	4628      	mov	r0, r5
 800a986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98a:	f000 b8ad 	b.w	800aae8 <_write_r>

0800a98e <__sseek>:
 800a98e:	b510      	push	{r4, lr}
 800a990:	460c      	mov	r4, r1
 800a992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a996:	f000 f883 	bl	800aaa0 <_lseek_r>
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	bf15      	itete	ne
 800a9a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9aa:	81a3      	strheq	r3, [r4, #12]
 800a9ac:	bf18      	it	ne
 800a9ae:	81a3      	strhne	r3, [r4, #12]
 800a9b0:	bd10      	pop	{r4, pc}

0800a9b2 <__sclose>:
 800a9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b6:	f000 b80d 	b.w	800a9d4 <_close_r>

0800a9ba <memset>:
 800a9ba:	4402      	add	r2, r0
 800a9bc:	4603      	mov	r3, r0
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d100      	bne.n	800a9c4 <memset+0xa>
 800a9c2:	4770      	bx	lr
 800a9c4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c8:	e7f9      	b.n	800a9be <memset+0x4>
	...

0800a9cc <_localeconv_r>:
 800a9cc:	4800      	ldr	r0, [pc, #0]	; (800a9d0 <_localeconv_r+0x4>)
 800a9ce:	4770      	bx	lr
 800a9d0:	20000164 	.word	0x20000164

0800a9d4 <_close_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d06      	ldr	r5, [pc, #24]	; (800a9f0 <_close_r+0x1c>)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f7 faaa 	bl	8001f38 <_close>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_close_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_close_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	200013d0 	.word	0x200013d0

0800a9f4 <_reclaim_reent>:
 800a9f4:	4b29      	ldr	r3, [pc, #164]	; (800aa9c <_reclaim_reent+0xa8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4283      	cmp	r3, r0
 800a9fa:	b570      	push	{r4, r5, r6, lr}
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	d04b      	beq.n	800aa98 <_reclaim_reent+0xa4>
 800aa00:	69c3      	ldr	r3, [r0, #28]
 800aa02:	b143      	cbz	r3, 800aa16 <_reclaim_reent+0x22>
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d144      	bne.n	800aa94 <_reclaim_reent+0xa0>
 800aa0a:	69e3      	ldr	r3, [r4, #28]
 800aa0c:	6819      	ldr	r1, [r3, #0]
 800aa0e:	b111      	cbz	r1, 800aa16 <_reclaim_reent+0x22>
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 ff33 	bl	800b87c <_free_r>
 800aa16:	6961      	ldr	r1, [r4, #20]
 800aa18:	b111      	cbz	r1, 800aa20 <_reclaim_reent+0x2c>
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 ff2e 	bl	800b87c <_free_r>
 800aa20:	69e1      	ldr	r1, [r4, #28]
 800aa22:	b111      	cbz	r1, 800aa2a <_reclaim_reent+0x36>
 800aa24:	4620      	mov	r0, r4
 800aa26:	f000 ff29 	bl	800b87c <_free_r>
 800aa2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aa2c:	b111      	cbz	r1, 800aa34 <_reclaim_reent+0x40>
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 ff24 	bl	800b87c <_free_r>
 800aa34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa36:	b111      	cbz	r1, 800aa3e <_reclaim_reent+0x4a>
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 ff1f 	bl	800b87c <_free_r>
 800aa3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aa40:	b111      	cbz	r1, 800aa48 <_reclaim_reent+0x54>
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 ff1a 	bl	800b87c <_free_r>
 800aa48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aa4a:	b111      	cbz	r1, 800aa52 <_reclaim_reent+0x5e>
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 ff15 	bl	800b87c <_free_r>
 800aa52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aa54:	b111      	cbz	r1, 800aa5c <_reclaim_reent+0x68>
 800aa56:	4620      	mov	r0, r4
 800aa58:	f000 ff10 	bl	800b87c <_free_r>
 800aa5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aa5e:	b111      	cbz	r1, 800aa66 <_reclaim_reent+0x72>
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 ff0b 	bl	800b87c <_free_r>
 800aa66:	6a23      	ldr	r3, [r4, #32]
 800aa68:	b1b3      	cbz	r3, 800aa98 <_reclaim_reent+0xa4>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa70:	4718      	bx	r3
 800aa72:	5949      	ldr	r1, [r1, r5]
 800aa74:	b941      	cbnz	r1, 800aa88 <_reclaim_reent+0x94>
 800aa76:	3504      	adds	r5, #4
 800aa78:	69e3      	ldr	r3, [r4, #28]
 800aa7a:	2d80      	cmp	r5, #128	; 0x80
 800aa7c:	68d9      	ldr	r1, [r3, #12]
 800aa7e:	d1f8      	bne.n	800aa72 <_reclaim_reent+0x7e>
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 fefb 	bl	800b87c <_free_r>
 800aa86:	e7c0      	b.n	800aa0a <_reclaim_reent+0x16>
 800aa88:	680e      	ldr	r6, [r1, #0]
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	f000 fef6 	bl	800b87c <_free_r>
 800aa90:	4631      	mov	r1, r6
 800aa92:	e7ef      	b.n	800aa74 <_reclaim_reent+0x80>
 800aa94:	2500      	movs	r5, #0
 800aa96:	e7ef      	b.n	800aa78 <_reclaim_reent+0x84>
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000070 	.word	0x20000070

0800aaa0 <_lseek_r>:
 800aaa0:	b538      	push	{r3, r4, r5, lr}
 800aaa2:	4d07      	ldr	r5, [pc, #28]	; (800aac0 <_lseek_r+0x20>)
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	4608      	mov	r0, r1
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	2200      	movs	r2, #0
 800aaac:	602a      	str	r2, [r5, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	f7f7 fa69 	bl	8001f86 <_lseek>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_lseek_r+0x1e>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_lseek_r+0x1e>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	200013d0 	.word	0x200013d0

0800aac4 <_read_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d07      	ldr	r5, [pc, #28]	; (800aae4 <_read_r+0x20>)
 800aac8:	4604      	mov	r4, r0
 800aaca:	4608      	mov	r0, r1
 800aacc:	4611      	mov	r1, r2
 800aace:	2200      	movs	r2, #0
 800aad0:	602a      	str	r2, [r5, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	f7f7 f9f7 	bl	8001ec6 <_read>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_read_r+0x1e>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_read_r+0x1e>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	200013d0 	.word	0x200013d0

0800aae8 <_write_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	; (800ab08 <_write_r+0x20>)
 800aaec:	4604      	mov	r4, r0
 800aaee:	4608      	mov	r0, r1
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	602a      	str	r2, [r5, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f7f7 fa02 	bl	8001f00 <_write>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_write_r+0x1e>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_write_r+0x1e>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	200013d0 	.word	0x200013d0

0800ab0c <__errno>:
 800ab0c:	4b01      	ldr	r3, [pc, #4]	; (800ab14 <__errno+0x8>)
 800ab0e:	6818      	ldr	r0, [r3, #0]
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	20000070 	.word	0x20000070

0800ab18 <__libc_init_array>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	4d0d      	ldr	r5, [pc, #52]	; (800ab50 <__libc_init_array+0x38>)
 800ab1c:	4c0d      	ldr	r4, [pc, #52]	; (800ab54 <__libc_init_array+0x3c>)
 800ab1e:	1b64      	subs	r4, r4, r5
 800ab20:	10a4      	asrs	r4, r4, #2
 800ab22:	2600      	movs	r6, #0
 800ab24:	42a6      	cmp	r6, r4
 800ab26:	d109      	bne.n	800ab3c <__libc_init_array+0x24>
 800ab28:	4d0b      	ldr	r5, [pc, #44]	; (800ab58 <__libc_init_array+0x40>)
 800ab2a:	4c0c      	ldr	r4, [pc, #48]	; (800ab5c <__libc_init_array+0x44>)
 800ab2c:	f002 f896 	bl	800cc5c <_init>
 800ab30:	1b64      	subs	r4, r4, r5
 800ab32:	10a4      	asrs	r4, r4, #2
 800ab34:	2600      	movs	r6, #0
 800ab36:	42a6      	cmp	r6, r4
 800ab38:	d105      	bne.n	800ab46 <__libc_init_array+0x2e>
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab40:	4798      	blx	r3
 800ab42:	3601      	adds	r6, #1
 800ab44:	e7ee      	b.n	800ab24 <__libc_init_array+0xc>
 800ab46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab4a:	4798      	blx	r3
 800ab4c:	3601      	adds	r6, #1
 800ab4e:	e7f2      	b.n	800ab36 <__libc_init_array+0x1e>
 800ab50:	0800d0ac 	.word	0x0800d0ac
 800ab54:	0800d0ac 	.word	0x0800d0ac
 800ab58:	0800d0ac 	.word	0x0800d0ac
 800ab5c:	0800d0b0 	.word	0x0800d0b0

0800ab60 <__retarget_lock_init_recursive>:
 800ab60:	4770      	bx	lr

0800ab62 <__retarget_lock_acquire_recursive>:
 800ab62:	4770      	bx	lr

0800ab64 <__retarget_lock_release_recursive>:
 800ab64:	4770      	bx	lr

0800ab66 <memcpy>:
 800ab66:	440a      	add	r2, r1
 800ab68:	4291      	cmp	r1, r2
 800ab6a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab6e:	d100      	bne.n	800ab72 <memcpy+0xc>
 800ab70:	4770      	bx	lr
 800ab72:	b510      	push	{r4, lr}
 800ab74:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab7c:	4291      	cmp	r1, r2
 800ab7e:	d1f9      	bne.n	800ab74 <memcpy+0xe>
 800ab80:	bd10      	pop	{r4, pc}

0800ab82 <quorem>:
 800ab82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab86:	6903      	ldr	r3, [r0, #16]
 800ab88:	690c      	ldr	r4, [r1, #16]
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	db7e      	blt.n	800ac8e <quorem+0x10c>
 800ab90:	3c01      	subs	r4, #1
 800ab92:	f101 0814 	add.w	r8, r1, #20
 800ab96:	f100 0514 	add.w	r5, r0, #20
 800ab9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab9e:	9301      	str	r3, [sp, #4]
 800aba0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aba4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aba8:	3301      	adds	r3, #1
 800abaa:	429a      	cmp	r2, r3
 800abac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800abb8:	d331      	bcc.n	800ac1e <quorem+0x9c>
 800abba:	f04f 0e00 	mov.w	lr, #0
 800abbe:	4640      	mov	r0, r8
 800abc0:	46ac      	mov	ip, r5
 800abc2:	46f2      	mov	sl, lr
 800abc4:	f850 2b04 	ldr.w	r2, [r0], #4
 800abc8:	b293      	uxth	r3, r2
 800abca:	fb06 e303 	mla	r3, r6, r3, lr
 800abce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abd2:	0c1a      	lsrs	r2, r3, #16
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	ebaa 0303 	sub.w	r3, sl, r3
 800abda:	f8dc a000 	ldr.w	sl, [ip]
 800abde:	fa13 f38a 	uxtah	r3, r3, sl
 800abe2:	fb06 220e 	mla	r2, r6, lr, r2
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abee:	b292      	uxth	r2, r2
 800abf0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abf8:	f8bd 3000 	ldrh.w	r3, [sp]
 800abfc:	4581      	cmp	r9, r0
 800abfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac02:	f84c 3b04 	str.w	r3, [ip], #4
 800ac06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac0a:	d2db      	bcs.n	800abc4 <quorem+0x42>
 800ac0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac10:	b92b      	cbnz	r3, 800ac1e <quorem+0x9c>
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	3b04      	subs	r3, #4
 800ac16:	429d      	cmp	r5, r3
 800ac18:	461a      	mov	r2, r3
 800ac1a:	d32c      	bcc.n	800ac76 <quorem+0xf4>
 800ac1c:	613c      	str	r4, [r7, #16]
 800ac1e:	4638      	mov	r0, r7
 800ac20:	f001 f9a8 	bl	800bf74 <__mcmp>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	db22      	blt.n	800ac6e <quorem+0xec>
 800ac28:	3601      	adds	r6, #1
 800ac2a:	4629      	mov	r1, r5
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac32:	f8d1 c000 	ldr.w	ip, [r1]
 800ac36:	b293      	uxth	r3, r2
 800ac38:	1ac3      	subs	r3, r0, r3
 800ac3a:	0c12      	lsrs	r2, r2, #16
 800ac3c:	fa13 f38c 	uxtah	r3, r3, ip
 800ac40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac4e:	45c1      	cmp	r9, r8
 800ac50:	f841 3b04 	str.w	r3, [r1], #4
 800ac54:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac58:	d2e9      	bcs.n	800ac2e <quorem+0xac>
 800ac5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac62:	b922      	cbnz	r2, 800ac6e <quorem+0xec>
 800ac64:	3b04      	subs	r3, #4
 800ac66:	429d      	cmp	r5, r3
 800ac68:	461a      	mov	r2, r3
 800ac6a:	d30a      	bcc.n	800ac82 <quorem+0x100>
 800ac6c:	613c      	str	r4, [r7, #16]
 800ac6e:	4630      	mov	r0, r6
 800ac70:	b003      	add	sp, #12
 800ac72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac76:	6812      	ldr	r2, [r2, #0]
 800ac78:	3b04      	subs	r3, #4
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	d1ce      	bne.n	800ac1c <quorem+0x9a>
 800ac7e:	3c01      	subs	r4, #1
 800ac80:	e7c9      	b.n	800ac16 <quorem+0x94>
 800ac82:	6812      	ldr	r2, [r2, #0]
 800ac84:	3b04      	subs	r3, #4
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	d1f0      	bne.n	800ac6c <quorem+0xea>
 800ac8a:	3c01      	subs	r4, #1
 800ac8c:	e7eb      	b.n	800ac66 <quorem+0xe4>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e7ee      	b.n	800ac70 <quorem+0xee>
 800ac92:	0000      	movs	r0, r0
 800ac94:	0000      	movs	r0, r0
	...

0800ac98 <_dtoa_r>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	ed2d 8b04 	vpush	{d8-d9}
 800aca0:	69c5      	ldr	r5, [r0, #28]
 800aca2:	b093      	sub	sp, #76	; 0x4c
 800aca4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aca8:	ec57 6b10 	vmov	r6, r7, d0
 800acac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800acb0:	9107      	str	r1, [sp, #28]
 800acb2:	4604      	mov	r4, r0
 800acb4:	920a      	str	r2, [sp, #40]	; 0x28
 800acb6:	930d      	str	r3, [sp, #52]	; 0x34
 800acb8:	b975      	cbnz	r5, 800acd8 <_dtoa_r+0x40>
 800acba:	2010      	movs	r0, #16
 800acbc:	f000 fe2a 	bl	800b914 <malloc>
 800acc0:	4602      	mov	r2, r0
 800acc2:	61e0      	str	r0, [r4, #28]
 800acc4:	b920      	cbnz	r0, 800acd0 <_dtoa_r+0x38>
 800acc6:	4bae      	ldr	r3, [pc, #696]	; (800af80 <_dtoa_r+0x2e8>)
 800acc8:	21ef      	movs	r1, #239	; 0xef
 800acca:	48ae      	ldr	r0, [pc, #696]	; (800af84 <_dtoa_r+0x2ec>)
 800accc:	f001 fc82 	bl	800c5d4 <__assert_func>
 800acd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acd4:	6005      	str	r5, [r0, #0]
 800acd6:	60c5      	str	r5, [r0, #12]
 800acd8:	69e3      	ldr	r3, [r4, #28]
 800acda:	6819      	ldr	r1, [r3, #0]
 800acdc:	b151      	cbz	r1, 800acf4 <_dtoa_r+0x5c>
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	604a      	str	r2, [r1, #4]
 800ace2:	2301      	movs	r3, #1
 800ace4:	4093      	lsls	r3, r2
 800ace6:	608b      	str	r3, [r1, #8]
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 ff07 	bl	800bafc <_Bfree>
 800acee:	69e3      	ldr	r3, [r4, #28]
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	1e3b      	subs	r3, r7, #0
 800acf6:	bfbb      	ittet	lt
 800acf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800acfc:	9303      	strlt	r3, [sp, #12]
 800acfe:	2300      	movge	r3, #0
 800ad00:	2201      	movlt	r2, #1
 800ad02:	bfac      	ite	ge
 800ad04:	f8c8 3000 	strge.w	r3, [r8]
 800ad08:	f8c8 2000 	strlt.w	r2, [r8]
 800ad0c:	4b9e      	ldr	r3, [pc, #632]	; (800af88 <_dtoa_r+0x2f0>)
 800ad0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ad12:	ea33 0308 	bics.w	r3, r3, r8
 800ad16:	d11b      	bne.n	800ad50 <_dtoa_r+0xb8>
 800ad18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ad24:	4333      	orrs	r3, r6
 800ad26:	f000 8593 	beq.w	800b850 <_dtoa_r+0xbb8>
 800ad2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad2c:	b963      	cbnz	r3, 800ad48 <_dtoa_r+0xb0>
 800ad2e:	4b97      	ldr	r3, [pc, #604]	; (800af8c <_dtoa_r+0x2f4>)
 800ad30:	e027      	b.n	800ad82 <_dtoa_r+0xea>
 800ad32:	4b97      	ldr	r3, [pc, #604]	; (800af90 <_dtoa_r+0x2f8>)
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	3308      	adds	r3, #8
 800ad38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	9800      	ldr	r0, [sp, #0]
 800ad3e:	b013      	add	sp, #76	; 0x4c
 800ad40:	ecbd 8b04 	vpop	{d8-d9}
 800ad44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad48:	4b90      	ldr	r3, [pc, #576]	; (800af8c <_dtoa_r+0x2f4>)
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	3303      	adds	r3, #3
 800ad4e:	e7f3      	b.n	800ad38 <_dtoa_r+0xa0>
 800ad50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad54:	2200      	movs	r2, #0
 800ad56:	ec51 0b17 	vmov	r0, r1, d7
 800ad5a:	eeb0 8a47 	vmov.f32	s16, s14
 800ad5e:	eef0 8a67 	vmov.f32	s17, s15
 800ad62:	2300      	movs	r3, #0
 800ad64:	f7f5 fed8 	bl	8000b18 <__aeabi_dcmpeq>
 800ad68:	4681      	mov	r9, r0
 800ad6a:	b160      	cbz	r0, 800ad86 <_dtoa_r+0xee>
 800ad6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad6e:	2301      	movs	r3, #1
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8568 	beq.w	800b84a <_dtoa_r+0xbb2>
 800ad7a:	4b86      	ldr	r3, [pc, #536]	; (800af94 <_dtoa_r+0x2fc>)
 800ad7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	3b01      	subs	r3, #1
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	e7da      	b.n	800ad3c <_dtoa_r+0xa4>
 800ad86:	aa10      	add	r2, sp, #64	; 0x40
 800ad88:	a911      	add	r1, sp, #68	; 0x44
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad90:	eef0 0a68 	vmov.f32	s1, s17
 800ad94:	f001 f994 	bl	800c0c0 <__d2b>
 800ad98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ad9c:	4682      	mov	sl, r0
 800ad9e:	2d00      	cmp	r5, #0
 800ada0:	d07f      	beq.n	800aea2 <_dtoa_r+0x20a>
 800ada2:	ee18 3a90 	vmov	r3, s17
 800ada6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adaa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800adae:	ec51 0b18 	vmov	r0, r1, d8
 800adb2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800adb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800adba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800adbe:	4619      	mov	r1, r3
 800adc0:	2200      	movs	r2, #0
 800adc2:	4b75      	ldr	r3, [pc, #468]	; (800af98 <_dtoa_r+0x300>)
 800adc4:	f7f5 fa88 	bl	80002d8 <__aeabi_dsub>
 800adc8:	a367      	add	r3, pc, #412	; (adr r3, 800af68 <_dtoa_r+0x2d0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fc3b 	bl	8000648 <__aeabi_dmul>
 800add2:	a367      	add	r3, pc, #412	; (adr r3, 800af70 <_dtoa_r+0x2d8>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f7f5 fa80 	bl	80002dc <__adddf3>
 800addc:	4606      	mov	r6, r0
 800adde:	4628      	mov	r0, r5
 800ade0:	460f      	mov	r7, r1
 800ade2:	f7f5 fbc7 	bl	8000574 <__aeabi_i2d>
 800ade6:	a364      	add	r3, pc, #400	; (adr r3, 800af78 <_dtoa_r+0x2e0>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	f7f5 fc2c 	bl	8000648 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4630      	mov	r0, r6
 800adf6:	4639      	mov	r1, r7
 800adf8:	f7f5 fa70 	bl	80002dc <__adddf3>
 800adfc:	4606      	mov	r6, r0
 800adfe:	460f      	mov	r7, r1
 800ae00:	f7f5 fed2 	bl	8000ba8 <__aeabi_d2iz>
 800ae04:	2200      	movs	r2, #0
 800ae06:	4683      	mov	fp, r0
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	f7f5 fe8d 	bl	8000b2c <__aeabi_dcmplt>
 800ae12:	b148      	cbz	r0, 800ae28 <_dtoa_r+0x190>
 800ae14:	4658      	mov	r0, fp
 800ae16:	f7f5 fbad 	bl	8000574 <__aeabi_i2d>
 800ae1a:	4632      	mov	r2, r6
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	f7f5 fe7b 	bl	8000b18 <__aeabi_dcmpeq>
 800ae22:	b908      	cbnz	r0, 800ae28 <_dtoa_r+0x190>
 800ae24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae28:	f1bb 0f16 	cmp.w	fp, #22
 800ae2c:	d857      	bhi.n	800aede <_dtoa_r+0x246>
 800ae2e:	4b5b      	ldr	r3, [pc, #364]	; (800af9c <_dtoa_r+0x304>)
 800ae30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae38:	ec51 0b18 	vmov	r0, r1, d8
 800ae3c:	f7f5 fe76 	bl	8000b2c <__aeabi_dcmplt>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d04e      	beq.n	800aee2 <_dtoa_r+0x24a>
 800ae44:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae48:	2300      	movs	r3, #0
 800ae4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae4e:	1b5b      	subs	r3, r3, r5
 800ae50:	1e5a      	subs	r2, r3, #1
 800ae52:	bf45      	ittet	mi
 800ae54:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae58:	9305      	strmi	r3, [sp, #20]
 800ae5a:	2300      	movpl	r3, #0
 800ae5c:	2300      	movmi	r3, #0
 800ae5e:	9206      	str	r2, [sp, #24]
 800ae60:	bf54      	ite	pl
 800ae62:	9305      	strpl	r3, [sp, #20]
 800ae64:	9306      	strmi	r3, [sp, #24]
 800ae66:	f1bb 0f00 	cmp.w	fp, #0
 800ae6a:	db3c      	blt.n	800aee6 <_dtoa_r+0x24e>
 800ae6c:	9b06      	ldr	r3, [sp, #24]
 800ae6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae72:	445b      	add	r3, fp
 800ae74:	9306      	str	r3, [sp, #24]
 800ae76:	2300      	movs	r3, #0
 800ae78:	9308      	str	r3, [sp, #32]
 800ae7a:	9b07      	ldr	r3, [sp, #28]
 800ae7c:	2b09      	cmp	r3, #9
 800ae7e:	d868      	bhi.n	800af52 <_dtoa_r+0x2ba>
 800ae80:	2b05      	cmp	r3, #5
 800ae82:	bfc4      	itt	gt
 800ae84:	3b04      	subgt	r3, #4
 800ae86:	9307      	strgt	r3, [sp, #28]
 800ae88:	9b07      	ldr	r3, [sp, #28]
 800ae8a:	f1a3 0302 	sub.w	r3, r3, #2
 800ae8e:	bfcc      	ite	gt
 800ae90:	2500      	movgt	r5, #0
 800ae92:	2501      	movle	r5, #1
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	f200 8085 	bhi.w	800afa4 <_dtoa_r+0x30c>
 800ae9a:	e8df f003 	tbb	[pc, r3]
 800ae9e:	3b2e      	.short	0x3b2e
 800aea0:	5839      	.short	0x5839
 800aea2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aea6:	441d      	add	r5, r3
 800aea8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aeac:	2b20      	cmp	r3, #32
 800aeae:	bfc1      	itttt	gt
 800aeb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aeb4:	fa08 f803 	lslgt.w	r8, r8, r3
 800aeb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aebc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aec0:	bfd6      	itet	le
 800aec2:	f1c3 0320 	rsble	r3, r3, #32
 800aec6:	ea48 0003 	orrgt.w	r0, r8, r3
 800aeca:	fa06 f003 	lslle.w	r0, r6, r3
 800aece:	f7f5 fb41 	bl	8000554 <__aeabi_ui2d>
 800aed2:	2201      	movs	r2, #1
 800aed4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aed8:	3d01      	subs	r5, #1
 800aeda:	920e      	str	r2, [sp, #56]	; 0x38
 800aedc:	e76f      	b.n	800adbe <_dtoa_r+0x126>
 800aede:	2301      	movs	r3, #1
 800aee0:	e7b3      	b.n	800ae4a <_dtoa_r+0x1b2>
 800aee2:	900c      	str	r0, [sp, #48]	; 0x30
 800aee4:	e7b2      	b.n	800ae4c <_dtoa_r+0x1b4>
 800aee6:	9b05      	ldr	r3, [sp, #20]
 800aee8:	eba3 030b 	sub.w	r3, r3, fp
 800aeec:	9305      	str	r3, [sp, #20]
 800aeee:	f1cb 0300 	rsb	r3, fp, #0
 800aef2:	9308      	str	r3, [sp, #32]
 800aef4:	2300      	movs	r3, #0
 800aef6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aef8:	e7bf      	b.n	800ae7a <_dtoa_r+0x1e2>
 800aefa:	2300      	movs	r3, #0
 800aefc:	9309      	str	r3, [sp, #36]	; 0x24
 800aefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af00:	2b00      	cmp	r3, #0
 800af02:	dc52      	bgt.n	800afaa <_dtoa_r+0x312>
 800af04:	2301      	movs	r3, #1
 800af06:	9301      	str	r3, [sp, #4]
 800af08:	9304      	str	r3, [sp, #16]
 800af0a:	461a      	mov	r2, r3
 800af0c:	920a      	str	r2, [sp, #40]	; 0x28
 800af0e:	e00b      	b.n	800af28 <_dtoa_r+0x290>
 800af10:	2301      	movs	r3, #1
 800af12:	e7f3      	b.n	800aefc <_dtoa_r+0x264>
 800af14:	2300      	movs	r3, #0
 800af16:	9309      	str	r3, [sp, #36]	; 0x24
 800af18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af1a:	445b      	add	r3, fp
 800af1c:	9301      	str	r3, [sp, #4]
 800af1e:	3301      	adds	r3, #1
 800af20:	2b01      	cmp	r3, #1
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	bfb8      	it	lt
 800af26:	2301      	movlt	r3, #1
 800af28:	69e0      	ldr	r0, [r4, #28]
 800af2a:	2100      	movs	r1, #0
 800af2c:	2204      	movs	r2, #4
 800af2e:	f102 0614 	add.w	r6, r2, #20
 800af32:	429e      	cmp	r6, r3
 800af34:	d93d      	bls.n	800afb2 <_dtoa_r+0x31a>
 800af36:	6041      	str	r1, [r0, #4]
 800af38:	4620      	mov	r0, r4
 800af3a:	f000 fd9f 	bl	800ba7c <_Balloc>
 800af3e:	9000      	str	r0, [sp, #0]
 800af40:	2800      	cmp	r0, #0
 800af42:	d139      	bne.n	800afb8 <_dtoa_r+0x320>
 800af44:	4b16      	ldr	r3, [pc, #88]	; (800afa0 <_dtoa_r+0x308>)
 800af46:	4602      	mov	r2, r0
 800af48:	f240 11af 	movw	r1, #431	; 0x1af
 800af4c:	e6bd      	b.n	800acca <_dtoa_r+0x32>
 800af4e:	2301      	movs	r3, #1
 800af50:	e7e1      	b.n	800af16 <_dtoa_r+0x27e>
 800af52:	2501      	movs	r5, #1
 800af54:	2300      	movs	r3, #0
 800af56:	9307      	str	r3, [sp, #28]
 800af58:	9509      	str	r5, [sp, #36]	; 0x24
 800af5a:	f04f 33ff 	mov.w	r3, #4294967295
 800af5e:	9301      	str	r3, [sp, #4]
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	2200      	movs	r2, #0
 800af64:	2312      	movs	r3, #18
 800af66:	e7d1      	b.n	800af0c <_dtoa_r+0x274>
 800af68:	636f4361 	.word	0x636f4361
 800af6c:	3fd287a7 	.word	0x3fd287a7
 800af70:	8b60c8b3 	.word	0x8b60c8b3
 800af74:	3fc68a28 	.word	0x3fc68a28
 800af78:	509f79fb 	.word	0x509f79fb
 800af7c:	3fd34413 	.word	0x3fd34413
 800af80:	0800cd71 	.word	0x0800cd71
 800af84:	0800cd88 	.word	0x0800cd88
 800af88:	7ff00000 	.word	0x7ff00000
 800af8c:	0800cd6d 	.word	0x0800cd6d
 800af90:	0800cd64 	.word	0x0800cd64
 800af94:	0800cd41 	.word	0x0800cd41
 800af98:	3ff80000 	.word	0x3ff80000
 800af9c:	0800ce78 	.word	0x0800ce78
 800afa0:	0800cde0 	.word	0x0800cde0
 800afa4:	2301      	movs	r3, #1
 800afa6:	9309      	str	r3, [sp, #36]	; 0x24
 800afa8:	e7d7      	b.n	800af5a <_dtoa_r+0x2c2>
 800afaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	9304      	str	r3, [sp, #16]
 800afb0:	e7ba      	b.n	800af28 <_dtoa_r+0x290>
 800afb2:	3101      	adds	r1, #1
 800afb4:	0052      	lsls	r2, r2, #1
 800afb6:	e7ba      	b.n	800af2e <_dtoa_r+0x296>
 800afb8:	69e3      	ldr	r3, [r4, #28]
 800afba:	9a00      	ldr	r2, [sp, #0]
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	9b04      	ldr	r3, [sp, #16]
 800afc0:	2b0e      	cmp	r3, #14
 800afc2:	f200 80a8 	bhi.w	800b116 <_dtoa_r+0x47e>
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	f000 80a5 	beq.w	800b116 <_dtoa_r+0x47e>
 800afcc:	f1bb 0f00 	cmp.w	fp, #0
 800afd0:	dd38      	ble.n	800b044 <_dtoa_r+0x3ac>
 800afd2:	4bc0      	ldr	r3, [pc, #768]	; (800b2d4 <_dtoa_r+0x63c>)
 800afd4:	f00b 020f 	and.w	r2, fp, #15
 800afd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800afe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800afe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800afe8:	d019      	beq.n	800b01e <_dtoa_r+0x386>
 800afea:	4bbb      	ldr	r3, [pc, #748]	; (800b2d8 <_dtoa_r+0x640>)
 800afec:	ec51 0b18 	vmov	r0, r1, d8
 800aff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aff4:	f7f5 fc52 	bl	800089c <__aeabi_ddiv>
 800aff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800affc:	f008 080f 	and.w	r8, r8, #15
 800b000:	2503      	movs	r5, #3
 800b002:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b2d8 <_dtoa_r+0x640>
 800b006:	f1b8 0f00 	cmp.w	r8, #0
 800b00a:	d10a      	bne.n	800b022 <_dtoa_r+0x38a>
 800b00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b010:	4632      	mov	r2, r6
 800b012:	463b      	mov	r3, r7
 800b014:	f7f5 fc42 	bl	800089c <__aeabi_ddiv>
 800b018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b01c:	e02b      	b.n	800b076 <_dtoa_r+0x3de>
 800b01e:	2502      	movs	r5, #2
 800b020:	e7ef      	b.n	800b002 <_dtoa_r+0x36a>
 800b022:	f018 0f01 	tst.w	r8, #1
 800b026:	d008      	beq.n	800b03a <_dtoa_r+0x3a2>
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b030:	f7f5 fb0a 	bl	8000648 <__aeabi_dmul>
 800b034:	3501      	adds	r5, #1
 800b036:	4606      	mov	r6, r0
 800b038:	460f      	mov	r7, r1
 800b03a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b03e:	f109 0908 	add.w	r9, r9, #8
 800b042:	e7e0      	b.n	800b006 <_dtoa_r+0x36e>
 800b044:	f000 809f 	beq.w	800b186 <_dtoa_r+0x4ee>
 800b048:	f1cb 0600 	rsb	r6, fp, #0
 800b04c:	4ba1      	ldr	r3, [pc, #644]	; (800b2d4 <_dtoa_r+0x63c>)
 800b04e:	4fa2      	ldr	r7, [pc, #648]	; (800b2d8 <_dtoa_r+0x640>)
 800b050:	f006 020f 	and.w	r2, r6, #15
 800b054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	ec51 0b18 	vmov	r0, r1, d8
 800b060:	f7f5 faf2 	bl	8000648 <__aeabi_dmul>
 800b064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b068:	1136      	asrs	r6, r6, #4
 800b06a:	2300      	movs	r3, #0
 800b06c:	2502      	movs	r5, #2
 800b06e:	2e00      	cmp	r6, #0
 800b070:	d17e      	bne.n	800b170 <_dtoa_r+0x4d8>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1d0      	bne.n	800b018 <_dtoa_r+0x380>
 800b076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b078:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8084 	beq.w	800b18a <_dtoa_r+0x4f2>
 800b082:	4b96      	ldr	r3, [pc, #600]	; (800b2dc <_dtoa_r+0x644>)
 800b084:	2200      	movs	r2, #0
 800b086:	4640      	mov	r0, r8
 800b088:	4649      	mov	r1, r9
 800b08a:	f7f5 fd4f 	bl	8000b2c <__aeabi_dcmplt>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d07b      	beq.n	800b18a <_dtoa_r+0x4f2>
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d078      	beq.n	800b18a <_dtoa_r+0x4f2>
 800b098:	9b01      	ldr	r3, [sp, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	dd39      	ble.n	800b112 <_dtoa_r+0x47a>
 800b09e:	4b90      	ldr	r3, [pc, #576]	; (800b2e0 <_dtoa_r+0x648>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	f7f5 facf 	bl	8000648 <__aeabi_dmul>
 800b0aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ae:	9e01      	ldr	r6, [sp, #4]
 800b0b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b0b4:	3501      	adds	r5, #1
 800b0b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f7f5 fa5a 	bl	8000574 <__aeabi_i2d>
 800b0c0:	4642      	mov	r2, r8
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	f7f5 fac0 	bl	8000648 <__aeabi_dmul>
 800b0c8:	4b86      	ldr	r3, [pc, #536]	; (800b2e4 <_dtoa_r+0x64c>)
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f7f5 f906 	bl	80002dc <__adddf3>
 800b0d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d8:	9303      	str	r3, [sp, #12]
 800b0da:	2e00      	cmp	r6, #0
 800b0dc:	d158      	bne.n	800b190 <_dtoa_r+0x4f8>
 800b0de:	4b82      	ldr	r3, [pc, #520]	; (800b2e8 <_dtoa_r+0x650>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4640      	mov	r0, r8
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	f7f5 f8f7 	bl	80002d8 <__aeabi_dsub>
 800b0ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	4689      	mov	r9, r1
 800b0f2:	f7f5 fd39 	bl	8000b68 <__aeabi_dcmpgt>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	f040 8296 	bne.w	800b628 <_dtoa_r+0x990>
 800b0fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b100:	4640      	mov	r0, r8
 800b102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b106:	4649      	mov	r1, r9
 800b108:	f7f5 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f040 8289 	bne.w	800b624 <_dtoa_r+0x98c>
 800b112:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f2c0 814e 	blt.w	800b3ba <_dtoa_r+0x722>
 800b11e:	f1bb 0f0e 	cmp.w	fp, #14
 800b122:	f300 814a 	bgt.w	800b3ba <_dtoa_r+0x722>
 800b126:	4b6b      	ldr	r3, [pc, #428]	; (800b2d4 <_dtoa_r+0x63c>)
 800b128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b132:	2b00      	cmp	r3, #0
 800b134:	f280 80dc 	bge.w	800b2f0 <_dtoa_r+0x658>
 800b138:	9b04      	ldr	r3, [sp, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f300 80d8 	bgt.w	800b2f0 <_dtoa_r+0x658>
 800b140:	f040 826f 	bne.w	800b622 <_dtoa_r+0x98a>
 800b144:	4b68      	ldr	r3, [pc, #416]	; (800b2e8 <_dtoa_r+0x650>)
 800b146:	2200      	movs	r2, #0
 800b148:	4640      	mov	r0, r8
 800b14a:	4649      	mov	r1, r9
 800b14c:	f7f5 fa7c 	bl	8000648 <__aeabi_dmul>
 800b150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b154:	f7f5 fcfe 	bl	8000b54 <__aeabi_dcmpge>
 800b158:	9e04      	ldr	r6, [sp, #16]
 800b15a:	4637      	mov	r7, r6
 800b15c:	2800      	cmp	r0, #0
 800b15e:	f040 8245 	bne.w	800b5ec <_dtoa_r+0x954>
 800b162:	9d00      	ldr	r5, [sp, #0]
 800b164:	2331      	movs	r3, #49	; 0x31
 800b166:	f805 3b01 	strb.w	r3, [r5], #1
 800b16a:	f10b 0b01 	add.w	fp, fp, #1
 800b16e:	e241      	b.n	800b5f4 <_dtoa_r+0x95c>
 800b170:	07f2      	lsls	r2, r6, #31
 800b172:	d505      	bpl.n	800b180 <_dtoa_r+0x4e8>
 800b174:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b178:	f7f5 fa66 	bl	8000648 <__aeabi_dmul>
 800b17c:	3501      	adds	r5, #1
 800b17e:	2301      	movs	r3, #1
 800b180:	1076      	asrs	r6, r6, #1
 800b182:	3708      	adds	r7, #8
 800b184:	e773      	b.n	800b06e <_dtoa_r+0x3d6>
 800b186:	2502      	movs	r5, #2
 800b188:	e775      	b.n	800b076 <_dtoa_r+0x3de>
 800b18a:	9e04      	ldr	r6, [sp, #16]
 800b18c:	465f      	mov	r7, fp
 800b18e:	e792      	b.n	800b0b6 <_dtoa_r+0x41e>
 800b190:	9900      	ldr	r1, [sp, #0]
 800b192:	4b50      	ldr	r3, [pc, #320]	; (800b2d4 <_dtoa_r+0x63c>)
 800b194:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b198:	4431      	add	r1, r6
 800b19a:	9102      	str	r1, [sp, #8]
 800b19c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b19e:	eeb0 9a47 	vmov.f32	s18, s14
 800b1a2:	eef0 9a67 	vmov.f32	s19, s15
 800b1a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b1aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d044      	beq.n	800b23c <_dtoa_r+0x5a4>
 800b1b2:	494e      	ldr	r1, [pc, #312]	; (800b2ec <_dtoa_r+0x654>)
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f7f5 fb71 	bl	800089c <__aeabi_ddiv>
 800b1ba:	ec53 2b19 	vmov	r2, r3, d9
 800b1be:	f7f5 f88b 	bl	80002d8 <__aeabi_dsub>
 800b1c2:	9d00      	ldr	r5, [sp, #0]
 800b1c4:	ec41 0b19 	vmov	d9, r0, r1
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	f7f5 fcec 	bl	8000ba8 <__aeabi_d2iz>
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	f7f5 f9cf 	bl	8000574 <__aeabi_i2d>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4640      	mov	r0, r8
 800b1dc:	4649      	mov	r1, r9
 800b1de:	f7f5 f87b 	bl	80002d8 <__aeabi_dsub>
 800b1e2:	3630      	adds	r6, #48	; 0x30
 800b1e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b1e8:	ec53 2b19 	vmov	r2, r3, d9
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	4689      	mov	r9, r1
 800b1f0:	f7f5 fc9c 	bl	8000b2c <__aeabi_dcmplt>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d164      	bne.n	800b2c2 <_dtoa_r+0x62a>
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	4937      	ldr	r1, [pc, #220]	; (800b2dc <_dtoa_r+0x644>)
 800b1fe:	2000      	movs	r0, #0
 800b200:	f7f5 f86a 	bl	80002d8 <__aeabi_dsub>
 800b204:	ec53 2b19 	vmov	r2, r3, d9
 800b208:	f7f5 fc90 	bl	8000b2c <__aeabi_dcmplt>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f040 80b6 	bne.w	800b37e <_dtoa_r+0x6e6>
 800b212:	9b02      	ldr	r3, [sp, #8]
 800b214:	429d      	cmp	r5, r3
 800b216:	f43f af7c 	beq.w	800b112 <_dtoa_r+0x47a>
 800b21a:	4b31      	ldr	r3, [pc, #196]	; (800b2e0 <_dtoa_r+0x648>)
 800b21c:	ec51 0b19 	vmov	r0, r1, d9
 800b220:	2200      	movs	r2, #0
 800b222:	f7f5 fa11 	bl	8000648 <__aeabi_dmul>
 800b226:	4b2e      	ldr	r3, [pc, #184]	; (800b2e0 <_dtoa_r+0x648>)
 800b228:	ec41 0b19 	vmov	d9, r0, r1
 800b22c:	2200      	movs	r2, #0
 800b22e:	4640      	mov	r0, r8
 800b230:	4649      	mov	r1, r9
 800b232:	f7f5 fa09 	bl	8000648 <__aeabi_dmul>
 800b236:	4680      	mov	r8, r0
 800b238:	4689      	mov	r9, r1
 800b23a:	e7c5      	b.n	800b1c8 <_dtoa_r+0x530>
 800b23c:	ec51 0b17 	vmov	r0, r1, d7
 800b240:	f7f5 fa02 	bl	8000648 <__aeabi_dmul>
 800b244:	9b02      	ldr	r3, [sp, #8]
 800b246:	9d00      	ldr	r5, [sp, #0]
 800b248:	930f      	str	r3, [sp, #60]	; 0x3c
 800b24a:	ec41 0b19 	vmov	d9, r0, r1
 800b24e:	4649      	mov	r1, r9
 800b250:	4640      	mov	r0, r8
 800b252:	f7f5 fca9 	bl	8000ba8 <__aeabi_d2iz>
 800b256:	4606      	mov	r6, r0
 800b258:	f7f5 f98c 	bl	8000574 <__aeabi_i2d>
 800b25c:	3630      	adds	r6, #48	; 0x30
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4640      	mov	r0, r8
 800b264:	4649      	mov	r1, r9
 800b266:	f7f5 f837 	bl	80002d8 <__aeabi_dsub>
 800b26a:	f805 6b01 	strb.w	r6, [r5], #1
 800b26e:	9b02      	ldr	r3, [sp, #8]
 800b270:	429d      	cmp	r5, r3
 800b272:	4680      	mov	r8, r0
 800b274:	4689      	mov	r9, r1
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	d124      	bne.n	800b2c6 <_dtoa_r+0x62e>
 800b27c:	4b1b      	ldr	r3, [pc, #108]	; (800b2ec <_dtoa_r+0x654>)
 800b27e:	ec51 0b19 	vmov	r0, r1, d9
 800b282:	f7f5 f82b 	bl	80002dc <__adddf3>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f5 fc6b 	bl	8000b68 <__aeabi_dcmpgt>
 800b292:	2800      	cmp	r0, #0
 800b294:	d173      	bne.n	800b37e <_dtoa_r+0x6e6>
 800b296:	ec53 2b19 	vmov	r2, r3, d9
 800b29a:	4914      	ldr	r1, [pc, #80]	; (800b2ec <_dtoa_r+0x654>)
 800b29c:	2000      	movs	r0, #0
 800b29e:	f7f5 f81b 	bl	80002d8 <__aeabi_dsub>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4640      	mov	r0, r8
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	f7f5 fc3f 	bl	8000b2c <__aeabi_dcmplt>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f43f af2f 	beq.w	800b112 <_dtoa_r+0x47a>
 800b2b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b2b6:	1e6b      	subs	r3, r5, #1
 800b2b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2be:	2b30      	cmp	r3, #48	; 0x30
 800b2c0:	d0f8      	beq.n	800b2b4 <_dtoa_r+0x61c>
 800b2c2:	46bb      	mov	fp, r7
 800b2c4:	e04a      	b.n	800b35c <_dtoa_r+0x6c4>
 800b2c6:	4b06      	ldr	r3, [pc, #24]	; (800b2e0 <_dtoa_r+0x648>)
 800b2c8:	f7f5 f9be 	bl	8000648 <__aeabi_dmul>
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	4689      	mov	r9, r1
 800b2d0:	e7bd      	b.n	800b24e <_dtoa_r+0x5b6>
 800b2d2:	bf00      	nop
 800b2d4:	0800ce78 	.word	0x0800ce78
 800b2d8:	0800ce50 	.word	0x0800ce50
 800b2dc:	3ff00000 	.word	0x3ff00000
 800b2e0:	40240000 	.word	0x40240000
 800b2e4:	401c0000 	.word	0x401c0000
 800b2e8:	40140000 	.word	0x40140000
 800b2ec:	3fe00000 	.word	0x3fe00000
 800b2f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2f4:	9d00      	ldr	r5, [sp, #0]
 800b2f6:	4642      	mov	r2, r8
 800b2f8:	464b      	mov	r3, r9
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	4639      	mov	r1, r7
 800b2fe:	f7f5 facd 	bl	800089c <__aeabi_ddiv>
 800b302:	f7f5 fc51 	bl	8000ba8 <__aeabi_d2iz>
 800b306:	9001      	str	r0, [sp, #4]
 800b308:	f7f5 f934 	bl	8000574 <__aeabi_i2d>
 800b30c:	4642      	mov	r2, r8
 800b30e:	464b      	mov	r3, r9
 800b310:	f7f5 f99a 	bl	8000648 <__aeabi_dmul>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	4630      	mov	r0, r6
 800b31a:	4639      	mov	r1, r7
 800b31c:	f7f4 ffdc 	bl	80002d8 <__aeabi_dsub>
 800b320:	9e01      	ldr	r6, [sp, #4]
 800b322:	9f04      	ldr	r7, [sp, #16]
 800b324:	3630      	adds	r6, #48	; 0x30
 800b326:	f805 6b01 	strb.w	r6, [r5], #1
 800b32a:	9e00      	ldr	r6, [sp, #0]
 800b32c:	1bae      	subs	r6, r5, r6
 800b32e:	42b7      	cmp	r7, r6
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	d134      	bne.n	800b3a0 <_dtoa_r+0x708>
 800b336:	f7f4 ffd1 	bl	80002dc <__adddf3>
 800b33a:	4642      	mov	r2, r8
 800b33c:	464b      	mov	r3, r9
 800b33e:	4606      	mov	r6, r0
 800b340:	460f      	mov	r7, r1
 800b342:	f7f5 fc11 	bl	8000b68 <__aeabi_dcmpgt>
 800b346:	b9c8      	cbnz	r0, 800b37c <_dtoa_r+0x6e4>
 800b348:	4642      	mov	r2, r8
 800b34a:	464b      	mov	r3, r9
 800b34c:	4630      	mov	r0, r6
 800b34e:	4639      	mov	r1, r7
 800b350:	f7f5 fbe2 	bl	8000b18 <__aeabi_dcmpeq>
 800b354:	b110      	cbz	r0, 800b35c <_dtoa_r+0x6c4>
 800b356:	9b01      	ldr	r3, [sp, #4]
 800b358:	07db      	lsls	r3, r3, #31
 800b35a:	d40f      	bmi.n	800b37c <_dtoa_r+0x6e4>
 800b35c:	4651      	mov	r1, sl
 800b35e:	4620      	mov	r0, r4
 800b360:	f000 fbcc 	bl	800bafc <_Bfree>
 800b364:	2300      	movs	r3, #0
 800b366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b368:	702b      	strb	r3, [r5, #0]
 800b36a:	f10b 0301 	add.w	r3, fp, #1
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b372:	2b00      	cmp	r3, #0
 800b374:	f43f ace2 	beq.w	800ad3c <_dtoa_r+0xa4>
 800b378:	601d      	str	r5, [r3, #0]
 800b37a:	e4df      	b.n	800ad3c <_dtoa_r+0xa4>
 800b37c:	465f      	mov	r7, fp
 800b37e:	462b      	mov	r3, r5
 800b380:	461d      	mov	r5, r3
 800b382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b386:	2a39      	cmp	r2, #57	; 0x39
 800b388:	d106      	bne.n	800b398 <_dtoa_r+0x700>
 800b38a:	9a00      	ldr	r2, [sp, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d1f7      	bne.n	800b380 <_dtoa_r+0x6e8>
 800b390:	9900      	ldr	r1, [sp, #0]
 800b392:	2230      	movs	r2, #48	; 0x30
 800b394:	3701      	adds	r7, #1
 800b396:	700a      	strb	r2, [r1, #0]
 800b398:	781a      	ldrb	r2, [r3, #0]
 800b39a:	3201      	adds	r2, #1
 800b39c:	701a      	strb	r2, [r3, #0]
 800b39e:	e790      	b.n	800b2c2 <_dtoa_r+0x62a>
 800b3a0:	4ba3      	ldr	r3, [pc, #652]	; (800b630 <_dtoa_r+0x998>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f7f5 f950 	bl	8000648 <__aeabi_dmul>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	4606      	mov	r6, r0
 800b3ae:	460f      	mov	r7, r1
 800b3b0:	f7f5 fbb2 	bl	8000b18 <__aeabi_dcmpeq>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d09e      	beq.n	800b2f6 <_dtoa_r+0x65e>
 800b3b8:	e7d0      	b.n	800b35c <_dtoa_r+0x6c4>
 800b3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	f000 80ca 	beq.w	800b556 <_dtoa_r+0x8be>
 800b3c2:	9a07      	ldr	r2, [sp, #28]
 800b3c4:	2a01      	cmp	r2, #1
 800b3c6:	f300 80ad 	bgt.w	800b524 <_dtoa_r+0x88c>
 800b3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3cc:	2a00      	cmp	r2, #0
 800b3ce:	f000 80a5 	beq.w	800b51c <_dtoa_r+0x884>
 800b3d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3d6:	9e08      	ldr	r6, [sp, #32]
 800b3d8:	9d05      	ldr	r5, [sp, #20]
 800b3da:	9a05      	ldr	r2, [sp, #20]
 800b3dc:	441a      	add	r2, r3
 800b3de:	9205      	str	r2, [sp, #20]
 800b3e0:	9a06      	ldr	r2, [sp, #24]
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	441a      	add	r2, r3
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	9206      	str	r2, [sp, #24]
 800b3ea:	f000 fc3d 	bl	800bc68 <__i2b>
 800b3ee:	4607      	mov	r7, r0
 800b3f0:	b165      	cbz	r5, 800b40c <_dtoa_r+0x774>
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dd09      	ble.n	800b40c <_dtoa_r+0x774>
 800b3f8:	42ab      	cmp	r3, r5
 800b3fa:	9a05      	ldr	r2, [sp, #20]
 800b3fc:	bfa8      	it	ge
 800b3fe:	462b      	movge	r3, r5
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	9205      	str	r2, [sp, #20]
 800b404:	9a06      	ldr	r2, [sp, #24]
 800b406:	1aed      	subs	r5, r5, r3
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	9306      	str	r3, [sp, #24]
 800b40c:	9b08      	ldr	r3, [sp, #32]
 800b40e:	b1f3      	cbz	r3, 800b44e <_dtoa_r+0x7b6>
 800b410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 80a3 	beq.w	800b55e <_dtoa_r+0x8c6>
 800b418:	2e00      	cmp	r6, #0
 800b41a:	dd10      	ble.n	800b43e <_dtoa_r+0x7a6>
 800b41c:	4639      	mov	r1, r7
 800b41e:	4632      	mov	r2, r6
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fce1 	bl	800bde8 <__pow5mult>
 800b426:	4652      	mov	r2, sl
 800b428:	4601      	mov	r1, r0
 800b42a:	4607      	mov	r7, r0
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 fc31 	bl	800bc94 <__multiply>
 800b432:	4651      	mov	r1, sl
 800b434:	4680      	mov	r8, r0
 800b436:	4620      	mov	r0, r4
 800b438:	f000 fb60 	bl	800bafc <_Bfree>
 800b43c:	46c2      	mov	sl, r8
 800b43e:	9b08      	ldr	r3, [sp, #32]
 800b440:	1b9a      	subs	r2, r3, r6
 800b442:	d004      	beq.n	800b44e <_dtoa_r+0x7b6>
 800b444:	4651      	mov	r1, sl
 800b446:	4620      	mov	r0, r4
 800b448:	f000 fcce 	bl	800bde8 <__pow5mult>
 800b44c:	4682      	mov	sl, r0
 800b44e:	2101      	movs	r1, #1
 800b450:	4620      	mov	r0, r4
 800b452:	f000 fc09 	bl	800bc68 <__i2b>
 800b456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	4606      	mov	r6, r0
 800b45c:	f340 8081 	ble.w	800b562 <_dtoa_r+0x8ca>
 800b460:	461a      	mov	r2, r3
 800b462:	4601      	mov	r1, r0
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fcbf 	bl	800bde8 <__pow5mult>
 800b46a:	9b07      	ldr	r3, [sp, #28]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	4606      	mov	r6, r0
 800b470:	dd7a      	ble.n	800b568 <_dtoa_r+0x8d0>
 800b472:	f04f 0800 	mov.w	r8, #0
 800b476:	6933      	ldr	r3, [r6, #16]
 800b478:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b47c:	6918      	ldr	r0, [r3, #16]
 800b47e:	f000 fba5 	bl	800bbcc <__hi0bits>
 800b482:	f1c0 0020 	rsb	r0, r0, #32
 800b486:	9b06      	ldr	r3, [sp, #24]
 800b488:	4418      	add	r0, r3
 800b48a:	f010 001f 	ands.w	r0, r0, #31
 800b48e:	f000 8094 	beq.w	800b5ba <_dtoa_r+0x922>
 800b492:	f1c0 0320 	rsb	r3, r0, #32
 800b496:	2b04      	cmp	r3, #4
 800b498:	f340 8085 	ble.w	800b5a6 <_dtoa_r+0x90e>
 800b49c:	9b05      	ldr	r3, [sp, #20]
 800b49e:	f1c0 001c 	rsb	r0, r0, #28
 800b4a2:	4403      	add	r3, r0
 800b4a4:	9305      	str	r3, [sp, #20]
 800b4a6:	9b06      	ldr	r3, [sp, #24]
 800b4a8:	4403      	add	r3, r0
 800b4aa:	4405      	add	r5, r0
 800b4ac:	9306      	str	r3, [sp, #24]
 800b4ae:	9b05      	ldr	r3, [sp, #20]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dd05      	ble.n	800b4c0 <_dtoa_r+0x828>
 800b4b4:	4651      	mov	r1, sl
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f000 fcef 	bl	800be9c <__lshift>
 800b4be:	4682      	mov	sl, r0
 800b4c0:	9b06      	ldr	r3, [sp, #24]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	dd05      	ble.n	800b4d2 <_dtoa_r+0x83a>
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f000 fce6 	bl	800be9c <__lshift>
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d072      	beq.n	800b5be <_dtoa_r+0x926>
 800b4d8:	4631      	mov	r1, r6
 800b4da:	4650      	mov	r0, sl
 800b4dc:	f000 fd4a 	bl	800bf74 <__mcmp>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	da6c      	bge.n	800b5be <_dtoa_r+0x926>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	4651      	mov	r1, sl
 800b4e8:	220a      	movs	r2, #10
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 fb28 	bl	800bb40 <__multadd>
 800b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4f6:	4682      	mov	sl, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 81b0 	beq.w	800b85e <_dtoa_r+0xbc6>
 800b4fe:	2300      	movs	r3, #0
 800b500:	4639      	mov	r1, r7
 800b502:	220a      	movs	r2, #10
 800b504:	4620      	mov	r0, r4
 800b506:	f000 fb1b 	bl	800bb40 <__multadd>
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	4607      	mov	r7, r0
 800b510:	f300 8096 	bgt.w	800b640 <_dtoa_r+0x9a8>
 800b514:	9b07      	ldr	r3, [sp, #28]
 800b516:	2b02      	cmp	r3, #2
 800b518:	dc59      	bgt.n	800b5ce <_dtoa_r+0x936>
 800b51a:	e091      	b.n	800b640 <_dtoa_r+0x9a8>
 800b51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b51e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b522:	e758      	b.n	800b3d6 <_dtoa_r+0x73e>
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	1e5e      	subs	r6, r3, #1
 800b528:	9b08      	ldr	r3, [sp, #32]
 800b52a:	42b3      	cmp	r3, r6
 800b52c:	bfbf      	itttt	lt
 800b52e:	9b08      	ldrlt	r3, [sp, #32]
 800b530:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b532:	9608      	strlt	r6, [sp, #32]
 800b534:	1af3      	sublt	r3, r6, r3
 800b536:	bfb4      	ite	lt
 800b538:	18d2      	addlt	r2, r2, r3
 800b53a:	1b9e      	subge	r6, r3, r6
 800b53c:	9b04      	ldr	r3, [sp, #16]
 800b53e:	bfbc      	itt	lt
 800b540:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b542:	2600      	movlt	r6, #0
 800b544:	2b00      	cmp	r3, #0
 800b546:	bfb7      	itett	lt
 800b548:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b54c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b550:	1a9d      	sublt	r5, r3, r2
 800b552:	2300      	movlt	r3, #0
 800b554:	e741      	b.n	800b3da <_dtoa_r+0x742>
 800b556:	9e08      	ldr	r6, [sp, #32]
 800b558:	9d05      	ldr	r5, [sp, #20]
 800b55a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b55c:	e748      	b.n	800b3f0 <_dtoa_r+0x758>
 800b55e:	9a08      	ldr	r2, [sp, #32]
 800b560:	e770      	b.n	800b444 <_dtoa_r+0x7ac>
 800b562:	9b07      	ldr	r3, [sp, #28]
 800b564:	2b01      	cmp	r3, #1
 800b566:	dc19      	bgt.n	800b59c <_dtoa_r+0x904>
 800b568:	9b02      	ldr	r3, [sp, #8]
 800b56a:	b9bb      	cbnz	r3, 800b59c <_dtoa_r+0x904>
 800b56c:	9b03      	ldr	r3, [sp, #12]
 800b56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b572:	b99b      	cbnz	r3, 800b59c <_dtoa_r+0x904>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b57a:	0d1b      	lsrs	r3, r3, #20
 800b57c:	051b      	lsls	r3, r3, #20
 800b57e:	b183      	cbz	r3, 800b5a2 <_dtoa_r+0x90a>
 800b580:	9b05      	ldr	r3, [sp, #20]
 800b582:	3301      	adds	r3, #1
 800b584:	9305      	str	r3, [sp, #20]
 800b586:	9b06      	ldr	r3, [sp, #24]
 800b588:	3301      	adds	r3, #1
 800b58a:	9306      	str	r3, [sp, #24]
 800b58c:	f04f 0801 	mov.w	r8, #1
 800b590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b592:	2b00      	cmp	r3, #0
 800b594:	f47f af6f 	bne.w	800b476 <_dtoa_r+0x7de>
 800b598:	2001      	movs	r0, #1
 800b59a:	e774      	b.n	800b486 <_dtoa_r+0x7ee>
 800b59c:	f04f 0800 	mov.w	r8, #0
 800b5a0:	e7f6      	b.n	800b590 <_dtoa_r+0x8f8>
 800b5a2:	4698      	mov	r8, r3
 800b5a4:	e7f4      	b.n	800b590 <_dtoa_r+0x8f8>
 800b5a6:	d082      	beq.n	800b4ae <_dtoa_r+0x816>
 800b5a8:	9a05      	ldr	r2, [sp, #20]
 800b5aa:	331c      	adds	r3, #28
 800b5ac:	441a      	add	r2, r3
 800b5ae:	9205      	str	r2, [sp, #20]
 800b5b0:	9a06      	ldr	r2, [sp, #24]
 800b5b2:	441a      	add	r2, r3
 800b5b4:	441d      	add	r5, r3
 800b5b6:	9206      	str	r2, [sp, #24]
 800b5b8:	e779      	b.n	800b4ae <_dtoa_r+0x816>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	e7f4      	b.n	800b5a8 <_dtoa_r+0x910>
 800b5be:	9b04      	ldr	r3, [sp, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dc37      	bgt.n	800b634 <_dtoa_r+0x99c>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	dd34      	ble.n	800b634 <_dtoa_r+0x99c>
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	b963      	cbnz	r3, 800b5ec <_dtoa_r+0x954>
 800b5d2:	4631      	mov	r1, r6
 800b5d4:	2205      	movs	r2, #5
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 fab2 	bl	800bb40 <__multadd>
 800b5dc:	4601      	mov	r1, r0
 800b5de:	4606      	mov	r6, r0
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	f000 fcc7 	bl	800bf74 <__mcmp>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f73f adbb 	bgt.w	800b162 <_dtoa_r+0x4ca>
 800b5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ee:	9d00      	ldr	r5, [sp, #0]
 800b5f0:	ea6f 0b03 	mvn.w	fp, r3
 800b5f4:	f04f 0800 	mov.w	r8, #0
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fa7e 	bl	800bafc <_Bfree>
 800b600:	2f00      	cmp	r7, #0
 800b602:	f43f aeab 	beq.w	800b35c <_dtoa_r+0x6c4>
 800b606:	f1b8 0f00 	cmp.w	r8, #0
 800b60a:	d005      	beq.n	800b618 <_dtoa_r+0x980>
 800b60c:	45b8      	cmp	r8, r7
 800b60e:	d003      	beq.n	800b618 <_dtoa_r+0x980>
 800b610:	4641      	mov	r1, r8
 800b612:	4620      	mov	r0, r4
 800b614:	f000 fa72 	bl	800bafc <_Bfree>
 800b618:	4639      	mov	r1, r7
 800b61a:	4620      	mov	r0, r4
 800b61c:	f000 fa6e 	bl	800bafc <_Bfree>
 800b620:	e69c      	b.n	800b35c <_dtoa_r+0x6c4>
 800b622:	2600      	movs	r6, #0
 800b624:	4637      	mov	r7, r6
 800b626:	e7e1      	b.n	800b5ec <_dtoa_r+0x954>
 800b628:	46bb      	mov	fp, r7
 800b62a:	4637      	mov	r7, r6
 800b62c:	e599      	b.n	800b162 <_dtoa_r+0x4ca>
 800b62e:	bf00      	nop
 800b630:	40240000 	.word	0x40240000
 800b634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 80c8 	beq.w	800b7cc <_dtoa_r+0xb34>
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	9301      	str	r3, [sp, #4]
 800b640:	2d00      	cmp	r5, #0
 800b642:	dd05      	ble.n	800b650 <_dtoa_r+0x9b8>
 800b644:	4639      	mov	r1, r7
 800b646:	462a      	mov	r2, r5
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 fc27 	bl	800be9c <__lshift>
 800b64e:	4607      	mov	r7, r0
 800b650:	f1b8 0f00 	cmp.w	r8, #0
 800b654:	d05b      	beq.n	800b70e <_dtoa_r+0xa76>
 800b656:	6879      	ldr	r1, [r7, #4]
 800b658:	4620      	mov	r0, r4
 800b65a:	f000 fa0f 	bl	800ba7c <_Balloc>
 800b65e:	4605      	mov	r5, r0
 800b660:	b928      	cbnz	r0, 800b66e <_dtoa_r+0x9d6>
 800b662:	4b83      	ldr	r3, [pc, #524]	; (800b870 <_dtoa_r+0xbd8>)
 800b664:	4602      	mov	r2, r0
 800b666:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b66a:	f7ff bb2e 	b.w	800acca <_dtoa_r+0x32>
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	3202      	adds	r2, #2
 800b672:	0092      	lsls	r2, r2, #2
 800b674:	f107 010c 	add.w	r1, r7, #12
 800b678:	300c      	adds	r0, #12
 800b67a:	f7ff fa74 	bl	800ab66 <memcpy>
 800b67e:	2201      	movs	r2, #1
 800b680:	4629      	mov	r1, r5
 800b682:	4620      	mov	r0, r4
 800b684:	f000 fc0a 	bl	800be9c <__lshift>
 800b688:	9b00      	ldr	r3, [sp, #0]
 800b68a:	3301      	adds	r3, #1
 800b68c:	9304      	str	r3, [sp, #16]
 800b68e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b692:	4413      	add	r3, r2
 800b694:	9308      	str	r3, [sp, #32]
 800b696:	9b02      	ldr	r3, [sp, #8]
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	46b8      	mov	r8, r7
 800b69e:	9306      	str	r3, [sp, #24]
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	f7ff fa69 	bl	800ab82 <quorem>
 800b6b0:	4641      	mov	r1, r8
 800b6b2:	9002      	str	r0, [sp, #8]
 800b6b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b6b8:	4650      	mov	r0, sl
 800b6ba:	f000 fc5b 	bl	800bf74 <__mcmp>
 800b6be:	463a      	mov	r2, r7
 800b6c0:	9005      	str	r0, [sp, #20]
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f000 fc71 	bl	800bfac <__mdiff>
 800b6ca:	68c2      	ldr	r2, [r0, #12]
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	bb02      	cbnz	r2, 800b712 <_dtoa_r+0xa7a>
 800b6d0:	4601      	mov	r1, r0
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	f000 fc4e 	bl	800bf74 <__mcmp>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4620      	mov	r0, r4
 800b6de:	9209      	str	r2, [sp, #36]	; 0x24
 800b6e0:	f000 fa0c 	bl	800bafc <_Bfree>
 800b6e4:	9b07      	ldr	r3, [sp, #28]
 800b6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6e8:	9d04      	ldr	r5, [sp, #16]
 800b6ea:	ea43 0102 	orr.w	r1, r3, r2
 800b6ee:	9b06      	ldr	r3, [sp, #24]
 800b6f0:	4319      	orrs	r1, r3
 800b6f2:	d110      	bne.n	800b716 <_dtoa_r+0xa7e>
 800b6f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b6f8:	d029      	beq.n	800b74e <_dtoa_r+0xab6>
 800b6fa:	9b05      	ldr	r3, [sp, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd02      	ble.n	800b706 <_dtoa_r+0xa6e>
 800b700:	9b02      	ldr	r3, [sp, #8]
 800b702:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b706:	9b01      	ldr	r3, [sp, #4]
 800b708:	f883 9000 	strb.w	r9, [r3]
 800b70c:	e774      	b.n	800b5f8 <_dtoa_r+0x960>
 800b70e:	4638      	mov	r0, r7
 800b710:	e7ba      	b.n	800b688 <_dtoa_r+0x9f0>
 800b712:	2201      	movs	r2, #1
 800b714:	e7e1      	b.n	800b6da <_dtoa_r+0xa42>
 800b716:	9b05      	ldr	r3, [sp, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	db04      	blt.n	800b726 <_dtoa_r+0xa8e>
 800b71c:	9907      	ldr	r1, [sp, #28]
 800b71e:	430b      	orrs	r3, r1
 800b720:	9906      	ldr	r1, [sp, #24]
 800b722:	430b      	orrs	r3, r1
 800b724:	d120      	bne.n	800b768 <_dtoa_r+0xad0>
 800b726:	2a00      	cmp	r2, #0
 800b728:	dded      	ble.n	800b706 <_dtoa_r+0xa6e>
 800b72a:	4651      	mov	r1, sl
 800b72c:	2201      	movs	r2, #1
 800b72e:	4620      	mov	r0, r4
 800b730:	f000 fbb4 	bl	800be9c <__lshift>
 800b734:	4631      	mov	r1, r6
 800b736:	4682      	mov	sl, r0
 800b738:	f000 fc1c 	bl	800bf74 <__mcmp>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	dc03      	bgt.n	800b748 <_dtoa_r+0xab0>
 800b740:	d1e1      	bne.n	800b706 <_dtoa_r+0xa6e>
 800b742:	f019 0f01 	tst.w	r9, #1
 800b746:	d0de      	beq.n	800b706 <_dtoa_r+0xa6e>
 800b748:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b74c:	d1d8      	bne.n	800b700 <_dtoa_r+0xa68>
 800b74e:	9a01      	ldr	r2, [sp, #4]
 800b750:	2339      	movs	r3, #57	; 0x39
 800b752:	7013      	strb	r3, [r2, #0]
 800b754:	462b      	mov	r3, r5
 800b756:	461d      	mov	r5, r3
 800b758:	3b01      	subs	r3, #1
 800b75a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b75e:	2a39      	cmp	r2, #57	; 0x39
 800b760:	d06c      	beq.n	800b83c <_dtoa_r+0xba4>
 800b762:	3201      	adds	r2, #1
 800b764:	701a      	strb	r2, [r3, #0]
 800b766:	e747      	b.n	800b5f8 <_dtoa_r+0x960>
 800b768:	2a00      	cmp	r2, #0
 800b76a:	dd07      	ble.n	800b77c <_dtoa_r+0xae4>
 800b76c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b770:	d0ed      	beq.n	800b74e <_dtoa_r+0xab6>
 800b772:	9a01      	ldr	r2, [sp, #4]
 800b774:	f109 0301 	add.w	r3, r9, #1
 800b778:	7013      	strb	r3, [r2, #0]
 800b77a:	e73d      	b.n	800b5f8 <_dtoa_r+0x960>
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	9a08      	ldr	r2, [sp, #32]
 800b780:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b784:	4293      	cmp	r3, r2
 800b786:	d043      	beq.n	800b810 <_dtoa_r+0xb78>
 800b788:	4651      	mov	r1, sl
 800b78a:	2300      	movs	r3, #0
 800b78c:	220a      	movs	r2, #10
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f9d6 	bl	800bb40 <__multadd>
 800b794:	45b8      	cmp	r8, r7
 800b796:	4682      	mov	sl, r0
 800b798:	f04f 0300 	mov.w	r3, #0
 800b79c:	f04f 020a 	mov.w	r2, #10
 800b7a0:	4641      	mov	r1, r8
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	d107      	bne.n	800b7b6 <_dtoa_r+0xb1e>
 800b7a6:	f000 f9cb 	bl	800bb40 <__multadd>
 800b7aa:	4680      	mov	r8, r0
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	e775      	b.n	800b6a2 <_dtoa_r+0xa0a>
 800b7b6:	f000 f9c3 	bl	800bb40 <__multadd>
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	4680      	mov	r8, r0
 800b7be:	2300      	movs	r3, #0
 800b7c0:	220a      	movs	r2, #10
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 f9bc 	bl	800bb40 <__multadd>
 800b7c8:	4607      	mov	r7, r0
 800b7ca:	e7f0      	b.n	800b7ae <_dtoa_r+0xb16>
 800b7cc:	9b04      	ldr	r3, [sp, #16]
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	9d00      	ldr	r5, [sp, #0]
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	4650      	mov	r0, sl
 800b7d6:	f7ff f9d4 	bl	800ab82 <quorem>
 800b7da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b7de:	9b00      	ldr	r3, [sp, #0]
 800b7e0:	f805 9b01 	strb.w	r9, [r5], #1
 800b7e4:	1aea      	subs	r2, r5, r3
 800b7e6:	9b01      	ldr	r3, [sp, #4]
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	dd07      	ble.n	800b7fc <_dtoa_r+0xb64>
 800b7ec:	4651      	mov	r1, sl
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	220a      	movs	r2, #10
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 f9a4 	bl	800bb40 <__multadd>
 800b7f8:	4682      	mov	sl, r0
 800b7fa:	e7ea      	b.n	800b7d2 <_dtoa_r+0xb3a>
 800b7fc:	9b01      	ldr	r3, [sp, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bfc8      	it	gt
 800b802:	461d      	movgt	r5, r3
 800b804:	9b00      	ldr	r3, [sp, #0]
 800b806:	bfd8      	it	le
 800b808:	2501      	movle	r5, #1
 800b80a:	441d      	add	r5, r3
 800b80c:	f04f 0800 	mov.w	r8, #0
 800b810:	4651      	mov	r1, sl
 800b812:	2201      	movs	r2, #1
 800b814:	4620      	mov	r0, r4
 800b816:	f000 fb41 	bl	800be9c <__lshift>
 800b81a:	4631      	mov	r1, r6
 800b81c:	4682      	mov	sl, r0
 800b81e:	f000 fba9 	bl	800bf74 <__mcmp>
 800b822:	2800      	cmp	r0, #0
 800b824:	dc96      	bgt.n	800b754 <_dtoa_r+0xabc>
 800b826:	d102      	bne.n	800b82e <_dtoa_r+0xb96>
 800b828:	f019 0f01 	tst.w	r9, #1
 800b82c:	d192      	bne.n	800b754 <_dtoa_r+0xabc>
 800b82e:	462b      	mov	r3, r5
 800b830:	461d      	mov	r5, r3
 800b832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b836:	2a30      	cmp	r2, #48	; 0x30
 800b838:	d0fa      	beq.n	800b830 <_dtoa_r+0xb98>
 800b83a:	e6dd      	b.n	800b5f8 <_dtoa_r+0x960>
 800b83c:	9a00      	ldr	r2, [sp, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d189      	bne.n	800b756 <_dtoa_r+0xabe>
 800b842:	f10b 0b01 	add.w	fp, fp, #1
 800b846:	2331      	movs	r3, #49	; 0x31
 800b848:	e796      	b.n	800b778 <_dtoa_r+0xae0>
 800b84a:	4b0a      	ldr	r3, [pc, #40]	; (800b874 <_dtoa_r+0xbdc>)
 800b84c:	f7ff ba99 	b.w	800ad82 <_dtoa_r+0xea>
 800b850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b852:	2b00      	cmp	r3, #0
 800b854:	f47f aa6d 	bne.w	800ad32 <_dtoa_r+0x9a>
 800b858:	4b07      	ldr	r3, [pc, #28]	; (800b878 <_dtoa_r+0xbe0>)
 800b85a:	f7ff ba92 	b.w	800ad82 <_dtoa_r+0xea>
 800b85e:	9b01      	ldr	r3, [sp, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	dcb5      	bgt.n	800b7d0 <_dtoa_r+0xb38>
 800b864:	9b07      	ldr	r3, [sp, #28]
 800b866:	2b02      	cmp	r3, #2
 800b868:	f73f aeb1 	bgt.w	800b5ce <_dtoa_r+0x936>
 800b86c:	e7b0      	b.n	800b7d0 <_dtoa_r+0xb38>
 800b86e:	bf00      	nop
 800b870:	0800cde0 	.word	0x0800cde0
 800b874:	0800cd40 	.word	0x0800cd40
 800b878:	0800cd64 	.word	0x0800cd64

0800b87c <_free_r>:
 800b87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b87e:	2900      	cmp	r1, #0
 800b880:	d044      	beq.n	800b90c <_free_r+0x90>
 800b882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b886:	9001      	str	r0, [sp, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f1a1 0404 	sub.w	r4, r1, #4
 800b88e:	bfb8      	it	lt
 800b890:	18e4      	addlt	r4, r4, r3
 800b892:	f000 f8e7 	bl	800ba64 <__malloc_lock>
 800b896:	4a1e      	ldr	r2, [pc, #120]	; (800b910 <_free_r+0x94>)
 800b898:	9801      	ldr	r0, [sp, #4]
 800b89a:	6813      	ldr	r3, [r2, #0]
 800b89c:	b933      	cbnz	r3, 800b8ac <_free_r+0x30>
 800b89e:	6063      	str	r3, [r4, #4]
 800b8a0:	6014      	str	r4, [r2, #0]
 800b8a2:	b003      	add	sp, #12
 800b8a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8a8:	f000 b8e2 	b.w	800ba70 <__malloc_unlock>
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	d908      	bls.n	800b8c2 <_free_r+0x46>
 800b8b0:	6825      	ldr	r5, [r4, #0]
 800b8b2:	1961      	adds	r1, r4, r5
 800b8b4:	428b      	cmp	r3, r1
 800b8b6:	bf01      	itttt	eq
 800b8b8:	6819      	ldreq	r1, [r3, #0]
 800b8ba:	685b      	ldreq	r3, [r3, #4]
 800b8bc:	1949      	addeq	r1, r1, r5
 800b8be:	6021      	streq	r1, [r4, #0]
 800b8c0:	e7ed      	b.n	800b89e <_free_r+0x22>
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	b10b      	cbz	r3, 800b8cc <_free_r+0x50>
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	d9fa      	bls.n	800b8c2 <_free_r+0x46>
 800b8cc:	6811      	ldr	r1, [r2, #0]
 800b8ce:	1855      	adds	r5, r2, r1
 800b8d0:	42a5      	cmp	r5, r4
 800b8d2:	d10b      	bne.n	800b8ec <_free_r+0x70>
 800b8d4:	6824      	ldr	r4, [r4, #0]
 800b8d6:	4421      	add	r1, r4
 800b8d8:	1854      	adds	r4, r2, r1
 800b8da:	42a3      	cmp	r3, r4
 800b8dc:	6011      	str	r1, [r2, #0]
 800b8de:	d1e0      	bne.n	800b8a2 <_free_r+0x26>
 800b8e0:	681c      	ldr	r4, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	6053      	str	r3, [r2, #4]
 800b8e6:	440c      	add	r4, r1
 800b8e8:	6014      	str	r4, [r2, #0]
 800b8ea:	e7da      	b.n	800b8a2 <_free_r+0x26>
 800b8ec:	d902      	bls.n	800b8f4 <_free_r+0x78>
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	6003      	str	r3, [r0, #0]
 800b8f2:	e7d6      	b.n	800b8a2 <_free_r+0x26>
 800b8f4:	6825      	ldr	r5, [r4, #0]
 800b8f6:	1961      	adds	r1, r4, r5
 800b8f8:	428b      	cmp	r3, r1
 800b8fa:	bf04      	itt	eq
 800b8fc:	6819      	ldreq	r1, [r3, #0]
 800b8fe:	685b      	ldreq	r3, [r3, #4]
 800b900:	6063      	str	r3, [r4, #4]
 800b902:	bf04      	itt	eq
 800b904:	1949      	addeq	r1, r1, r5
 800b906:	6021      	streq	r1, [r4, #0]
 800b908:	6054      	str	r4, [r2, #4]
 800b90a:	e7ca      	b.n	800b8a2 <_free_r+0x26>
 800b90c:	b003      	add	sp, #12
 800b90e:	bd30      	pop	{r4, r5, pc}
 800b910:	200013d8 	.word	0x200013d8

0800b914 <malloc>:
 800b914:	4b02      	ldr	r3, [pc, #8]	; (800b920 <malloc+0xc>)
 800b916:	4601      	mov	r1, r0
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	f000 b823 	b.w	800b964 <_malloc_r>
 800b91e:	bf00      	nop
 800b920:	20000070 	.word	0x20000070

0800b924 <sbrk_aligned>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	4e0e      	ldr	r6, [pc, #56]	; (800b960 <sbrk_aligned+0x3c>)
 800b928:	460c      	mov	r4, r1
 800b92a:	6831      	ldr	r1, [r6, #0]
 800b92c:	4605      	mov	r5, r0
 800b92e:	b911      	cbnz	r1, 800b936 <sbrk_aligned+0x12>
 800b930:	f000 fe40 	bl	800c5b4 <_sbrk_r>
 800b934:	6030      	str	r0, [r6, #0]
 800b936:	4621      	mov	r1, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	f000 fe3b 	bl	800c5b4 <_sbrk_r>
 800b93e:	1c43      	adds	r3, r0, #1
 800b940:	d00a      	beq.n	800b958 <sbrk_aligned+0x34>
 800b942:	1cc4      	adds	r4, r0, #3
 800b944:	f024 0403 	bic.w	r4, r4, #3
 800b948:	42a0      	cmp	r0, r4
 800b94a:	d007      	beq.n	800b95c <sbrk_aligned+0x38>
 800b94c:	1a21      	subs	r1, r4, r0
 800b94e:	4628      	mov	r0, r5
 800b950:	f000 fe30 	bl	800c5b4 <_sbrk_r>
 800b954:	3001      	adds	r0, #1
 800b956:	d101      	bne.n	800b95c <sbrk_aligned+0x38>
 800b958:	f04f 34ff 	mov.w	r4, #4294967295
 800b95c:	4620      	mov	r0, r4
 800b95e:	bd70      	pop	{r4, r5, r6, pc}
 800b960:	200013dc 	.word	0x200013dc

0800b964 <_malloc_r>:
 800b964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b968:	1ccd      	adds	r5, r1, #3
 800b96a:	f025 0503 	bic.w	r5, r5, #3
 800b96e:	3508      	adds	r5, #8
 800b970:	2d0c      	cmp	r5, #12
 800b972:	bf38      	it	cc
 800b974:	250c      	movcc	r5, #12
 800b976:	2d00      	cmp	r5, #0
 800b978:	4607      	mov	r7, r0
 800b97a:	db01      	blt.n	800b980 <_malloc_r+0x1c>
 800b97c:	42a9      	cmp	r1, r5
 800b97e:	d905      	bls.n	800b98c <_malloc_r+0x28>
 800b980:	230c      	movs	r3, #12
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	2600      	movs	r6, #0
 800b986:	4630      	mov	r0, r6
 800b988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b98c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba60 <_malloc_r+0xfc>
 800b990:	f000 f868 	bl	800ba64 <__malloc_lock>
 800b994:	f8d8 3000 	ldr.w	r3, [r8]
 800b998:	461c      	mov	r4, r3
 800b99a:	bb5c      	cbnz	r4, 800b9f4 <_malloc_r+0x90>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4638      	mov	r0, r7
 800b9a0:	f7ff ffc0 	bl	800b924 <sbrk_aligned>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	d155      	bne.n	800ba56 <_malloc_r+0xf2>
 800b9aa:	f8d8 4000 	ldr.w	r4, [r8]
 800b9ae:	4626      	mov	r6, r4
 800b9b0:	2e00      	cmp	r6, #0
 800b9b2:	d145      	bne.n	800ba40 <_malloc_r+0xdc>
 800b9b4:	2c00      	cmp	r4, #0
 800b9b6:	d048      	beq.n	800ba4a <_malloc_r+0xe6>
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4638      	mov	r0, r7
 800b9be:	eb04 0903 	add.w	r9, r4, r3
 800b9c2:	f000 fdf7 	bl	800c5b4 <_sbrk_r>
 800b9c6:	4581      	cmp	r9, r0
 800b9c8:	d13f      	bne.n	800ba4a <_malloc_r+0xe6>
 800b9ca:	6821      	ldr	r1, [r4, #0]
 800b9cc:	1a6d      	subs	r5, r5, r1
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff ffa7 	bl	800b924 <sbrk_aligned>
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	d037      	beq.n	800ba4a <_malloc_r+0xe6>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	442b      	add	r3, r5
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d038      	beq.n	800ba5a <_malloc_r+0xf6>
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	42a2      	cmp	r2, r4
 800b9ec:	d12b      	bne.n	800ba46 <_malloc_r+0xe2>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	605a      	str	r2, [r3, #4]
 800b9f2:	e00f      	b.n	800ba14 <_malloc_r+0xb0>
 800b9f4:	6822      	ldr	r2, [r4, #0]
 800b9f6:	1b52      	subs	r2, r2, r5
 800b9f8:	d41f      	bmi.n	800ba3a <_malloc_r+0xd6>
 800b9fa:	2a0b      	cmp	r2, #11
 800b9fc:	d917      	bls.n	800ba2e <_malloc_r+0xca>
 800b9fe:	1961      	adds	r1, r4, r5
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	6025      	str	r5, [r4, #0]
 800ba04:	bf18      	it	ne
 800ba06:	6059      	strne	r1, [r3, #4]
 800ba08:	6863      	ldr	r3, [r4, #4]
 800ba0a:	bf08      	it	eq
 800ba0c:	f8c8 1000 	streq.w	r1, [r8]
 800ba10:	5162      	str	r2, [r4, r5]
 800ba12:	604b      	str	r3, [r1, #4]
 800ba14:	4638      	mov	r0, r7
 800ba16:	f104 060b 	add.w	r6, r4, #11
 800ba1a:	f000 f829 	bl	800ba70 <__malloc_unlock>
 800ba1e:	f026 0607 	bic.w	r6, r6, #7
 800ba22:	1d23      	adds	r3, r4, #4
 800ba24:	1af2      	subs	r2, r6, r3
 800ba26:	d0ae      	beq.n	800b986 <_malloc_r+0x22>
 800ba28:	1b9b      	subs	r3, r3, r6
 800ba2a:	50a3      	str	r3, [r4, r2]
 800ba2c:	e7ab      	b.n	800b986 <_malloc_r+0x22>
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	6862      	ldr	r2, [r4, #4]
 800ba32:	d1dd      	bne.n	800b9f0 <_malloc_r+0x8c>
 800ba34:	f8c8 2000 	str.w	r2, [r8]
 800ba38:	e7ec      	b.n	800ba14 <_malloc_r+0xb0>
 800ba3a:	4623      	mov	r3, r4
 800ba3c:	6864      	ldr	r4, [r4, #4]
 800ba3e:	e7ac      	b.n	800b99a <_malloc_r+0x36>
 800ba40:	4634      	mov	r4, r6
 800ba42:	6876      	ldr	r6, [r6, #4]
 800ba44:	e7b4      	b.n	800b9b0 <_malloc_r+0x4c>
 800ba46:	4613      	mov	r3, r2
 800ba48:	e7cc      	b.n	800b9e4 <_malloc_r+0x80>
 800ba4a:	230c      	movs	r3, #12
 800ba4c:	603b      	str	r3, [r7, #0]
 800ba4e:	4638      	mov	r0, r7
 800ba50:	f000 f80e 	bl	800ba70 <__malloc_unlock>
 800ba54:	e797      	b.n	800b986 <_malloc_r+0x22>
 800ba56:	6025      	str	r5, [r4, #0]
 800ba58:	e7dc      	b.n	800ba14 <_malloc_r+0xb0>
 800ba5a:	605b      	str	r3, [r3, #4]
 800ba5c:	deff      	udf	#255	; 0xff
 800ba5e:	bf00      	nop
 800ba60:	200013d8 	.word	0x200013d8

0800ba64 <__malloc_lock>:
 800ba64:	4801      	ldr	r0, [pc, #4]	; (800ba6c <__malloc_lock+0x8>)
 800ba66:	f7ff b87c 	b.w	800ab62 <__retarget_lock_acquire_recursive>
 800ba6a:	bf00      	nop
 800ba6c:	200013d4 	.word	0x200013d4

0800ba70 <__malloc_unlock>:
 800ba70:	4801      	ldr	r0, [pc, #4]	; (800ba78 <__malloc_unlock+0x8>)
 800ba72:	f7ff b877 	b.w	800ab64 <__retarget_lock_release_recursive>
 800ba76:	bf00      	nop
 800ba78:	200013d4 	.word	0x200013d4

0800ba7c <_Balloc>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	69c6      	ldr	r6, [r0, #28]
 800ba80:	4604      	mov	r4, r0
 800ba82:	460d      	mov	r5, r1
 800ba84:	b976      	cbnz	r6, 800baa4 <_Balloc+0x28>
 800ba86:	2010      	movs	r0, #16
 800ba88:	f7ff ff44 	bl	800b914 <malloc>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	61e0      	str	r0, [r4, #28]
 800ba90:	b920      	cbnz	r0, 800ba9c <_Balloc+0x20>
 800ba92:	4b18      	ldr	r3, [pc, #96]	; (800baf4 <_Balloc+0x78>)
 800ba94:	4818      	ldr	r0, [pc, #96]	; (800baf8 <_Balloc+0x7c>)
 800ba96:	216b      	movs	r1, #107	; 0x6b
 800ba98:	f000 fd9c 	bl	800c5d4 <__assert_func>
 800ba9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baa0:	6006      	str	r6, [r0, #0]
 800baa2:	60c6      	str	r6, [r0, #12]
 800baa4:	69e6      	ldr	r6, [r4, #28]
 800baa6:	68f3      	ldr	r3, [r6, #12]
 800baa8:	b183      	cbz	r3, 800bacc <_Balloc+0x50>
 800baaa:	69e3      	ldr	r3, [r4, #28]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bab2:	b9b8      	cbnz	r0, 800bae4 <_Balloc+0x68>
 800bab4:	2101      	movs	r1, #1
 800bab6:	fa01 f605 	lsl.w	r6, r1, r5
 800baba:	1d72      	adds	r2, r6, #5
 800babc:	0092      	lsls	r2, r2, #2
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 fda6 	bl	800c610 <_calloc_r>
 800bac4:	b160      	cbz	r0, 800bae0 <_Balloc+0x64>
 800bac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baca:	e00e      	b.n	800baea <_Balloc+0x6e>
 800bacc:	2221      	movs	r2, #33	; 0x21
 800bace:	2104      	movs	r1, #4
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 fd9d 	bl	800c610 <_calloc_r>
 800bad6:	69e3      	ldr	r3, [r4, #28]
 800bad8:	60f0      	str	r0, [r6, #12]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1e4      	bne.n	800baaa <_Balloc+0x2e>
 800bae0:	2000      	movs	r0, #0
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	6802      	ldr	r2, [r0, #0]
 800bae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baea:	2300      	movs	r3, #0
 800baec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800baf0:	e7f7      	b.n	800bae2 <_Balloc+0x66>
 800baf2:	bf00      	nop
 800baf4:	0800cd71 	.word	0x0800cd71
 800baf8:	0800cdf1 	.word	0x0800cdf1

0800bafc <_Bfree>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	69c6      	ldr	r6, [r0, #28]
 800bb00:	4605      	mov	r5, r0
 800bb02:	460c      	mov	r4, r1
 800bb04:	b976      	cbnz	r6, 800bb24 <_Bfree+0x28>
 800bb06:	2010      	movs	r0, #16
 800bb08:	f7ff ff04 	bl	800b914 <malloc>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	61e8      	str	r0, [r5, #28]
 800bb10:	b920      	cbnz	r0, 800bb1c <_Bfree+0x20>
 800bb12:	4b09      	ldr	r3, [pc, #36]	; (800bb38 <_Bfree+0x3c>)
 800bb14:	4809      	ldr	r0, [pc, #36]	; (800bb3c <_Bfree+0x40>)
 800bb16:	218f      	movs	r1, #143	; 0x8f
 800bb18:	f000 fd5c 	bl	800c5d4 <__assert_func>
 800bb1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb20:	6006      	str	r6, [r0, #0]
 800bb22:	60c6      	str	r6, [r0, #12]
 800bb24:	b13c      	cbz	r4, 800bb36 <_Bfree+0x3a>
 800bb26:	69eb      	ldr	r3, [r5, #28]
 800bb28:	6862      	ldr	r2, [r4, #4]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb30:	6021      	str	r1, [r4, #0]
 800bb32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
 800bb38:	0800cd71 	.word	0x0800cd71
 800bb3c:	0800cdf1 	.word	0x0800cdf1

0800bb40 <__multadd>:
 800bb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb44:	690d      	ldr	r5, [r1, #16]
 800bb46:	4607      	mov	r7, r0
 800bb48:	460c      	mov	r4, r1
 800bb4a:	461e      	mov	r6, r3
 800bb4c:	f101 0c14 	add.w	ip, r1, #20
 800bb50:	2000      	movs	r0, #0
 800bb52:	f8dc 3000 	ldr.w	r3, [ip]
 800bb56:	b299      	uxth	r1, r3
 800bb58:	fb02 6101 	mla	r1, r2, r1, r6
 800bb5c:	0c1e      	lsrs	r6, r3, #16
 800bb5e:	0c0b      	lsrs	r3, r1, #16
 800bb60:	fb02 3306 	mla	r3, r2, r6, r3
 800bb64:	b289      	uxth	r1, r1
 800bb66:	3001      	adds	r0, #1
 800bb68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb6c:	4285      	cmp	r5, r0
 800bb6e:	f84c 1b04 	str.w	r1, [ip], #4
 800bb72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb76:	dcec      	bgt.n	800bb52 <__multadd+0x12>
 800bb78:	b30e      	cbz	r6, 800bbbe <__multadd+0x7e>
 800bb7a:	68a3      	ldr	r3, [r4, #8]
 800bb7c:	42ab      	cmp	r3, r5
 800bb7e:	dc19      	bgt.n	800bbb4 <__multadd+0x74>
 800bb80:	6861      	ldr	r1, [r4, #4]
 800bb82:	4638      	mov	r0, r7
 800bb84:	3101      	adds	r1, #1
 800bb86:	f7ff ff79 	bl	800ba7c <_Balloc>
 800bb8a:	4680      	mov	r8, r0
 800bb8c:	b928      	cbnz	r0, 800bb9a <__multadd+0x5a>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	4b0c      	ldr	r3, [pc, #48]	; (800bbc4 <__multadd+0x84>)
 800bb92:	480d      	ldr	r0, [pc, #52]	; (800bbc8 <__multadd+0x88>)
 800bb94:	21ba      	movs	r1, #186	; 0xba
 800bb96:	f000 fd1d 	bl	800c5d4 <__assert_func>
 800bb9a:	6922      	ldr	r2, [r4, #16]
 800bb9c:	3202      	adds	r2, #2
 800bb9e:	f104 010c 	add.w	r1, r4, #12
 800bba2:	0092      	lsls	r2, r2, #2
 800bba4:	300c      	adds	r0, #12
 800bba6:	f7fe ffde 	bl	800ab66 <memcpy>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7ff ffa5 	bl	800bafc <_Bfree>
 800bbb2:	4644      	mov	r4, r8
 800bbb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbb8:	3501      	adds	r5, #1
 800bbba:	615e      	str	r6, [r3, #20]
 800bbbc:	6125      	str	r5, [r4, #16]
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc4:	0800cde0 	.word	0x0800cde0
 800bbc8:	0800cdf1 	.word	0x0800cdf1

0800bbcc <__hi0bits>:
 800bbcc:	0c03      	lsrs	r3, r0, #16
 800bbce:	041b      	lsls	r3, r3, #16
 800bbd0:	b9d3      	cbnz	r3, 800bc08 <__hi0bits+0x3c>
 800bbd2:	0400      	lsls	r0, r0, #16
 800bbd4:	2310      	movs	r3, #16
 800bbd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbda:	bf04      	itt	eq
 800bbdc:	0200      	lsleq	r0, r0, #8
 800bbde:	3308      	addeq	r3, #8
 800bbe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbe4:	bf04      	itt	eq
 800bbe6:	0100      	lsleq	r0, r0, #4
 800bbe8:	3304      	addeq	r3, #4
 800bbea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbee:	bf04      	itt	eq
 800bbf0:	0080      	lsleq	r0, r0, #2
 800bbf2:	3302      	addeq	r3, #2
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	db05      	blt.n	800bc04 <__hi0bits+0x38>
 800bbf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbfc:	f103 0301 	add.w	r3, r3, #1
 800bc00:	bf08      	it	eq
 800bc02:	2320      	moveq	r3, #32
 800bc04:	4618      	mov	r0, r3
 800bc06:	4770      	bx	lr
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e7e4      	b.n	800bbd6 <__hi0bits+0xa>

0800bc0c <__lo0bits>:
 800bc0c:	6803      	ldr	r3, [r0, #0]
 800bc0e:	f013 0207 	ands.w	r2, r3, #7
 800bc12:	d00c      	beq.n	800bc2e <__lo0bits+0x22>
 800bc14:	07d9      	lsls	r1, r3, #31
 800bc16:	d422      	bmi.n	800bc5e <__lo0bits+0x52>
 800bc18:	079a      	lsls	r2, r3, #30
 800bc1a:	bf49      	itett	mi
 800bc1c:	085b      	lsrmi	r3, r3, #1
 800bc1e:	089b      	lsrpl	r3, r3, #2
 800bc20:	6003      	strmi	r3, [r0, #0]
 800bc22:	2201      	movmi	r2, #1
 800bc24:	bf5c      	itt	pl
 800bc26:	6003      	strpl	r3, [r0, #0]
 800bc28:	2202      	movpl	r2, #2
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	4770      	bx	lr
 800bc2e:	b299      	uxth	r1, r3
 800bc30:	b909      	cbnz	r1, 800bc36 <__lo0bits+0x2a>
 800bc32:	0c1b      	lsrs	r3, r3, #16
 800bc34:	2210      	movs	r2, #16
 800bc36:	b2d9      	uxtb	r1, r3
 800bc38:	b909      	cbnz	r1, 800bc3e <__lo0bits+0x32>
 800bc3a:	3208      	adds	r2, #8
 800bc3c:	0a1b      	lsrs	r3, r3, #8
 800bc3e:	0719      	lsls	r1, r3, #28
 800bc40:	bf04      	itt	eq
 800bc42:	091b      	lsreq	r3, r3, #4
 800bc44:	3204      	addeq	r2, #4
 800bc46:	0799      	lsls	r1, r3, #30
 800bc48:	bf04      	itt	eq
 800bc4a:	089b      	lsreq	r3, r3, #2
 800bc4c:	3202      	addeq	r2, #2
 800bc4e:	07d9      	lsls	r1, r3, #31
 800bc50:	d403      	bmi.n	800bc5a <__lo0bits+0x4e>
 800bc52:	085b      	lsrs	r3, r3, #1
 800bc54:	f102 0201 	add.w	r2, r2, #1
 800bc58:	d003      	beq.n	800bc62 <__lo0bits+0x56>
 800bc5a:	6003      	str	r3, [r0, #0]
 800bc5c:	e7e5      	b.n	800bc2a <__lo0bits+0x1e>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	e7e3      	b.n	800bc2a <__lo0bits+0x1e>
 800bc62:	2220      	movs	r2, #32
 800bc64:	e7e1      	b.n	800bc2a <__lo0bits+0x1e>
	...

0800bc68 <__i2b>:
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	f7ff ff05 	bl	800ba7c <_Balloc>
 800bc72:	4602      	mov	r2, r0
 800bc74:	b928      	cbnz	r0, 800bc82 <__i2b+0x1a>
 800bc76:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <__i2b+0x24>)
 800bc78:	4805      	ldr	r0, [pc, #20]	; (800bc90 <__i2b+0x28>)
 800bc7a:	f240 1145 	movw	r1, #325	; 0x145
 800bc7e:	f000 fca9 	bl	800c5d4 <__assert_func>
 800bc82:	2301      	movs	r3, #1
 800bc84:	6144      	str	r4, [r0, #20]
 800bc86:	6103      	str	r3, [r0, #16]
 800bc88:	bd10      	pop	{r4, pc}
 800bc8a:	bf00      	nop
 800bc8c:	0800cde0 	.word	0x0800cde0
 800bc90:	0800cdf1 	.word	0x0800cdf1

0800bc94 <__multiply>:
 800bc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc98:	4691      	mov	r9, r2
 800bc9a:	690a      	ldr	r2, [r1, #16]
 800bc9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	bfb8      	it	lt
 800bca4:	460b      	movlt	r3, r1
 800bca6:	460c      	mov	r4, r1
 800bca8:	bfbc      	itt	lt
 800bcaa:	464c      	movlt	r4, r9
 800bcac:	4699      	movlt	r9, r3
 800bcae:	6927      	ldr	r7, [r4, #16]
 800bcb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcb4:	68a3      	ldr	r3, [r4, #8]
 800bcb6:	6861      	ldr	r1, [r4, #4]
 800bcb8:	eb07 060a 	add.w	r6, r7, sl
 800bcbc:	42b3      	cmp	r3, r6
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	bfb8      	it	lt
 800bcc2:	3101      	addlt	r1, #1
 800bcc4:	f7ff feda 	bl	800ba7c <_Balloc>
 800bcc8:	b930      	cbnz	r0, 800bcd8 <__multiply+0x44>
 800bcca:	4602      	mov	r2, r0
 800bccc:	4b44      	ldr	r3, [pc, #272]	; (800bde0 <__multiply+0x14c>)
 800bcce:	4845      	ldr	r0, [pc, #276]	; (800bde4 <__multiply+0x150>)
 800bcd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bcd4:	f000 fc7e 	bl	800c5d4 <__assert_func>
 800bcd8:	f100 0514 	add.w	r5, r0, #20
 800bcdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bce0:	462b      	mov	r3, r5
 800bce2:	2200      	movs	r2, #0
 800bce4:	4543      	cmp	r3, r8
 800bce6:	d321      	bcc.n	800bd2c <__multiply+0x98>
 800bce8:	f104 0314 	add.w	r3, r4, #20
 800bcec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcf0:	f109 0314 	add.w	r3, r9, #20
 800bcf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcf8:	9202      	str	r2, [sp, #8]
 800bcfa:	1b3a      	subs	r2, r7, r4
 800bcfc:	3a15      	subs	r2, #21
 800bcfe:	f022 0203 	bic.w	r2, r2, #3
 800bd02:	3204      	adds	r2, #4
 800bd04:	f104 0115 	add.w	r1, r4, #21
 800bd08:	428f      	cmp	r7, r1
 800bd0a:	bf38      	it	cc
 800bd0c:	2204      	movcc	r2, #4
 800bd0e:	9201      	str	r2, [sp, #4]
 800bd10:	9a02      	ldr	r2, [sp, #8]
 800bd12:	9303      	str	r3, [sp, #12]
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d80c      	bhi.n	800bd32 <__multiply+0x9e>
 800bd18:	2e00      	cmp	r6, #0
 800bd1a:	dd03      	ble.n	800bd24 <__multiply+0x90>
 800bd1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d05b      	beq.n	800bddc <__multiply+0x148>
 800bd24:	6106      	str	r6, [r0, #16]
 800bd26:	b005      	add	sp, #20
 800bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2c:	f843 2b04 	str.w	r2, [r3], #4
 800bd30:	e7d8      	b.n	800bce4 <__multiply+0x50>
 800bd32:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd36:	f1ba 0f00 	cmp.w	sl, #0
 800bd3a:	d024      	beq.n	800bd86 <__multiply+0xf2>
 800bd3c:	f104 0e14 	add.w	lr, r4, #20
 800bd40:	46a9      	mov	r9, r5
 800bd42:	f04f 0c00 	mov.w	ip, #0
 800bd46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd4a:	f8d9 1000 	ldr.w	r1, [r9]
 800bd4e:	fa1f fb82 	uxth.w	fp, r2
 800bd52:	b289      	uxth	r1, r1
 800bd54:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd5c:	f8d9 2000 	ldr.w	r2, [r9]
 800bd60:	4461      	add	r1, ip
 800bd62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd66:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd6e:	b289      	uxth	r1, r1
 800bd70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd74:	4577      	cmp	r7, lr
 800bd76:	f849 1b04 	str.w	r1, [r9], #4
 800bd7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd7e:	d8e2      	bhi.n	800bd46 <__multiply+0xb2>
 800bd80:	9a01      	ldr	r2, [sp, #4]
 800bd82:	f845 c002 	str.w	ip, [r5, r2]
 800bd86:	9a03      	ldr	r2, [sp, #12]
 800bd88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	f1b9 0f00 	cmp.w	r9, #0
 800bd92:	d021      	beq.n	800bdd8 <__multiply+0x144>
 800bd94:	6829      	ldr	r1, [r5, #0]
 800bd96:	f104 0c14 	add.w	ip, r4, #20
 800bd9a:	46ae      	mov	lr, r5
 800bd9c:	f04f 0a00 	mov.w	sl, #0
 800bda0:	f8bc b000 	ldrh.w	fp, [ip]
 800bda4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bda8:	fb09 220b 	mla	r2, r9, fp, r2
 800bdac:	4452      	add	r2, sl
 800bdae:	b289      	uxth	r1, r1
 800bdb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdb4:	f84e 1b04 	str.w	r1, [lr], #4
 800bdb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bdbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdc0:	f8be 1000 	ldrh.w	r1, [lr]
 800bdc4:	fb09 110a 	mla	r1, r9, sl, r1
 800bdc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bdcc:	4567      	cmp	r7, ip
 800bdce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdd2:	d8e5      	bhi.n	800bda0 <__multiply+0x10c>
 800bdd4:	9a01      	ldr	r2, [sp, #4]
 800bdd6:	50a9      	str	r1, [r5, r2]
 800bdd8:	3504      	adds	r5, #4
 800bdda:	e799      	b.n	800bd10 <__multiply+0x7c>
 800bddc:	3e01      	subs	r6, #1
 800bdde:	e79b      	b.n	800bd18 <__multiply+0x84>
 800bde0:	0800cde0 	.word	0x0800cde0
 800bde4:	0800cdf1 	.word	0x0800cdf1

0800bde8 <__pow5mult>:
 800bde8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdec:	4615      	mov	r5, r2
 800bdee:	f012 0203 	ands.w	r2, r2, #3
 800bdf2:	4606      	mov	r6, r0
 800bdf4:	460f      	mov	r7, r1
 800bdf6:	d007      	beq.n	800be08 <__pow5mult+0x20>
 800bdf8:	4c25      	ldr	r4, [pc, #148]	; (800be90 <__pow5mult+0xa8>)
 800bdfa:	3a01      	subs	r2, #1
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be02:	f7ff fe9d 	bl	800bb40 <__multadd>
 800be06:	4607      	mov	r7, r0
 800be08:	10ad      	asrs	r5, r5, #2
 800be0a:	d03d      	beq.n	800be88 <__pow5mult+0xa0>
 800be0c:	69f4      	ldr	r4, [r6, #28]
 800be0e:	b97c      	cbnz	r4, 800be30 <__pow5mult+0x48>
 800be10:	2010      	movs	r0, #16
 800be12:	f7ff fd7f 	bl	800b914 <malloc>
 800be16:	4602      	mov	r2, r0
 800be18:	61f0      	str	r0, [r6, #28]
 800be1a:	b928      	cbnz	r0, 800be28 <__pow5mult+0x40>
 800be1c:	4b1d      	ldr	r3, [pc, #116]	; (800be94 <__pow5mult+0xac>)
 800be1e:	481e      	ldr	r0, [pc, #120]	; (800be98 <__pow5mult+0xb0>)
 800be20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be24:	f000 fbd6 	bl	800c5d4 <__assert_func>
 800be28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be2c:	6004      	str	r4, [r0, #0]
 800be2e:	60c4      	str	r4, [r0, #12]
 800be30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be38:	b94c      	cbnz	r4, 800be4e <__pow5mult+0x66>
 800be3a:	f240 2171 	movw	r1, #625	; 0x271
 800be3e:	4630      	mov	r0, r6
 800be40:	f7ff ff12 	bl	800bc68 <__i2b>
 800be44:	2300      	movs	r3, #0
 800be46:	f8c8 0008 	str.w	r0, [r8, #8]
 800be4a:	4604      	mov	r4, r0
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	f04f 0900 	mov.w	r9, #0
 800be52:	07eb      	lsls	r3, r5, #31
 800be54:	d50a      	bpl.n	800be6c <__pow5mult+0x84>
 800be56:	4639      	mov	r1, r7
 800be58:	4622      	mov	r2, r4
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7ff ff1a 	bl	800bc94 <__multiply>
 800be60:	4639      	mov	r1, r7
 800be62:	4680      	mov	r8, r0
 800be64:	4630      	mov	r0, r6
 800be66:	f7ff fe49 	bl	800bafc <_Bfree>
 800be6a:	4647      	mov	r7, r8
 800be6c:	106d      	asrs	r5, r5, #1
 800be6e:	d00b      	beq.n	800be88 <__pow5mult+0xa0>
 800be70:	6820      	ldr	r0, [r4, #0]
 800be72:	b938      	cbnz	r0, 800be84 <__pow5mult+0x9c>
 800be74:	4622      	mov	r2, r4
 800be76:	4621      	mov	r1, r4
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ff0b 	bl	800bc94 <__multiply>
 800be7e:	6020      	str	r0, [r4, #0]
 800be80:	f8c0 9000 	str.w	r9, [r0]
 800be84:	4604      	mov	r4, r0
 800be86:	e7e4      	b.n	800be52 <__pow5mult+0x6a>
 800be88:	4638      	mov	r0, r7
 800be8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8e:	bf00      	nop
 800be90:	0800cf40 	.word	0x0800cf40
 800be94:	0800cd71 	.word	0x0800cd71
 800be98:	0800cdf1 	.word	0x0800cdf1

0800be9c <__lshift>:
 800be9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea0:	460c      	mov	r4, r1
 800bea2:	6849      	ldr	r1, [r1, #4]
 800bea4:	6923      	ldr	r3, [r4, #16]
 800bea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beaa:	68a3      	ldr	r3, [r4, #8]
 800beac:	4607      	mov	r7, r0
 800beae:	4691      	mov	r9, r2
 800beb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beb4:	f108 0601 	add.w	r6, r8, #1
 800beb8:	42b3      	cmp	r3, r6
 800beba:	db0b      	blt.n	800bed4 <__lshift+0x38>
 800bebc:	4638      	mov	r0, r7
 800bebe:	f7ff fddd 	bl	800ba7c <_Balloc>
 800bec2:	4605      	mov	r5, r0
 800bec4:	b948      	cbnz	r0, 800beda <__lshift+0x3e>
 800bec6:	4602      	mov	r2, r0
 800bec8:	4b28      	ldr	r3, [pc, #160]	; (800bf6c <__lshift+0xd0>)
 800beca:	4829      	ldr	r0, [pc, #164]	; (800bf70 <__lshift+0xd4>)
 800becc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bed0:	f000 fb80 	bl	800c5d4 <__assert_func>
 800bed4:	3101      	adds	r1, #1
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	e7ee      	b.n	800beb8 <__lshift+0x1c>
 800beda:	2300      	movs	r3, #0
 800bedc:	f100 0114 	add.w	r1, r0, #20
 800bee0:	f100 0210 	add.w	r2, r0, #16
 800bee4:	4618      	mov	r0, r3
 800bee6:	4553      	cmp	r3, sl
 800bee8:	db33      	blt.n	800bf52 <__lshift+0xb6>
 800beea:	6920      	ldr	r0, [r4, #16]
 800beec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bef0:	f104 0314 	add.w	r3, r4, #20
 800bef4:	f019 091f 	ands.w	r9, r9, #31
 800bef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800befc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf00:	d02b      	beq.n	800bf5a <__lshift+0xbe>
 800bf02:	f1c9 0e20 	rsb	lr, r9, #32
 800bf06:	468a      	mov	sl, r1
 800bf08:	2200      	movs	r2, #0
 800bf0a:	6818      	ldr	r0, [r3, #0]
 800bf0c:	fa00 f009 	lsl.w	r0, r0, r9
 800bf10:	4310      	orrs	r0, r2
 800bf12:	f84a 0b04 	str.w	r0, [sl], #4
 800bf16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1a:	459c      	cmp	ip, r3
 800bf1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf20:	d8f3      	bhi.n	800bf0a <__lshift+0x6e>
 800bf22:	ebac 0304 	sub.w	r3, ip, r4
 800bf26:	3b15      	subs	r3, #21
 800bf28:	f023 0303 	bic.w	r3, r3, #3
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	f104 0015 	add.w	r0, r4, #21
 800bf32:	4584      	cmp	ip, r0
 800bf34:	bf38      	it	cc
 800bf36:	2304      	movcc	r3, #4
 800bf38:	50ca      	str	r2, [r1, r3]
 800bf3a:	b10a      	cbz	r2, 800bf40 <__lshift+0xa4>
 800bf3c:	f108 0602 	add.w	r6, r8, #2
 800bf40:	3e01      	subs	r6, #1
 800bf42:	4638      	mov	r0, r7
 800bf44:	612e      	str	r6, [r5, #16]
 800bf46:	4621      	mov	r1, r4
 800bf48:	f7ff fdd8 	bl	800bafc <_Bfree>
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf52:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf56:	3301      	adds	r3, #1
 800bf58:	e7c5      	b.n	800bee6 <__lshift+0x4a>
 800bf5a:	3904      	subs	r1, #4
 800bf5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf60:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf64:	459c      	cmp	ip, r3
 800bf66:	d8f9      	bhi.n	800bf5c <__lshift+0xc0>
 800bf68:	e7ea      	b.n	800bf40 <__lshift+0xa4>
 800bf6a:	bf00      	nop
 800bf6c:	0800cde0 	.word	0x0800cde0
 800bf70:	0800cdf1 	.word	0x0800cdf1

0800bf74 <__mcmp>:
 800bf74:	b530      	push	{r4, r5, lr}
 800bf76:	6902      	ldr	r2, [r0, #16]
 800bf78:	690c      	ldr	r4, [r1, #16]
 800bf7a:	1b12      	subs	r2, r2, r4
 800bf7c:	d10e      	bne.n	800bf9c <__mcmp+0x28>
 800bf7e:	f100 0314 	add.w	r3, r0, #20
 800bf82:	3114      	adds	r1, #20
 800bf84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf94:	42a5      	cmp	r5, r4
 800bf96:	d003      	beq.n	800bfa0 <__mcmp+0x2c>
 800bf98:	d305      	bcc.n	800bfa6 <__mcmp+0x32>
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	bd30      	pop	{r4, r5, pc}
 800bfa0:	4283      	cmp	r3, r0
 800bfa2:	d3f3      	bcc.n	800bf8c <__mcmp+0x18>
 800bfa4:	e7fa      	b.n	800bf9c <__mcmp+0x28>
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	e7f7      	b.n	800bf9c <__mcmp+0x28>

0800bfac <__mdiff>:
 800bfac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4690      	mov	r8, r2
 800bfba:	f7ff ffdb 	bl	800bf74 <__mcmp>
 800bfbe:	1e05      	subs	r5, r0, #0
 800bfc0:	d110      	bne.n	800bfe4 <__mdiff+0x38>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff fd59 	bl	800ba7c <_Balloc>
 800bfca:	b930      	cbnz	r0, 800bfda <__mdiff+0x2e>
 800bfcc:	4b3a      	ldr	r3, [pc, #232]	; (800c0b8 <__mdiff+0x10c>)
 800bfce:	4602      	mov	r2, r0
 800bfd0:	f240 2137 	movw	r1, #567	; 0x237
 800bfd4:	4839      	ldr	r0, [pc, #228]	; (800c0bc <__mdiff+0x110>)
 800bfd6:	f000 fafd 	bl	800c5d4 <__assert_func>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe4:	bfa4      	itt	ge
 800bfe6:	4643      	movge	r3, r8
 800bfe8:	46a0      	movge	r8, r4
 800bfea:	4630      	mov	r0, r6
 800bfec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bff0:	bfa6      	itte	ge
 800bff2:	461c      	movge	r4, r3
 800bff4:	2500      	movge	r5, #0
 800bff6:	2501      	movlt	r5, #1
 800bff8:	f7ff fd40 	bl	800ba7c <_Balloc>
 800bffc:	b920      	cbnz	r0, 800c008 <__mdiff+0x5c>
 800bffe:	4b2e      	ldr	r3, [pc, #184]	; (800c0b8 <__mdiff+0x10c>)
 800c000:	4602      	mov	r2, r0
 800c002:	f240 2145 	movw	r1, #581	; 0x245
 800c006:	e7e5      	b.n	800bfd4 <__mdiff+0x28>
 800c008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c00c:	6926      	ldr	r6, [r4, #16]
 800c00e:	60c5      	str	r5, [r0, #12]
 800c010:	f104 0914 	add.w	r9, r4, #20
 800c014:	f108 0514 	add.w	r5, r8, #20
 800c018:	f100 0e14 	add.w	lr, r0, #20
 800c01c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c024:	f108 0210 	add.w	r2, r8, #16
 800c028:	46f2      	mov	sl, lr
 800c02a:	2100      	movs	r1, #0
 800c02c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c034:	fa11 f88b 	uxtah	r8, r1, fp
 800c038:	b299      	uxth	r1, r3
 800c03a:	0c1b      	lsrs	r3, r3, #16
 800c03c:	eba8 0801 	sub.w	r8, r8, r1
 800c040:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c044:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c048:	fa1f f888 	uxth.w	r8, r8
 800c04c:	1419      	asrs	r1, r3, #16
 800c04e:	454e      	cmp	r6, r9
 800c050:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c054:	f84a 3b04 	str.w	r3, [sl], #4
 800c058:	d8e8      	bhi.n	800c02c <__mdiff+0x80>
 800c05a:	1b33      	subs	r3, r6, r4
 800c05c:	3b15      	subs	r3, #21
 800c05e:	f023 0303 	bic.w	r3, r3, #3
 800c062:	3304      	adds	r3, #4
 800c064:	3415      	adds	r4, #21
 800c066:	42a6      	cmp	r6, r4
 800c068:	bf38      	it	cc
 800c06a:	2304      	movcc	r3, #4
 800c06c:	441d      	add	r5, r3
 800c06e:	4473      	add	r3, lr
 800c070:	469e      	mov	lr, r3
 800c072:	462e      	mov	r6, r5
 800c074:	4566      	cmp	r6, ip
 800c076:	d30e      	bcc.n	800c096 <__mdiff+0xea>
 800c078:	f10c 0203 	add.w	r2, ip, #3
 800c07c:	1b52      	subs	r2, r2, r5
 800c07e:	f022 0203 	bic.w	r2, r2, #3
 800c082:	3d03      	subs	r5, #3
 800c084:	45ac      	cmp	ip, r5
 800c086:	bf38      	it	cc
 800c088:	2200      	movcc	r2, #0
 800c08a:	4413      	add	r3, r2
 800c08c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c090:	b17a      	cbz	r2, 800c0b2 <__mdiff+0x106>
 800c092:	6107      	str	r7, [r0, #16]
 800c094:	e7a4      	b.n	800bfe0 <__mdiff+0x34>
 800c096:	f856 8b04 	ldr.w	r8, [r6], #4
 800c09a:	fa11 f288 	uxtah	r2, r1, r8
 800c09e:	1414      	asrs	r4, r2, #16
 800c0a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0a4:	b292      	uxth	r2, r2
 800c0a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0aa:	f84e 2b04 	str.w	r2, [lr], #4
 800c0ae:	1421      	asrs	r1, r4, #16
 800c0b0:	e7e0      	b.n	800c074 <__mdiff+0xc8>
 800c0b2:	3f01      	subs	r7, #1
 800c0b4:	e7ea      	b.n	800c08c <__mdiff+0xe0>
 800c0b6:	bf00      	nop
 800c0b8:	0800cde0 	.word	0x0800cde0
 800c0bc:	0800cdf1 	.word	0x0800cdf1

0800c0c0 <__d2b>:
 800c0c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	460f      	mov	r7, r1
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	ec59 8b10 	vmov	r8, r9, d0
 800c0cc:	4616      	mov	r6, r2
 800c0ce:	f7ff fcd5 	bl	800ba7c <_Balloc>
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	b930      	cbnz	r0, 800c0e4 <__d2b+0x24>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4b24      	ldr	r3, [pc, #144]	; (800c16c <__d2b+0xac>)
 800c0da:	4825      	ldr	r0, [pc, #148]	; (800c170 <__d2b+0xb0>)
 800c0dc:	f240 310f 	movw	r1, #783	; 0x30f
 800c0e0:	f000 fa78 	bl	800c5d4 <__assert_func>
 800c0e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0ec:	bb2d      	cbnz	r5, 800c13a <__d2b+0x7a>
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	f1b8 0300 	subs.w	r3, r8, #0
 800c0f4:	d026      	beq.n	800c144 <__d2b+0x84>
 800c0f6:	4668      	mov	r0, sp
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	f7ff fd87 	bl	800bc0c <__lo0bits>
 800c0fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c102:	b1e8      	cbz	r0, 800c140 <__d2b+0x80>
 800c104:	f1c0 0320 	rsb	r3, r0, #32
 800c108:	fa02 f303 	lsl.w	r3, r2, r3
 800c10c:	430b      	orrs	r3, r1
 800c10e:	40c2      	lsrs	r2, r0
 800c110:	6163      	str	r3, [r4, #20]
 800c112:	9201      	str	r2, [sp, #4]
 800c114:	9b01      	ldr	r3, [sp, #4]
 800c116:	61a3      	str	r3, [r4, #24]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	bf14      	ite	ne
 800c11c:	2202      	movne	r2, #2
 800c11e:	2201      	moveq	r2, #1
 800c120:	6122      	str	r2, [r4, #16]
 800c122:	b1bd      	cbz	r5, 800c154 <__d2b+0x94>
 800c124:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c128:	4405      	add	r5, r0
 800c12a:	603d      	str	r5, [r7, #0]
 800c12c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c130:	6030      	str	r0, [r6, #0]
 800c132:	4620      	mov	r0, r4
 800c134:	b003      	add	sp, #12
 800c136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c13a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c13e:	e7d6      	b.n	800c0ee <__d2b+0x2e>
 800c140:	6161      	str	r1, [r4, #20]
 800c142:	e7e7      	b.n	800c114 <__d2b+0x54>
 800c144:	a801      	add	r0, sp, #4
 800c146:	f7ff fd61 	bl	800bc0c <__lo0bits>
 800c14a:	9b01      	ldr	r3, [sp, #4]
 800c14c:	6163      	str	r3, [r4, #20]
 800c14e:	3020      	adds	r0, #32
 800c150:	2201      	movs	r2, #1
 800c152:	e7e5      	b.n	800c120 <__d2b+0x60>
 800c154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c15c:	6038      	str	r0, [r7, #0]
 800c15e:	6918      	ldr	r0, [r3, #16]
 800c160:	f7ff fd34 	bl	800bbcc <__hi0bits>
 800c164:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c168:	e7e2      	b.n	800c130 <__d2b+0x70>
 800c16a:	bf00      	nop
 800c16c:	0800cde0 	.word	0x0800cde0
 800c170:	0800cdf1 	.word	0x0800cdf1

0800c174 <__ssputs_r>:
 800c174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c178:	688e      	ldr	r6, [r1, #8]
 800c17a:	461f      	mov	r7, r3
 800c17c:	42be      	cmp	r6, r7
 800c17e:	680b      	ldr	r3, [r1, #0]
 800c180:	4682      	mov	sl, r0
 800c182:	460c      	mov	r4, r1
 800c184:	4690      	mov	r8, r2
 800c186:	d82c      	bhi.n	800c1e2 <__ssputs_r+0x6e>
 800c188:	898a      	ldrh	r2, [r1, #12]
 800c18a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c18e:	d026      	beq.n	800c1de <__ssputs_r+0x6a>
 800c190:	6965      	ldr	r5, [r4, #20]
 800c192:	6909      	ldr	r1, [r1, #16]
 800c194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c198:	eba3 0901 	sub.w	r9, r3, r1
 800c19c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1a0:	1c7b      	adds	r3, r7, #1
 800c1a2:	444b      	add	r3, r9
 800c1a4:	106d      	asrs	r5, r5, #1
 800c1a6:	429d      	cmp	r5, r3
 800c1a8:	bf38      	it	cc
 800c1aa:	461d      	movcc	r5, r3
 800c1ac:	0553      	lsls	r3, r2, #21
 800c1ae:	d527      	bpl.n	800c200 <__ssputs_r+0x8c>
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7ff fbd7 	bl	800b964 <_malloc_r>
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	b360      	cbz	r0, 800c214 <__ssputs_r+0xa0>
 800c1ba:	6921      	ldr	r1, [r4, #16]
 800c1bc:	464a      	mov	r2, r9
 800c1be:	f7fe fcd2 	bl	800ab66 <memcpy>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1cc:	81a3      	strh	r3, [r4, #12]
 800c1ce:	6126      	str	r6, [r4, #16]
 800c1d0:	6165      	str	r5, [r4, #20]
 800c1d2:	444e      	add	r6, r9
 800c1d4:	eba5 0509 	sub.w	r5, r5, r9
 800c1d8:	6026      	str	r6, [r4, #0]
 800c1da:	60a5      	str	r5, [r4, #8]
 800c1dc:	463e      	mov	r6, r7
 800c1de:	42be      	cmp	r6, r7
 800c1e0:	d900      	bls.n	800c1e4 <__ssputs_r+0x70>
 800c1e2:	463e      	mov	r6, r7
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	4641      	mov	r1, r8
 800c1ea:	f000 f9c9 	bl	800c580 <memmove>
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	1b9b      	subs	r3, r3, r6
 800c1f2:	60a3      	str	r3, [r4, #8]
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	4433      	add	r3, r6
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c200:	462a      	mov	r2, r5
 800c202:	f000 fa2d 	bl	800c660 <_realloc_r>
 800c206:	4606      	mov	r6, r0
 800c208:	2800      	cmp	r0, #0
 800c20a:	d1e0      	bne.n	800c1ce <__ssputs_r+0x5a>
 800c20c:	6921      	ldr	r1, [r4, #16]
 800c20e:	4650      	mov	r0, sl
 800c210:	f7ff fb34 	bl	800b87c <_free_r>
 800c214:	230c      	movs	r3, #12
 800c216:	f8ca 3000 	str.w	r3, [sl]
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c220:	81a3      	strh	r3, [r4, #12]
 800c222:	f04f 30ff 	mov.w	r0, #4294967295
 800c226:	e7e9      	b.n	800c1fc <__ssputs_r+0x88>

0800c228 <_svfiprintf_r>:
 800c228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	4698      	mov	r8, r3
 800c22e:	898b      	ldrh	r3, [r1, #12]
 800c230:	061b      	lsls	r3, r3, #24
 800c232:	b09d      	sub	sp, #116	; 0x74
 800c234:	4607      	mov	r7, r0
 800c236:	460d      	mov	r5, r1
 800c238:	4614      	mov	r4, r2
 800c23a:	d50e      	bpl.n	800c25a <_svfiprintf_r+0x32>
 800c23c:	690b      	ldr	r3, [r1, #16]
 800c23e:	b963      	cbnz	r3, 800c25a <_svfiprintf_r+0x32>
 800c240:	2140      	movs	r1, #64	; 0x40
 800c242:	f7ff fb8f 	bl	800b964 <_malloc_r>
 800c246:	6028      	str	r0, [r5, #0]
 800c248:	6128      	str	r0, [r5, #16]
 800c24a:	b920      	cbnz	r0, 800c256 <_svfiprintf_r+0x2e>
 800c24c:	230c      	movs	r3, #12
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	f04f 30ff 	mov.w	r0, #4294967295
 800c254:	e0d0      	b.n	800c3f8 <_svfiprintf_r+0x1d0>
 800c256:	2340      	movs	r3, #64	; 0x40
 800c258:	616b      	str	r3, [r5, #20]
 800c25a:	2300      	movs	r3, #0
 800c25c:	9309      	str	r3, [sp, #36]	; 0x24
 800c25e:	2320      	movs	r3, #32
 800c260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c264:	f8cd 800c 	str.w	r8, [sp, #12]
 800c268:	2330      	movs	r3, #48	; 0x30
 800c26a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c410 <_svfiprintf_r+0x1e8>
 800c26e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c272:	f04f 0901 	mov.w	r9, #1
 800c276:	4623      	mov	r3, r4
 800c278:	469a      	mov	sl, r3
 800c27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c27e:	b10a      	cbz	r2, 800c284 <_svfiprintf_r+0x5c>
 800c280:	2a25      	cmp	r2, #37	; 0x25
 800c282:	d1f9      	bne.n	800c278 <_svfiprintf_r+0x50>
 800c284:	ebba 0b04 	subs.w	fp, sl, r4
 800c288:	d00b      	beq.n	800c2a2 <_svfiprintf_r+0x7a>
 800c28a:	465b      	mov	r3, fp
 800c28c:	4622      	mov	r2, r4
 800c28e:	4629      	mov	r1, r5
 800c290:	4638      	mov	r0, r7
 800c292:	f7ff ff6f 	bl	800c174 <__ssputs_r>
 800c296:	3001      	adds	r0, #1
 800c298:	f000 80a9 	beq.w	800c3ee <_svfiprintf_r+0x1c6>
 800c29c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c29e:	445a      	add	r2, fp
 800c2a0:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 80a1 	beq.w	800c3ee <_svfiprintf_r+0x1c6>
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2b6:	f10a 0a01 	add.w	sl, sl, #1
 800c2ba:	9304      	str	r3, [sp, #16]
 800c2bc:	9307      	str	r3, [sp, #28]
 800c2be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2c2:	931a      	str	r3, [sp, #104]	; 0x68
 800c2c4:	4654      	mov	r4, sl
 800c2c6:	2205      	movs	r2, #5
 800c2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2cc:	4850      	ldr	r0, [pc, #320]	; (800c410 <_svfiprintf_r+0x1e8>)
 800c2ce:	f7f3 ffa7 	bl	8000220 <memchr>
 800c2d2:	9a04      	ldr	r2, [sp, #16]
 800c2d4:	b9d8      	cbnz	r0, 800c30e <_svfiprintf_r+0xe6>
 800c2d6:	06d0      	lsls	r0, r2, #27
 800c2d8:	bf44      	itt	mi
 800c2da:	2320      	movmi	r3, #32
 800c2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2e0:	0711      	lsls	r1, r2, #28
 800c2e2:	bf44      	itt	mi
 800c2e4:	232b      	movmi	r3, #43	; 0x2b
 800c2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f0:	d015      	beq.n	800c31e <_svfiprintf_r+0xf6>
 800c2f2:	9a07      	ldr	r2, [sp, #28]
 800c2f4:	4654      	mov	r4, sl
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	f04f 0c0a 	mov.w	ip, #10
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c302:	3b30      	subs	r3, #48	; 0x30
 800c304:	2b09      	cmp	r3, #9
 800c306:	d94d      	bls.n	800c3a4 <_svfiprintf_r+0x17c>
 800c308:	b1b0      	cbz	r0, 800c338 <_svfiprintf_r+0x110>
 800c30a:	9207      	str	r2, [sp, #28]
 800c30c:	e014      	b.n	800c338 <_svfiprintf_r+0x110>
 800c30e:	eba0 0308 	sub.w	r3, r0, r8
 800c312:	fa09 f303 	lsl.w	r3, r9, r3
 800c316:	4313      	orrs	r3, r2
 800c318:	9304      	str	r3, [sp, #16]
 800c31a:	46a2      	mov	sl, r4
 800c31c:	e7d2      	b.n	800c2c4 <_svfiprintf_r+0x9c>
 800c31e:	9b03      	ldr	r3, [sp, #12]
 800c320:	1d19      	adds	r1, r3, #4
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	9103      	str	r1, [sp, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	bfbb      	ittet	lt
 800c32a:	425b      	neglt	r3, r3
 800c32c:	f042 0202 	orrlt.w	r2, r2, #2
 800c330:	9307      	strge	r3, [sp, #28]
 800c332:	9307      	strlt	r3, [sp, #28]
 800c334:	bfb8      	it	lt
 800c336:	9204      	strlt	r2, [sp, #16]
 800c338:	7823      	ldrb	r3, [r4, #0]
 800c33a:	2b2e      	cmp	r3, #46	; 0x2e
 800c33c:	d10c      	bne.n	800c358 <_svfiprintf_r+0x130>
 800c33e:	7863      	ldrb	r3, [r4, #1]
 800c340:	2b2a      	cmp	r3, #42	; 0x2a
 800c342:	d134      	bne.n	800c3ae <_svfiprintf_r+0x186>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	1d1a      	adds	r2, r3, #4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	9203      	str	r2, [sp, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfb8      	it	lt
 800c350:	f04f 33ff 	movlt.w	r3, #4294967295
 800c354:	3402      	adds	r4, #2
 800c356:	9305      	str	r3, [sp, #20]
 800c358:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c420 <_svfiprintf_r+0x1f8>
 800c35c:	7821      	ldrb	r1, [r4, #0]
 800c35e:	2203      	movs	r2, #3
 800c360:	4650      	mov	r0, sl
 800c362:	f7f3 ff5d 	bl	8000220 <memchr>
 800c366:	b138      	cbz	r0, 800c378 <_svfiprintf_r+0x150>
 800c368:	9b04      	ldr	r3, [sp, #16]
 800c36a:	eba0 000a 	sub.w	r0, r0, sl
 800c36e:	2240      	movs	r2, #64	; 0x40
 800c370:	4082      	lsls	r2, r0
 800c372:	4313      	orrs	r3, r2
 800c374:	3401      	adds	r4, #1
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37c:	4825      	ldr	r0, [pc, #148]	; (800c414 <_svfiprintf_r+0x1ec>)
 800c37e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c382:	2206      	movs	r2, #6
 800c384:	f7f3 ff4c 	bl	8000220 <memchr>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d038      	beq.n	800c3fe <_svfiprintf_r+0x1d6>
 800c38c:	4b22      	ldr	r3, [pc, #136]	; (800c418 <_svfiprintf_r+0x1f0>)
 800c38e:	bb1b      	cbnz	r3, 800c3d8 <_svfiprintf_r+0x1b0>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	3307      	adds	r3, #7
 800c394:	f023 0307 	bic.w	r3, r3, #7
 800c398:	3308      	adds	r3, #8
 800c39a:	9303      	str	r3, [sp, #12]
 800c39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39e:	4433      	add	r3, r6
 800c3a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a2:	e768      	b.n	800c276 <_svfiprintf_r+0x4e>
 800c3a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	2001      	movs	r0, #1
 800c3ac:	e7a6      	b.n	800c2fc <_svfiprintf_r+0xd4>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	3401      	adds	r4, #1
 800c3b2:	9305      	str	r3, [sp, #20]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f04f 0c0a 	mov.w	ip, #10
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3c0:	3a30      	subs	r2, #48	; 0x30
 800c3c2:	2a09      	cmp	r2, #9
 800c3c4:	d903      	bls.n	800c3ce <_svfiprintf_r+0x1a6>
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0c6      	beq.n	800c358 <_svfiprintf_r+0x130>
 800c3ca:	9105      	str	r1, [sp, #20]
 800c3cc:	e7c4      	b.n	800c358 <_svfiprintf_r+0x130>
 800c3ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e7f0      	b.n	800c3ba <_svfiprintf_r+0x192>
 800c3d8:	ab03      	add	r3, sp, #12
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	462a      	mov	r2, r5
 800c3de:	4b0f      	ldr	r3, [pc, #60]	; (800c41c <_svfiprintf_r+0x1f4>)
 800c3e0:	a904      	add	r1, sp, #16
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	f7fd fdea 	bl	8009fbc <_printf_float>
 800c3e8:	1c42      	adds	r2, r0, #1
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	d1d6      	bne.n	800c39c <_svfiprintf_r+0x174>
 800c3ee:	89ab      	ldrh	r3, [r5, #12]
 800c3f0:	065b      	lsls	r3, r3, #25
 800c3f2:	f53f af2d 	bmi.w	800c250 <_svfiprintf_r+0x28>
 800c3f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3f8:	b01d      	add	sp, #116	; 0x74
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	ab03      	add	r3, sp, #12
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	462a      	mov	r2, r5
 800c404:	4b05      	ldr	r3, [pc, #20]	; (800c41c <_svfiprintf_r+0x1f4>)
 800c406:	a904      	add	r1, sp, #16
 800c408:	4638      	mov	r0, r7
 800c40a:	f7fe f87b 	bl	800a504 <_printf_i>
 800c40e:	e7eb      	b.n	800c3e8 <_svfiprintf_r+0x1c0>
 800c410:	0800cf4c 	.word	0x0800cf4c
 800c414:	0800cf56 	.word	0x0800cf56
 800c418:	08009fbd 	.word	0x08009fbd
 800c41c:	0800c175 	.word	0x0800c175
 800c420:	0800cf52 	.word	0x0800cf52

0800c424 <__sflush_r>:
 800c424:	898a      	ldrh	r2, [r1, #12]
 800c426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c42a:	4605      	mov	r5, r0
 800c42c:	0710      	lsls	r0, r2, #28
 800c42e:	460c      	mov	r4, r1
 800c430:	d458      	bmi.n	800c4e4 <__sflush_r+0xc0>
 800c432:	684b      	ldr	r3, [r1, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	dc05      	bgt.n	800c444 <__sflush_r+0x20>
 800c438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dc02      	bgt.n	800c444 <__sflush_r+0x20>
 800c43e:	2000      	movs	r0, #0
 800c440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c446:	2e00      	cmp	r6, #0
 800c448:	d0f9      	beq.n	800c43e <__sflush_r+0x1a>
 800c44a:	2300      	movs	r3, #0
 800c44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c450:	682f      	ldr	r7, [r5, #0]
 800c452:	6a21      	ldr	r1, [r4, #32]
 800c454:	602b      	str	r3, [r5, #0]
 800c456:	d032      	beq.n	800c4be <__sflush_r+0x9a>
 800c458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c45a:	89a3      	ldrh	r3, [r4, #12]
 800c45c:	075a      	lsls	r2, r3, #29
 800c45e:	d505      	bpl.n	800c46c <__sflush_r+0x48>
 800c460:	6863      	ldr	r3, [r4, #4]
 800c462:	1ac0      	subs	r0, r0, r3
 800c464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c466:	b10b      	cbz	r3, 800c46c <__sflush_r+0x48>
 800c468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c46a:	1ac0      	subs	r0, r0, r3
 800c46c:	2300      	movs	r3, #0
 800c46e:	4602      	mov	r2, r0
 800c470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c472:	6a21      	ldr	r1, [r4, #32]
 800c474:	4628      	mov	r0, r5
 800c476:	47b0      	blx	r6
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	d106      	bne.n	800c48c <__sflush_r+0x68>
 800c47e:	6829      	ldr	r1, [r5, #0]
 800c480:	291d      	cmp	r1, #29
 800c482:	d82b      	bhi.n	800c4dc <__sflush_r+0xb8>
 800c484:	4a29      	ldr	r2, [pc, #164]	; (800c52c <__sflush_r+0x108>)
 800c486:	410a      	asrs	r2, r1
 800c488:	07d6      	lsls	r6, r2, #31
 800c48a:	d427      	bmi.n	800c4dc <__sflush_r+0xb8>
 800c48c:	2200      	movs	r2, #0
 800c48e:	6062      	str	r2, [r4, #4]
 800c490:	04d9      	lsls	r1, r3, #19
 800c492:	6922      	ldr	r2, [r4, #16]
 800c494:	6022      	str	r2, [r4, #0]
 800c496:	d504      	bpl.n	800c4a2 <__sflush_r+0x7e>
 800c498:	1c42      	adds	r2, r0, #1
 800c49a:	d101      	bne.n	800c4a0 <__sflush_r+0x7c>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b903      	cbnz	r3, 800c4a2 <__sflush_r+0x7e>
 800c4a0:	6560      	str	r0, [r4, #84]	; 0x54
 800c4a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4a4:	602f      	str	r7, [r5, #0]
 800c4a6:	2900      	cmp	r1, #0
 800c4a8:	d0c9      	beq.n	800c43e <__sflush_r+0x1a>
 800c4aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4ae:	4299      	cmp	r1, r3
 800c4b0:	d002      	beq.n	800c4b8 <__sflush_r+0x94>
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f7ff f9e2 	bl	800b87c <_free_r>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	6360      	str	r0, [r4, #52]	; 0x34
 800c4bc:	e7c0      	b.n	800c440 <__sflush_r+0x1c>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	47b0      	blx	r6
 800c4c4:	1c41      	adds	r1, r0, #1
 800c4c6:	d1c8      	bne.n	800c45a <__sflush_r+0x36>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0c5      	beq.n	800c45a <__sflush_r+0x36>
 800c4ce:	2b1d      	cmp	r3, #29
 800c4d0:	d001      	beq.n	800c4d6 <__sflush_r+0xb2>
 800c4d2:	2b16      	cmp	r3, #22
 800c4d4:	d101      	bne.n	800c4da <__sflush_r+0xb6>
 800c4d6:	602f      	str	r7, [r5, #0]
 800c4d8:	e7b1      	b.n	800c43e <__sflush_r+0x1a>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e0:	81a3      	strh	r3, [r4, #12]
 800c4e2:	e7ad      	b.n	800c440 <__sflush_r+0x1c>
 800c4e4:	690f      	ldr	r7, [r1, #16]
 800c4e6:	2f00      	cmp	r7, #0
 800c4e8:	d0a9      	beq.n	800c43e <__sflush_r+0x1a>
 800c4ea:	0793      	lsls	r3, r2, #30
 800c4ec:	680e      	ldr	r6, [r1, #0]
 800c4ee:	bf08      	it	eq
 800c4f0:	694b      	ldreq	r3, [r1, #20]
 800c4f2:	600f      	str	r7, [r1, #0]
 800c4f4:	bf18      	it	ne
 800c4f6:	2300      	movne	r3, #0
 800c4f8:	eba6 0807 	sub.w	r8, r6, r7
 800c4fc:	608b      	str	r3, [r1, #8]
 800c4fe:	f1b8 0f00 	cmp.w	r8, #0
 800c502:	dd9c      	ble.n	800c43e <__sflush_r+0x1a>
 800c504:	6a21      	ldr	r1, [r4, #32]
 800c506:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c508:	4643      	mov	r3, r8
 800c50a:	463a      	mov	r2, r7
 800c50c:	4628      	mov	r0, r5
 800c50e:	47b0      	blx	r6
 800c510:	2800      	cmp	r0, #0
 800c512:	dc06      	bgt.n	800c522 <__sflush_r+0xfe>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	f04f 30ff 	mov.w	r0, #4294967295
 800c520:	e78e      	b.n	800c440 <__sflush_r+0x1c>
 800c522:	4407      	add	r7, r0
 800c524:	eba8 0800 	sub.w	r8, r8, r0
 800c528:	e7e9      	b.n	800c4fe <__sflush_r+0xda>
 800c52a:	bf00      	nop
 800c52c:	dfbffffe 	.word	0xdfbffffe

0800c530 <_fflush_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	690b      	ldr	r3, [r1, #16]
 800c534:	4605      	mov	r5, r0
 800c536:	460c      	mov	r4, r1
 800c538:	b913      	cbnz	r3, 800c540 <_fflush_r+0x10>
 800c53a:	2500      	movs	r5, #0
 800c53c:	4628      	mov	r0, r5
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	b118      	cbz	r0, 800c54a <_fflush_r+0x1a>
 800c542:	6a03      	ldr	r3, [r0, #32]
 800c544:	b90b      	cbnz	r3, 800c54a <_fflush_r+0x1a>
 800c546:	f7fe f98b 	bl	800a860 <__sinit>
 800c54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d0f3      	beq.n	800c53a <_fflush_r+0xa>
 800c552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c554:	07d0      	lsls	r0, r2, #31
 800c556:	d404      	bmi.n	800c562 <_fflush_r+0x32>
 800c558:	0599      	lsls	r1, r3, #22
 800c55a:	d402      	bmi.n	800c562 <_fflush_r+0x32>
 800c55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c55e:	f7fe fb00 	bl	800ab62 <__retarget_lock_acquire_recursive>
 800c562:	4628      	mov	r0, r5
 800c564:	4621      	mov	r1, r4
 800c566:	f7ff ff5d 	bl	800c424 <__sflush_r>
 800c56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c56c:	07da      	lsls	r2, r3, #31
 800c56e:	4605      	mov	r5, r0
 800c570:	d4e4      	bmi.n	800c53c <_fflush_r+0xc>
 800c572:	89a3      	ldrh	r3, [r4, #12]
 800c574:	059b      	lsls	r3, r3, #22
 800c576:	d4e1      	bmi.n	800c53c <_fflush_r+0xc>
 800c578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c57a:	f7fe faf3 	bl	800ab64 <__retarget_lock_release_recursive>
 800c57e:	e7dd      	b.n	800c53c <_fflush_r+0xc>

0800c580 <memmove>:
 800c580:	4288      	cmp	r0, r1
 800c582:	b510      	push	{r4, lr}
 800c584:	eb01 0402 	add.w	r4, r1, r2
 800c588:	d902      	bls.n	800c590 <memmove+0x10>
 800c58a:	4284      	cmp	r4, r0
 800c58c:	4623      	mov	r3, r4
 800c58e:	d807      	bhi.n	800c5a0 <memmove+0x20>
 800c590:	1e43      	subs	r3, r0, #1
 800c592:	42a1      	cmp	r1, r4
 800c594:	d008      	beq.n	800c5a8 <memmove+0x28>
 800c596:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c59a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c59e:	e7f8      	b.n	800c592 <memmove+0x12>
 800c5a0:	4402      	add	r2, r0
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	428a      	cmp	r2, r1
 800c5a6:	d100      	bne.n	800c5aa <memmove+0x2a>
 800c5a8:	bd10      	pop	{r4, pc}
 800c5aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5b2:	e7f7      	b.n	800c5a4 <memmove+0x24>

0800c5b4 <_sbrk_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d06      	ldr	r5, [pc, #24]	; (800c5d0 <_sbrk_r+0x1c>)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	f7f5 fcee 	bl	8001fa0 <_sbrk>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_sbrk_r+0x1a>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_sbrk_r+0x1a>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	200013d0 	.word	0x200013d0

0800c5d4 <__assert_func>:
 800c5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5d6:	4614      	mov	r4, r2
 800c5d8:	461a      	mov	r2, r3
 800c5da:	4b09      	ldr	r3, [pc, #36]	; (800c600 <__assert_func+0x2c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	4605      	mov	r5, r0
 800c5e0:	68d8      	ldr	r0, [r3, #12]
 800c5e2:	b14c      	cbz	r4, 800c5f8 <__assert_func+0x24>
 800c5e4:	4b07      	ldr	r3, [pc, #28]	; (800c604 <__assert_func+0x30>)
 800c5e6:	9100      	str	r1, [sp, #0]
 800c5e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5ec:	4906      	ldr	r1, [pc, #24]	; (800c608 <__assert_func+0x34>)
 800c5ee:	462b      	mov	r3, r5
 800c5f0:	f000 f872 	bl	800c6d8 <fiprintf>
 800c5f4:	f000 f882 	bl	800c6fc <abort>
 800c5f8:	4b04      	ldr	r3, [pc, #16]	; (800c60c <__assert_func+0x38>)
 800c5fa:	461c      	mov	r4, r3
 800c5fc:	e7f3      	b.n	800c5e6 <__assert_func+0x12>
 800c5fe:	bf00      	nop
 800c600:	20000070 	.word	0x20000070
 800c604:	0800cf67 	.word	0x0800cf67
 800c608:	0800cf74 	.word	0x0800cf74
 800c60c:	0800cfa2 	.word	0x0800cfa2

0800c610 <_calloc_r>:
 800c610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c612:	fba1 2402 	umull	r2, r4, r1, r2
 800c616:	b94c      	cbnz	r4, 800c62c <_calloc_r+0x1c>
 800c618:	4611      	mov	r1, r2
 800c61a:	9201      	str	r2, [sp, #4]
 800c61c:	f7ff f9a2 	bl	800b964 <_malloc_r>
 800c620:	9a01      	ldr	r2, [sp, #4]
 800c622:	4605      	mov	r5, r0
 800c624:	b930      	cbnz	r0, 800c634 <_calloc_r+0x24>
 800c626:	4628      	mov	r0, r5
 800c628:	b003      	add	sp, #12
 800c62a:	bd30      	pop	{r4, r5, pc}
 800c62c:	220c      	movs	r2, #12
 800c62e:	6002      	str	r2, [r0, #0]
 800c630:	2500      	movs	r5, #0
 800c632:	e7f8      	b.n	800c626 <_calloc_r+0x16>
 800c634:	4621      	mov	r1, r4
 800c636:	f7fe f9c0 	bl	800a9ba <memset>
 800c63a:	e7f4      	b.n	800c626 <_calloc_r+0x16>

0800c63c <__ascii_mbtowc>:
 800c63c:	b082      	sub	sp, #8
 800c63e:	b901      	cbnz	r1, 800c642 <__ascii_mbtowc+0x6>
 800c640:	a901      	add	r1, sp, #4
 800c642:	b142      	cbz	r2, 800c656 <__ascii_mbtowc+0x1a>
 800c644:	b14b      	cbz	r3, 800c65a <__ascii_mbtowc+0x1e>
 800c646:	7813      	ldrb	r3, [r2, #0]
 800c648:	600b      	str	r3, [r1, #0]
 800c64a:	7812      	ldrb	r2, [r2, #0]
 800c64c:	1e10      	subs	r0, r2, #0
 800c64e:	bf18      	it	ne
 800c650:	2001      	movne	r0, #1
 800c652:	b002      	add	sp, #8
 800c654:	4770      	bx	lr
 800c656:	4610      	mov	r0, r2
 800c658:	e7fb      	b.n	800c652 <__ascii_mbtowc+0x16>
 800c65a:	f06f 0001 	mvn.w	r0, #1
 800c65e:	e7f8      	b.n	800c652 <__ascii_mbtowc+0x16>

0800c660 <_realloc_r>:
 800c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	4680      	mov	r8, r0
 800c666:	4614      	mov	r4, r2
 800c668:	460e      	mov	r6, r1
 800c66a:	b921      	cbnz	r1, 800c676 <_realloc_r+0x16>
 800c66c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c670:	4611      	mov	r1, r2
 800c672:	f7ff b977 	b.w	800b964 <_malloc_r>
 800c676:	b92a      	cbnz	r2, 800c684 <_realloc_r+0x24>
 800c678:	f7ff f900 	bl	800b87c <_free_r>
 800c67c:	4625      	mov	r5, r4
 800c67e:	4628      	mov	r0, r5
 800c680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c684:	f000 f841 	bl	800c70a <_malloc_usable_size_r>
 800c688:	4284      	cmp	r4, r0
 800c68a:	4607      	mov	r7, r0
 800c68c:	d802      	bhi.n	800c694 <_realloc_r+0x34>
 800c68e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c692:	d812      	bhi.n	800c6ba <_realloc_r+0x5a>
 800c694:	4621      	mov	r1, r4
 800c696:	4640      	mov	r0, r8
 800c698:	f7ff f964 	bl	800b964 <_malloc_r>
 800c69c:	4605      	mov	r5, r0
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d0ed      	beq.n	800c67e <_realloc_r+0x1e>
 800c6a2:	42bc      	cmp	r4, r7
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	4631      	mov	r1, r6
 800c6a8:	bf28      	it	cs
 800c6aa:	463a      	movcs	r2, r7
 800c6ac:	f7fe fa5b 	bl	800ab66 <memcpy>
 800c6b0:	4631      	mov	r1, r6
 800c6b2:	4640      	mov	r0, r8
 800c6b4:	f7ff f8e2 	bl	800b87c <_free_r>
 800c6b8:	e7e1      	b.n	800c67e <_realloc_r+0x1e>
 800c6ba:	4635      	mov	r5, r6
 800c6bc:	e7df      	b.n	800c67e <_realloc_r+0x1e>

0800c6be <__ascii_wctomb>:
 800c6be:	b149      	cbz	r1, 800c6d4 <__ascii_wctomb+0x16>
 800c6c0:	2aff      	cmp	r2, #255	; 0xff
 800c6c2:	bf85      	ittet	hi
 800c6c4:	238a      	movhi	r3, #138	; 0x8a
 800c6c6:	6003      	strhi	r3, [r0, #0]
 800c6c8:	700a      	strbls	r2, [r1, #0]
 800c6ca:	f04f 30ff 	movhi.w	r0, #4294967295
 800c6ce:	bf98      	it	ls
 800c6d0:	2001      	movls	r0, #1
 800c6d2:	4770      	bx	lr
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	4770      	bx	lr

0800c6d8 <fiprintf>:
 800c6d8:	b40e      	push	{r1, r2, r3}
 800c6da:	b503      	push	{r0, r1, lr}
 800c6dc:	4601      	mov	r1, r0
 800c6de:	ab03      	add	r3, sp, #12
 800c6e0:	4805      	ldr	r0, [pc, #20]	; (800c6f8 <fiprintf+0x20>)
 800c6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6e6:	6800      	ldr	r0, [r0, #0]
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	f000 f83f 	bl	800c76c <_vfiprintf_r>
 800c6ee:	b002      	add	sp, #8
 800c6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6f4:	b003      	add	sp, #12
 800c6f6:	4770      	bx	lr
 800c6f8:	20000070 	.word	0x20000070

0800c6fc <abort>:
 800c6fc:	b508      	push	{r3, lr}
 800c6fe:	2006      	movs	r0, #6
 800c700:	f000 fa0c 	bl	800cb1c <raise>
 800c704:	2001      	movs	r0, #1
 800c706:	f7f5 fbd4 	bl	8001eb2 <_exit>

0800c70a <_malloc_usable_size_r>:
 800c70a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c70e:	1f18      	subs	r0, r3, #4
 800c710:	2b00      	cmp	r3, #0
 800c712:	bfbc      	itt	lt
 800c714:	580b      	ldrlt	r3, [r1, r0]
 800c716:	18c0      	addlt	r0, r0, r3
 800c718:	4770      	bx	lr

0800c71a <__sfputc_r>:
 800c71a:	6893      	ldr	r3, [r2, #8]
 800c71c:	3b01      	subs	r3, #1
 800c71e:	2b00      	cmp	r3, #0
 800c720:	b410      	push	{r4}
 800c722:	6093      	str	r3, [r2, #8]
 800c724:	da08      	bge.n	800c738 <__sfputc_r+0x1e>
 800c726:	6994      	ldr	r4, [r2, #24]
 800c728:	42a3      	cmp	r3, r4
 800c72a:	db01      	blt.n	800c730 <__sfputc_r+0x16>
 800c72c:	290a      	cmp	r1, #10
 800c72e:	d103      	bne.n	800c738 <__sfputc_r+0x1e>
 800c730:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c734:	f000 b934 	b.w	800c9a0 <__swbuf_r>
 800c738:	6813      	ldr	r3, [r2, #0]
 800c73a:	1c58      	adds	r0, r3, #1
 800c73c:	6010      	str	r0, [r2, #0]
 800c73e:	7019      	strb	r1, [r3, #0]
 800c740:	4608      	mov	r0, r1
 800c742:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <__sfputs_r>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	4606      	mov	r6, r0
 800c74c:	460f      	mov	r7, r1
 800c74e:	4614      	mov	r4, r2
 800c750:	18d5      	adds	r5, r2, r3
 800c752:	42ac      	cmp	r4, r5
 800c754:	d101      	bne.n	800c75a <__sfputs_r+0x12>
 800c756:	2000      	movs	r0, #0
 800c758:	e007      	b.n	800c76a <__sfputs_r+0x22>
 800c75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75e:	463a      	mov	r2, r7
 800c760:	4630      	mov	r0, r6
 800c762:	f7ff ffda 	bl	800c71a <__sfputc_r>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	d1f3      	bne.n	800c752 <__sfputs_r+0xa>
 800c76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c76c <_vfiprintf_r>:
 800c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	460d      	mov	r5, r1
 800c772:	b09d      	sub	sp, #116	; 0x74
 800c774:	4614      	mov	r4, r2
 800c776:	4698      	mov	r8, r3
 800c778:	4606      	mov	r6, r0
 800c77a:	b118      	cbz	r0, 800c784 <_vfiprintf_r+0x18>
 800c77c:	6a03      	ldr	r3, [r0, #32]
 800c77e:	b90b      	cbnz	r3, 800c784 <_vfiprintf_r+0x18>
 800c780:	f7fe f86e 	bl	800a860 <__sinit>
 800c784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c786:	07d9      	lsls	r1, r3, #31
 800c788:	d405      	bmi.n	800c796 <_vfiprintf_r+0x2a>
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	059a      	lsls	r2, r3, #22
 800c78e:	d402      	bmi.n	800c796 <_vfiprintf_r+0x2a>
 800c790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c792:	f7fe f9e6 	bl	800ab62 <__retarget_lock_acquire_recursive>
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	071b      	lsls	r3, r3, #28
 800c79a:	d501      	bpl.n	800c7a0 <_vfiprintf_r+0x34>
 800c79c:	692b      	ldr	r3, [r5, #16]
 800c79e:	b99b      	cbnz	r3, 800c7c8 <_vfiprintf_r+0x5c>
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f000 f93a 	bl	800ca1c <__swsetup_r>
 800c7a8:	b170      	cbz	r0, 800c7c8 <_vfiprintf_r+0x5c>
 800c7aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7ac:	07dc      	lsls	r4, r3, #31
 800c7ae:	d504      	bpl.n	800c7ba <_vfiprintf_r+0x4e>
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b4:	b01d      	add	sp, #116	; 0x74
 800c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ba:	89ab      	ldrh	r3, [r5, #12]
 800c7bc:	0598      	lsls	r0, r3, #22
 800c7be:	d4f7      	bmi.n	800c7b0 <_vfiprintf_r+0x44>
 800c7c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7c2:	f7fe f9cf 	bl	800ab64 <__retarget_lock_release_recursive>
 800c7c6:	e7f3      	b.n	800c7b0 <_vfiprintf_r+0x44>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c7cc:	2320      	movs	r3, #32
 800c7ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7d6:	2330      	movs	r3, #48	; 0x30
 800c7d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c98c <_vfiprintf_r+0x220>
 800c7dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7e0:	f04f 0901 	mov.w	r9, #1
 800c7e4:	4623      	mov	r3, r4
 800c7e6:	469a      	mov	sl, r3
 800c7e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7ec:	b10a      	cbz	r2, 800c7f2 <_vfiprintf_r+0x86>
 800c7ee:	2a25      	cmp	r2, #37	; 0x25
 800c7f0:	d1f9      	bne.n	800c7e6 <_vfiprintf_r+0x7a>
 800c7f2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7f6:	d00b      	beq.n	800c810 <_vfiprintf_r+0xa4>
 800c7f8:	465b      	mov	r3, fp
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4630      	mov	r0, r6
 800c800:	f7ff ffa2 	bl	800c748 <__sfputs_r>
 800c804:	3001      	adds	r0, #1
 800c806:	f000 80a9 	beq.w	800c95c <_vfiprintf_r+0x1f0>
 800c80a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c80c:	445a      	add	r2, fp
 800c80e:	9209      	str	r2, [sp, #36]	; 0x24
 800c810:	f89a 3000 	ldrb.w	r3, [sl]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 80a1 	beq.w	800c95c <_vfiprintf_r+0x1f0>
 800c81a:	2300      	movs	r3, #0
 800c81c:	f04f 32ff 	mov.w	r2, #4294967295
 800c820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c824:	f10a 0a01 	add.w	sl, sl, #1
 800c828:	9304      	str	r3, [sp, #16]
 800c82a:	9307      	str	r3, [sp, #28]
 800c82c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c830:	931a      	str	r3, [sp, #104]	; 0x68
 800c832:	4654      	mov	r4, sl
 800c834:	2205      	movs	r2, #5
 800c836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c83a:	4854      	ldr	r0, [pc, #336]	; (800c98c <_vfiprintf_r+0x220>)
 800c83c:	f7f3 fcf0 	bl	8000220 <memchr>
 800c840:	9a04      	ldr	r2, [sp, #16]
 800c842:	b9d8      	cbnz	r0, 800c87c <_vfiprintf_r+0x110>
 800c844:	06d1      	lsls	r1, r2, #27
 800c846:	bf44      	itt	mi
 800c848:	2320      	movmi	r3, #32
 800c84a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c84e:	0713      	lsls	r3, r2, #28
 800c850:	bf44      	itt	mi
 800c852:	232b      	movmi	r3, #43	; 0x2b
 800c854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c858:	f89a 3000 	ldrb.w	r3, [sl]
 800c85c:	2b2a      	cmp	r3, #42	; 0x2a
 800c85e:	d015      	beq.n	800c88c <_vfiprintf_r+0x120>
 800c860:	9a07      	ldr	r2, [sp, #28]
 800c862:	4654      	mov	r4, sl
 800c864:	2000      	movs	r0, #0
 800c866:	f04f 0c0a 	mov.w	ip, #10
 800c86a:	4621      	mov	r1, r4
 800c86c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c870:	3b30      	subs	r3, #48	; 0x30
 800c872:	2b09      	cmp	r3, #9
 800c874:	d94d      	bls.n	800c912 <_vfiprintf_r+0x1a6>
 800c876:	b1b0      	cbz	r0, 800c8a6 <_vfiprintf_r+0x13a>
 800c878:	9207      	str	r2, [sp, #28]
 800c87a:	e014      	b.n	800c8a6 <_vfiprintf_r+0x13a>
 800c87c:	eba0 0308 	sub.w	r3, r0, r8
 800c880:	fa09 f303 	lsl.w	r3, r9, r3
 800c884:	4313      	orrs	r3, r2
 800c886:	9304      	str	r3, [sp, #16]
 800c888:	46a2      	mov	sl, r4
 800c88a:	e7d2      	b.n	800c832 <_vfiprintf_r+0xc6>
 800c88c:	9b03      	ldr	r3, [sp, #12]
 800c88e:	1d19      	adds	r1, r3, #4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	9103      	str	r1, [sp, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	bfbb      	ittet	lt
 800c898:	425b      	neglt	r3, r3
 800c89a:	f042 0202 	orrlt.w	r2, r2, #2
 800c89e:	9307      	strge	r3, [sp, #28]
 800c8a0:	9307      	strlt	r3, [sp, #28]
 800c8a2:	bfb8      	it	lt
 800c8a4:	9204      	strlt	r2, [sp, #16]
 800c8a6:	7823      	ldrb	r3, [r4, #0]
 800c8a8:	2b2e      	cmp	r3, #46	; 0x2e
 800c8aa:	d10c      	bne.n	800c8c6 <_vfiprintf_r+0x15a>
 800c8ac:	7863      	ldrb	r3, [r4, #1]
 800c8ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c8b0:	d134      	bne.n	800c91c <_vfiprintf_r+0x1b0>
 800c8b2:	9b03      	ldr	r3, [sp, #12]
 800c8b4:	1d1a      	adds	r2, r3, #4
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	9203      	str	r2, [sp, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bfb8      	it	lt
 800c8be:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8c2:	3402      	adds	r4, #2
 800c8c4:	9305      	str	r3, [sp, #20]
 800c8c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c99c <_vfiprintf_r+0x230>
 800c8ca:	7821      	ldrb	r1, [r4, #0]
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	4650      	mov	r0, sl
 800c8d0:	f7f3 fca6 	bl	8000220 <memchr>
 800c8d4:	b138      	cbz	r0, 800c8e6 <_vfiprintf_r+0x17a>
 800c8d6:	9b04      	ldr	r3, [sp, #16]
 800c8d8:	eba0 000a 	sub.w	r0, r0, sl
 800c8dc:	2240      	movs	r2, #64	; 0x40
 800c8de:	4082      	lsls	r2, r0
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	3401      	adds	r4, #1
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ea:	4829      	ldr	r0, [pc, #164]	; (800c990 <_vfiprintf_r+0x224>)
 800c8ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8f0:	2206      	movs	r2, #6
 800c8f2:	f7f3 fc95 	bl	8000220 <memchr>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d03f      	beq.n	800c97a <_vfiprintf_r+0x20e>
 800c8fa:	4b26      	ldr	r3, [pc, #152]	; (800c994 <_vfiprintf_r+0x228>)
 800c8fc:	bb1b      	cbnz	r3, 800c946 <_vfiprintf_r+0x1da>
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	3307      	adds	r3, #7
 800c902:	f023 0307 	bic.w	r3, r3, #7
 800c906:	3308      	adds	r3, #8
 800c908:	9303      	str	r3, [sp, #12]
 800c90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c90c:	443b      	add	r3, r7
 800c90e:	9309      	str	r3, [sp, #36]	; 0x24
 800c910:	e768      	b.n	800c7e4 <_vfiprintf_r+0x78>
 800c912:	fb0c 3202 	mla	r2, ip, r2, r3
 800c916:	460c      	mov	r4, r1
 800c918:	2001      	movs	r0, #1
 800c91a:	e7a6      	b.n	800c86a <_vfiprintf_r+0xfe>
 800c91c:	2300      	movs	r3, #0
 800c91e:	3401      	adds	r4, #1
 800c920:	9305      	str	r3, [sp, #20]
 800c922:	4619      	mov	r1, r3
 800c924:	f04f 0c0a 	mov.w	ip, #10
 800c928:	4620      	mov	r0, r4
 800c92a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c92e:	3a30      	subs	r2, #48	; 0x30
 800c930:	2a09      	cmp	r2, #9
 800c932:	d903      	bls.n	800c93c <_vfiprintf_r+0x1d0>
 800c934:	2b00      	cmp	r3, #0
 800c936:	d0c6      	beq.n	800c8c6 <_vfiprintf_r+0x15a>
 800c938:	9105      	str	r1, [sp, #20]
 800c93a:	e7c4      	b.n	800c8c6 <_vfiprintf_r+0x15a>
 800c93c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c940:	4604      	mov	r4, r0
 800c942:	2301      	movs	r3, #1
 800c944:	e7f0      	b.n	800c928 <_vfiprintf_r+0x1bc>
 800c946:	ab03      	add	r3, sp, #12
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	462a      	mov	r2, r5
 800c94c:	4b12      	ldr	r3, [pc, #72]	; (800c998 <_vfiprintf_r+0x22c>)
 800c94e:	a904      	add	r1, sp, #16
 800c950:	4630      	mov	r0, r6
 800c952:	f7fd fb33 	bl	8009fbc <_printf_float>
 800c956:	4607      	mov	r7, r0
 800c958:	1c78      	adds	r0, r7, #1
 800c95a:	d1d6      	bne.n	800c90a <_vfiprintf_r+0x19e>
 800c95c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c95e:	07d9      	lsls	r1, r3, #31
 800c960:	d405      	bmi.n	800c96e <_vfiprintf_r+0x202>
 800c962:	89ab      	ldrh	r3, [r5, #12]
 800c964:	059a      	lsls	r2, r3, #22
 800c966:	d402      	bmi.n	800c96e <_vfiprintf_r+0x202>
 800c968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c96a:	f7fe f8fb 	bl	800ab64 <__retarget_lock_release_recursive>
 800c96e:	89ab      	ldrh	r3, [r5, #12]
 800c970:	065b      	lsls	r3, r3, #25
 800c972:	f53f af1d 	bmi.w	800c7b0 <_vfiprintf_r+0x44>
 800c976:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c978:	e71c      	b.n	800c7b4 <_vfiprintf_r+0x48>
 800c97a:	ab03      	add	r3, sp, #12
 800c97c:	9300      	str	r3, [sp, #0]
 800c97e:	462a      	mov	r2, r5
 800c980:	4b05      	ldr	r3, [pc, #20]	; (800c998 <_vfiprintf_r+0x22c>)
 800c982:	a904      	add	r1, sp, #16
 800c984:	4630      	mov	r0, r6
 800c986:	f7fd fdbd 	bl	800a504 <_printf_i>
 800c98a:	e7e4      	b.n	800c956 <_vfiprintf_r+0x1ea>
 800c98c:	0800cf4c 	.word	0x0800cf4c
 800c990:	0800cf56 	.word	0x0800cf56
 800c994:	08009fbd 	.word	0x08009fbd
 800c998:	0800c749 	.word	0x0800c749
 800c99c:	0800cf52 	.word	0x0800cf52

0800c9a0 <__swbuf_r>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	460e      	mov	r6, r1
 800c9a4:	4614      	mov	r4, r2
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	b118      	cbz	r0, 800c9b2 <__swbuf_r+0x12>
 800c9aa:	6a03      	ldr	r3, [r0, #32]
 800c9ac:	b90b      	cbnz	r3, 800c9b2 <__swbuf_r+0x12>
 800c9ae:	f7fd ff57 	bl	800a860 <__sinit>
 800c9b2:	69a3      	ldr	r3, [r4, #24]
 800c9b4:	60a3      	str	r3, [r4, #8]
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	071a      	lsls	r2, r3, #28
 800c9ba:	d525      	bpl.n	800ca08 <__swbuf_r+0x68>
 800c9bc:	6923      	ldr	r3, [r4, #16]
 800c9be:	b31b      	cbz	r3, 800ca08 <__swbuf_r+0x68>
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	6922      	ldr	r2, [r4, #16]
 800c9c4:	1a98      	subs	r0, r3, r2
 800c9c6:	6963      	ldr	r3, [r4, #20]
 800c9c8:	b2f6      	uxtb	r6, r6
 800c9ca:	4283      	cmp	r3, r0
 800c9cc:	4637      	mov	r7, r6
 800c9ce:	dc04      	bgt.n	800c9da <__swbuf_r+0x3a>
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	f7ff fdac 	bl	800c530 <_fflush_r>
 800c9d8:	b9e0      	cbnz	r0, 800ca14 <__swbuf_r+0x74>
 800c9da:	68a3      	ldr	r3, [r4, #8]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	60a3      	str	r3, [r4, #8]
 800c9e0:	6823      	ldr	r3, [r4, #0]
 800c9e2:	1c5a      	adds	r2, r3, #1
 800c9e4:	6022      	str	r2, [r4, #0]
 800c9e6:	701e      	strb	r6, [r3, #0]
 800c9e8:	6962      	ldr	r2, [r4, #20]
 800c9ea:	1c43      	adds	r3, r0, #1
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d004      	beq.n	800c9fa <__swbuf_r+0x5a>
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	07db      	lsls	r3, r3, #31
 800c9f4:	d506      	bpl.n	800ca04 <__swbuf_r+0x64>
 800c9f6:	2e0a      	cmp	r6, #10
 800c9f8:	d104      	bne.n	800ca04 <__swbuf_r+0x64>
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f7ff fd97 	bl	800c530 <_fflush_r>
 800ca02:	b938      	cbnz	r0, 800ca14 <__swbuf_r+0x74>
 800ca04:	4638      	mov	r0, r7
 800ca06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca08:	4621      	mov	r1, r4
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f000 f806 	bl	800ca1c <__swsetup_r>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d0d5      	beq.n	800c9c0 <__swbuf_r+0x20>
 800ca14:	f04f 37ff 	mov.w	r7, #4294967295
 800ca18:	e7f4      	b.n	800ca04 <__swbuf_r+0x64>
	...

0800ca1c <__swsetup_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4b2a      	ldr	r3, [pc, #168]	; (800cac8 <__swsetup_r+0xac>)
 800ca20:	4605      	mov	r5, r0
 800ca22:	6818      	ldr	r0, [r3, #0]
 800ca24:	460c      	mov	r4, r1
 800ca26:	b118      	cbz	r0, 800ca30 <__swsetup_r+0x14>
 800ca28:	6a03      	ldr	r3, [r0, #32]
 800ca2a:	b90b      	cbnz	r3, 800ca30 <__swsetup_r+0x14>
 800ca2c:	f7fd ff18 	bl	800a860 <__sinit>
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca36:	0718      	lsls	r0, r3, #28
 800ca38:	d422      	bmi.n	800ca80 <__swsetup_r+0x64>
 800ca3a:	06d9      	lsls	r1, r3, #27
 800ca3c:	d407      	bmi.n	800ca4e <__swsetup_r+0x32>
 800ca3e:	2309      	movs	r3, #9
 800ca40:	602b      	str	r3, [r5, #0]
 800ca42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca46:	81a3      	strh	r3, [r4, #12]
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	e034      	b.n	800cab8 <__swsetup_r+0x9c>
 800ca4e:	0758      	lsls	r0, r3, #29
 800ca50:	d512      	bpl.n	800ca78 <__swsetup_r+0x5c>
 800ca52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca54:	b141      	cbz	r1, 800ca68 <__swsetup_r+0x4c>
 800ca56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca5a:	4299      	cmp	r1, r3
 800ca5c:	d002      	beq.n	800ca64 <__swsetup_r+0x48>
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f7fe ff0c 	bl	800b87c <_free_r>
 800ca64:	2300      	movs	r3, #0
 800ca66:	6363      	str	r3, [r4, #52]	; 0x34
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca6e:	81a3      	strh	r3, [r4, #12]
 800ca70:	2300      	movs	r3, #0
 800ca72:	6063      	str	r3, [r4, #4]
 800ca74:	6923      	ldr	r3, [r4, #16]
 800ca76:	6023      	str	r3, [r4, #0]
 800ca78:	89a3      	ldrh	r3, [r4, #12]
 800ca7a:	f043 0308 	orr.w	r3, r3, #8
 800ca7e:	81a3      	strh	r3, [r4, #12]
 800ca80:	6923      	ldr	r3, [r4, #16]
 800ca82:	b94b      	cbnz	r3, 800ca98 <__swsetup_r+0x7c>
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca8e:	d003      	beq.n	800ca98 <__swsetup_r+0x7c>
 800ca90:	4621      	mov	r1, r4
 800ca92:	4628      	mov	r0, r5
 800ca94:	f000 f884 	bl	800cba0 <__smakebuf_r>
 800ca98:	89a0      	ldrh	r0, [r4, #12]
 800ca9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca9e:	f010 0301 	ands.w	r3, r0, #1
 800caa2:	d00a      	beq.n	800caba <__swsetup_r+0x9e>
 800caa4:	2300      	movs	r3, #0
 800caa6:	60a3      	str	r3, [r4, #8]
 800caa8:	6963      	ldr	r3, [r4, #20]
 800caaa:	425b      	negs	r3, r3
 800caac:	61a3      	str	r3, [r4, #24]
 800caae:	6923      	ldr	r3, [r4, #16]
 800cab0:	b943      	cbnz	r3, 800cac4 <__swsetup_r+0xa8>
 800cab2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cab6:	d1c4      	bne.n	800ca42 <__swsetup_r+0x26>
 800cab8:	bd38      	pop	{r3, r4, r5, pc}
 800caba:	0781      	lsls	r1, r0, #30
 800cabc:	bf58      	it	pl
 800cabe:	6963      	ldrpl	r3, [r4, #20]
 800cac0:	60a3      	str	r3, [r4, #8]
 800cac2:	e7f4      	b.n	800caae <__swsetup_r+0x92>
 800cac4:	2000      	movs	r0, #0
 800cac6:	e7f7      	b.n	800cab8 <__swsetup_r+0x9c>
 800cac8:	20000070 	.word	0x20000070

0800cacc <_raise_r>:
 800cacc:	291f      	cmp	r1, #31
 800cace:	b538      	push	{r3, r4, r5, lr}
 800cad0:	4604      	mov	r4, r0
 800cad2:	460d      	mov	r5, r1
 800cad4:	d904      	bls.n	800cae0 <_raise_r+0x14>
 800cad6:	2316      	movs	r3, #22
 800cad8:	6003      	str	r3, [r0, #0]
 800cada:	f04f 30ff 	mov.w	r0, #4294967295
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cae2:	b112      	cbz	r2, 800caea <_raise_r+0x1e>
 800cae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae8:	b94b      	cbnz	r3, 800cafe <_raise_r+0x32>
 800caea:	4620      	mov	r0, r4
 800caec:	f000 f830 	bl	800cb50 <_getpid_r>
 800caf0:	462a      	mov	r2, r5
 800caf2:	4601      	mov	r1, r0
 800caf4:	4620      	mov	r0, r4
 800caf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cafa:	f000 b817 	b.w	800cb2c <_kill_r>
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d00a      	beq.n	800cb18 <_raise_r+0x4c>
 800cb02:	1c59      	adds	r1, r3, #1
 800cb04:	d103      	bne.n	800cb0e <_raise_r+0x42>
 800cb06:	2316      	movs	r3, #22
 800cb08:	6003      	str	r3, [r0, #0]
 800cb0a:	2001      	movs	r0, #1
 800cb0c:	e7e7      	b.n	800cade <_raise_r+0x12>
 800cb0e:	2400      	movs	r4, #0
 800cb10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb14:	4628      	mov	r0, r5
 800cb16:	4798      	blx	r3
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e7e0      	b.n	800cade <_raise_r+0x12>

0800cb1c <raise>:
 800cb1c:	4b02      	ldr	r3, [pc, #8]	; (800cb28 <raise+0xc>)
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6818      	ldr	r0, [r3, #0]
 800cb22:	f7ff bfd3 	b.w	800cacc <_raise_r>
 800cb26:	bf00      	nop
 800cb28:	20000070 	.word	0x20000070

0800cb2c <_kill_r>:
 800cb2c:	b538      	push	{r3, r4, r5, lr}
 800cb2e:	4d07      	ldr	r5, [pc, #28]	; (800cb4c <_kill_r+0x20>)
 800cb30:	2300      	movs	r3, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	4608      	mov	r0, r1
 800cb36:	4611      	mov	r1, r2
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	f7f5 f9aa 	bl	8001e92 <_kill>
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	d102      	bne.n	800cb48 <_kill_r+0x1c>
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	b103      	cbz	r3, 800cb48 <_kill_r+0x1c>
 800cb46:	6023      	str	r3, [r4, #0]
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	bf00      	nop
 800cb4c:	200013d0 	.word	0x200013d0

0800cb50 <_getpid_r>:
 800cb50:	f7f5 b997 	b.w	8001e82 <_getpid>

0800cb54 <__swhatbuf_r>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	460c      	mov	r4, r1
 800cb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb5c:	2900      	cmp	r1, #0
 800cb5e:	b096      	sub	sp, #88	; 0x58
 800cb60:	4615      	mov	r5, r2
 800cb62:	461e      	mov	r6, r3
 800cb64:	da0d      	bge.n	800cb82 <__swhatbuf_r+0x2e>
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb6c:	f04f 0100 	mov.w	r1, #0
 800cb70:	bf0c      	ite	eq
 800cb72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb76:	2340      	movne	r3, #64	; 0x40
 800cb78:	2000      	movs	r0, #0
 800cb7a:	6031      	str	r1, [r6, #0]
 800cb7c:	602b      	str	r3, [r5, #0]
 800cb7e:	b016      	add	sp, #88	; 0x58
 800cb80:	bd70      	pop	{r4, r5, r6, pc}
 800cb82:	466a      	mov	r2, sp
 800cb84:	f000 f848 	bl	800cc18 <_fstat_r>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	dbec      	blt.n	800cb66 <__swhatbuf_r+0x12>
 800cb8c:	9901      	ldr	r1, [sp, #4]
 800cb8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb96:	4259      	negs	r1, r3
 800cb98:	4159      	adcs	r1, r3
 800cb9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9e:	e7eb      	b.n	800cb78 <__swhatbuf_r+0x24>

0800cba0 <__smakebuf_r>:
 800cba0:	898b      	ldrh	r3, [r1, #12]
 800cba2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cba4:	079d      	lsls	r5, r3, #30
 800cba6:	4606      	mov	r6, r0
 800cba8:	460c      	mov	r4, r1
 800cbaa:	d507      	bpl.n	800cbbc <__smakebuf_r+0x1c>
 800cbac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	6163      	str	r3, [r4, #20]
 800cbb8:	b002      	add	sp, #8
 800cbba:	bd70      	pop	{r4, r5, r6, pc}
 800cbbc:	ab01      	add	r3, sp, #4
 800cbbe:	466a      	mov	r2, sp
 800cbc0:	f7ff ffc8 	bl	800cb54 <__swhatbuf_r>
 800cbc4:	9900      	ldr	r1, [sp, #0]
 800cbc6:	4605      	mov	r5, r0
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f7fe fecb 	bl	800b964 <_malloc_r>
 800cbce:	b948      	cbnz	r0, 800cbe4 <__smakebuf_r+0x44>
 800cbd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbd4:	059a      	lsls	r2, r3, #22
 800cbd6:	d4ef      	bmi.n	800cbb8 <__smakebuf_r+0x18>
 800cbd8:	f023 0303 	bic.w	r3, r3, #3
 800cbdc:	f043 0302 	orr.w	r3, r3, #2
 800cbe0:	81a3      	strh	r3, [r4, #12]
 800cbe2:	e7e3      	b.n	800cbac <__smakebuf_r+0xc>
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	6020      	str	r0, [r4, #0]
 800cbe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbec:	81a3      	strh	r3, [r4, #12]
 800cbee:	9b00      	ldr	r3, [sp, #0]
 800cbf0:	6163      	str	r3, [r4, #20]
 800cbf2:	9b01      	ldr	r3, [sp, #4]
 800cbf4:	6120      	str	r0, [r4, #16]
 800cbf6:	b15b      	cbz	r3, 800cc10 <__smakebuf_r+0x70>
 800cbf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f000 f81d 	bl	800cc3c <_isatty_r>
 800cc02:	b128      	cbz	r0, 800cc10 <__smakebuf_r+0x70>
 800cc04:	89a3      	ldrh	r3, [r4, #12]
 800cc06:	f023 0303 	bic.w	r3, r3, #3
 800cc0a:	f043 0301 	orr.w	r3, r3, #1
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	89a3      	ldrh	r3, [r4, #12]
 800cc12:	431d      	orrs	r5, r3
 800cc14:	81a5      	strh	r5, [r4, #12]
 800cc16:	e7cf      	b.n	800cbb8 <__smakebuf_r+0x18>

0800cc18 <_fstat_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4d07      	ldr	r5, [pc, #28]	; (800cc38 <_fstat_r+0x20>)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	4604      	mov	r4, r0
 800cc20:	4608      	mov	r0, r1
 800cc22:	4611      	mov	r1, r2
 800cc24:	602b      	str	r3, [r5, #0]
 800cc26:	f7f5 f993 	bl	8001f50 <_fstat>
 800cc2a:	1c43      	adds	r3, r0, #1
 800cc2c:	d102      	bne.n	800cc34 <_fstat_r+0x1c>
 800cc2e:	682b      	ldr	r3, [r5, #0]
 800cc30:	b103      	cbz	r3, 800cc34 <_fstat_r+0x1c>
 800cc32:	6023      	str	r3, [r4, #0]
 800cc34:	bd38      	pop	{r3, r4, r5, pc}
 800cc36:	bf00      	nop
 800cc38:	200013d0 	.word	0x200013d0

0800cc3c <_isatty_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4d06      	ldr	r5, [pc, #24]	; (800cc58 <_isatty_r+0x1c>)
 800cc40:	2300      	movs	r3, #0
 800cc42:	4604      	mov	r4, r0
 800cc44:	4608      	mov	r0, r1
 800cc46:	602b      	str	r3, [r5, #0]
 800cc48:	f7f5 f992 	bl	8001f70 <_isatty>
 800cc4c:	1c43      	adds	r3, r0, #1
 800cc4e:	d102      	bne.n	800cc56 <_isatty_r+0x1a>
 800cc50:	682b      	ldr	r3, [r5, #0]
 800cc52:	b103      	cbz	r3, 800cc56 <_isatty_r+0x1a>
 800cc54:	6023      	str	r3, [r4, #0]
 800cc56:	bd38      	pop	{r3, r4, r5, pc}
 800cc58:	200013d0 	.word	0x200013d0

0800cc5c <_init>:
 800cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5e:	bf00      	nop
 800cc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc62:	bc08      	pop	{r3}
 800cc64:	469e      	mov	lr, r3
 800cc66:	4770      	bx	lr

0800cc68 <_fini>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	bf00      	nop
 800cc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6e:	bc08      	pop	{r3}
 800cc70:	469e      	mov	lr, r3
 800cc72:	4770      	bx	lr
